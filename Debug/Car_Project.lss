
Car_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004080  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00800060  00004080  00004114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080016e  0080016e  00004222  2**0
                  ALLOC
  3 .stab         0000426c  00000000  00000000  00004224  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019cb  00000000  00000000  00008490  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00009e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00009fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000a1ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000c1bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000d32d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000e330  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000e4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000e791  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f03f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__vector_4>
      14:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <__vector_5>
      18:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__vector_6>
      1c:	0c 94 90 0d 	jmp	0x1b20	; 0x1b20 <__vector_7>
      20:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__vector_8>
      24:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__vector_9>
      28:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__vector_10>
      2c:	0c 94 2a 0d 	jmp	0x1a54	; 0x1a54 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <main>
      8a:	0c 94 3e 20 	jmp	0x407c	; 0x407c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 07 20 	jmp	0x400e	; 0x400e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 23 20 	jmp	0x4046	; 0x4046 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 13 20 	jmp	0x4026	; 0x4026 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2f 20 	jmp	0x405e	; 0x405e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 13 20 	jmp	0x4026	; 0x4026 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2f 20 	jmp	0x405e	; 0x405e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 07 20 	jmp	0x400e	; 0x400e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 23 20 	jmp	0x4046	; 0x4046 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 13 20 	jmp	0x4026	; 0x4026 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2f 20 	jmp	0x405e	; 0x405e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 13 20 	jmp	0x4026	; 0x4026 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2f 20 	jmp	0x405e	; 0x405e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 13 20 	jmp	0x4026	; 0x4026 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2f 20 	jmp	0x405e	; 0x405e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 17 20 	jmp	0x402e	; 0x402e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 33 20 	jmp	0x4066	; 0x4066 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 0f 20 	jmp	0x401e	; 0x401e <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 2b 20 	jmp	0x4056	; 0x4056 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <DIO_init>:


/*- APIs IMPLEMENTATION ------------------------------------*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	29 97       	sbiw	r28, 0x09	; 9
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	9d 83       	std	Y+5, r25	; 0x05
     cec:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t au8_Ret = E_OK;
     cee:	1b 82       	std	Y+3, r1	; 0x03
	/* A local pointer to register in which the required register address will be stored */
	uint8_t* pau8_gpioDirectionPointer = NULL;
     cf0:	1a 82       	std	Y+2, r1	; 0x02
     cf2:	19 82       	std	Y+1, r1	; 0x01

	/* A switch case to determine which Port to change its direction */
	switch(DIO_info->GPIO)
     cf4:	ec 81       	ldd	r30, Y+4	; 0x04
     cf6:	fd 81       	ldd	r31, Y+5	; 0x05
     cf8:	80 81       	ld	r24, Z
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	39 87       	std	Y+9, r19	; 0x09
     d00:	28 87       	std	Y+8, r18	; 0x08
     d02:	88 85       	ldd	r24, Y+8	; 0x08
     d04:	99 85       	ldd	r25, Y+9	; 0x09
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	91 05       	cpc	r25, r1
     d0a:	d1 f0       	breq	.+52     	; 0xd40 <DIO_init+0x6a>
     d0c:	28 85       	ldd	r18, Y+8	; 0x08
     d0e:	39 85       	ldd	r19, Y+9	; 0x09
     d10:	22 30       	cpi	r18, 0x02	; 2
     d12:	31 05       	cpc	r19, r1
     d14:	2c f4       	brge	.+10     	; 0xd20 <DIO_init+0x4a>
     d16:	88 85       	ldd	r24, Y+8	; 0x08
     d18:	99 85       	ldd	r25, Y+9	; 0x09
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	61 f0       	breq	.+24     	; 0xd36 <DIO_init+0x60>
     d1e:	1f c0       	rjmp	.+62     	; 0xd5e <DIO_init+0x88>
     d20:	28 85       	ldd	r18, Y+8	; 0x08
     d22:	39 85       	ldd	r19, Y+9	; 0x09
     d24:	22 30       	cpi	r18, 0x02	; 2
     d26:	31 05       	cpc	r19, r1
     d28:	81 f0       	breq	.+32     	; 0xd4a <DIO_init+0x74>
     d2a:	88 85       	ldd	r24, Y+8	; 0x08
     d2c:	99 85       	ldd	r25, Y+9	; 0x09
     d2e:	83 30       	cpi	r24, 0x03	; 3
     d30:	91 05       	cpc	r25, r1
     d32:	81 f0       	breq	.+32     	; 0xd54 <DIO_init+0x7e>
     d34:	14 c0       	rjmp	.+40     	; 0xd5e <DIO_init+0x88>
	{
	case GPIOA:
		pau8_gpioDirectionPointer = (uint8_t*)(&PORTA_DIR);
     d36:	8a e3       	ldi	r24, 0x3A	; 58
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	9a 83       	std	Y+2, r25	; 0x02
     d3c:	89 83       	std	Y+1, r24	; 0x01
     d3e:	11 c0       	rjmp	.+34     	; 0xd62 <DIO_init+0x8c>
		break;
	case GPIOB:
		pau8_gpioDirectionPointer = (uint8_t*)(&PORTB_DIR);
     d40:	87 e3       	ldi	r24, 0x37	; 55
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	9a 83       	std	Y+2, r25	; 0x02
     d46:	89 83       	std	Y+1, r24	; 0x01
     d48:	0c c0       	rjmp	.+24     	; 0xd62 <DIO_init+0x8c>
		break;
	case GPIOC:
		pau8_gpioDirectionPointer = (uint8_t*)(&PORTC_DIR);
     d4a:	84 e3       	ldi	r24, 0x34	; 52
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	9a 83       	std	Y+2, r25	; 0x02
     d50:	89 83       	std	Y+1, r24	; 0x01
     d52:	07 c0       	rjmp	.+14     	; 0xd62 <DIO_init+0x8c>
		break;
	case GPIOD:
		pau8_gpioDirectionPointer = (uint8_t*)(&PORTD_DIR);
     d54:	81 e3       	ldi	r24, 0x31	; 49
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	9a 83       	std	Y+2, r25	; 0x02
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <DIO_init+0x8c>
		break;
	default:
		au8_Ret = E_NOK;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}

	/* A switch case to determine which direction to be configured in the port */
	switch(DIO_info->dir)
     d62:	ec 81       	ldd	r30, Y+4	; 0x04
     d64:	fd 81       	ldd	r31, Y+5	; 0x05
     d66:	82 81       	ldd	r24, Z+2	; 0x02
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	3f 83       	std	Y+7, r19	; 0x07
     d6e:	2e 83       	std	Y+6, r18	; 0x06
     d70:	8e 81       	ldd	r24, Y+6	; 0x06
     d72:	9f 81       	ldd	r25, Y+7	; 0x07
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	31 f0       	breq	.+12     	; 0xd84 <DIO_init+0xae>
     d78:	2e 81       	ldd	r18, Y+6	; 0x06
     d7a:	3f 81       	ldd	r19, Y+7	; 0x07
     d7c:	2f 3f       	cpi	r18, 0xFF	; 255
     d7e:	31 05       	cpc	r19, r1
     d80:	71 f0       	breq	.+28     	; 0xd9e <DIO_init+0xc8>
     d82:	18 c0       	rjmp	.+48     	; 0xdb4 <DIO_init+0xde>
	{
	case INPUT:
		*pau8_gpioDirectionPointer &= ~(DIO_info->pins);
     d84:	e9 81       	ldd	r30, Y+1	; 0x01
     d86:	fa 81       	ldd	r31, Y+2	; 0x02
     d88:	80 81       	ld	r24, Z
     d8a:	98 2f       	mov	r25, r24
     d8c:	ec 81       	ldd	r30, Y+4	; 0x04
     d8e:	fd 81       	ldd	r31, Y+5	; 0x05
     d90:	81 81       	ldd	r24, Z+1	; 0x01
     d92:	80 95       	com	r24
     d94:	89 23       	and	r24, r25
     d96:	e9 81       	ldd	r30, Y+1	; 0x01
     d98:	fa 81       	ldd	r31, Y+2	; 0x02
     d9a:	80 83       	st	Z, r24
     d9c:	0d c0       	rjmp	.+26     	; 0xdb8 <DIO_init+0xe2>
		break;
	case OUTPUT:
		*pau8_gpioDirectionPointer |= (DIO_info->pins);
     d9e:	e9 81       	ldd	r30, Y+1	; 0x01
     da0:	fa 81       	ldd	r31, Y+2	; 0x02
     da2:	90 81       	ld	r25, Z
     da4:	ec 81       	ldd	r30, Y+4	; 0x04
     da6:	fd 81       	ldd	r31, Y+5	; 0x05
     da8:	81 81       	ldd	r24, Z+1	; 0x01
     daa:	89 2b       	or	r24, r25
     dac:	e9 81       	ldd	r30, Y+1	; 0x01
     dae:	fa 81       	ldd	r31, Y+2	; 0x02
     db0:	80 83       	st	Z, r24
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <DIO_init+0xe2>
		break;
	default:
		au8_Ret = E_NOK;
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}

	return au8_Ret;
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
}
     dba:	29 96       	adiw	r28, 0x09	; 9
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	cf 91       	pop	r28
     dc8:	df 91       	pop	r29
     dca:	08 95       	ret

00000dcc <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	2a 97       	sbiw	r28, 0x0a	; 10
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	cd bf       	out	0x3d, r28	; 61
     de0:	8c 83       	std	Y+4, r24	; 0x04
     de2:	6d 83       	std	Y+5, r22	; 0x05
     de4:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t au8_Ret = E_OK;
     de6:	1b 82       	std	Y+3, r1	; 0x03
	/* A pointer to register in which the required register address will be stored */
	uint8_t* pau8_gpioDataPointer = NULL;
     de8:	1a 82       	std	Y+2, r1	; 0x02
     dea:	19 82       	std	Y+1, r1	; 0x01

	/* A switch case to determine which Port to change its data */
	switch(GPIO)
     dec:	8c 81       	ldd	r24, Y+4	; 0x04
     dee:	28 2f       	mov	r18, r24
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	3a 87       	std	Y+10, r19	; 0x0a
     df4:	29 87       	std	Y+9, r18	; 0x09
     df6:	89 85       	ldd	r24, Y+9	; 0x09
     df8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	91 05       	cpc	r25, r1
     dfe:	d1 f0       	breq	.+52     	; 0xe34 <DIO_Write+0x68>
     e00:	29 85       	ldd	r18, Y+9	; 0x09
     e02:	3a 85       	ldd	r19, Y+10	; 0x0a
     e04:	22 30       	cpi	r18, 0x02	; 2
     e06:	31 05       	cpc	r19, r1
     e08:	2c f4       	brge	.+10     	; 0xe14 <DIO_Write+0x48>
     e0a:	89 85       	ldd	r24, Y+9	; 0x09
     e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	61 f0       	breq	.+24     	; 0xe2a <DIO_Write+0x5e>
     e12:	1f c0       	rjmp	.+62     	; 0xe52 <DIO_Write+0x86>
     e14:	29 85       	ldd	r18, Y+9	; 0x09
     e16:	3a 85       	ldd	r19, Y+10	; 0x0a
     e18:	22 30       	cpi	r18, 0x02	; 2
     e1a:	31 05       	cpc	r19, r1
     e1c:	81 f0       	breq	.+32     	; 0xe3e <DIO_Write+0x72>
     e1e:	89 85       	ldd	r24, Y+9	; 0x09
     e20:	9a 85       	ldd	r25, Y+10	; 0x0a
     e22:	83 30       	cpi	r24, 0x03	; 3
     e24:	91 05       	cpc	r25, r1
     e26:	81 f0       	breq	.+32     	; 0xe48 <DIO_Write+0x7c>
     e28:	14 c0       	rjmp	.+40     	; 0xe52 <DIO_Write+0x86>
	{
	case GPIOA:
		pau8_gpioDataPointer = (uint8_t*)(&PORTA_DATA);
     e2a:	8b e3       	ldi	r24, 0x3B	; 59
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	9a 83       	std	Y+2, r25	; 0x02
     e30:	89 83       	std	Y+1, r24	; 0x01
     e32:	11 c0       	rjmp	.+34     	; 0xe56 <DIO_Write+0x8a>
		break;
	case GPIOB:
		pau8_gpioDataPointer = (uint8_t*)(&PORTB_DATA);
     e34:	88 e3       	ldi	r24, 0x38	; 56
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	0c c0       	rjmp	.+24     	; 0xe56 <DIO_Write+0x8a>
		break;
	case GPIOC:
		pau8_gpioDataPointer = (uint8_t*)(&PORTC_DATA);
     e3e:	85 e3       	ldi	r24, 0x35	; 53
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	9a 83       	std	Y+2, r25	; 0x02
     e44:	89 83       	std	Y+1, r24	; 0x01
     e46:	07 c0       	rjmp	.+14     	; 0xe56 <DIO_Write+0x8a>
		break;
	case GPIOD:
		pau8_gpioDataPointer = (uint8_t*)(&PORTD_DATA);
     e48:	82 e3       	ldi	r24, 0x32	; 50
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9a 83       	std	Y+2, r25	; 0x02
     e4e:	89 83       	std	Y+1, r24	; 0x01
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <DIO_Write+0x8a>
		break;
	default:
		au8_Ret = E_NOK;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}

	/* A switch case to determine which value to be configured in the port */
	switch(value)
     e56:	8e 81       	ldd	r24, Y+6	; 0x06
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	38 87       	std	Y+8, r19	; 0x08
     e5e:	2f 83       	std	Y+7, r18	; 0x07
     e60:	8f 81       	ldd	r24, Y+7	; 0x07
     e62:	98 85       	ldd	r25, Y+8	; 0x08
     e64:	00 97       	sbiw	r24, 0x00	; 0
     e66:	31 f0       	breq	.+12     	; 0xe74 <DIO_Write+0xa8>
     e68:	2f 81       	ldd	r18, Y+7	; 0x07
     e6a:	38 85       	ldd	r19, Y+8	; 0x08
     e6c:	2f 3f       	cpi	r18, 0xFF	; 255
     e6e:	31 05       	cpc	r19, r1
     e70:	61 f0       	breq	.+24     	; 0xe8a <DIO_Write+0xbe>
     e72:	14 c0       	rjmp	.+40     	; 0xe9c <DIO_Write+0xd0>
	{
	case LOW:
		*pau8_gpioDataPointer &= ~(pins);
     e74:	e9 81       	ldd	r30, Y+1	; 0x01
     e76:	fa 81       	ldd	r31, Y+2	; 0x02
     e78:	80 81       	ld	r24, Z
     e7a:	98 2f       	mov	r25, r24
     e7c:	8d 81       	ldd	r24, Y+5	; 0x05
     e7e:	80 95       	com	r24
     e80:	89 23       	and	r24, r25
     e82:	e9 81       	ldd	r30, Y+1	; 0x01
     e84:	fa 81       	ldd	r31, Y+2	; 0x02
     e86:	80 83       	st	Z, r24
     e88:	0b c0       	rjmp	.+22     	; 0xea0 <DIO_Write+0xd4>
		break;
	case HIGH:
		*pau8_gpioDataPointer |= (pins);
     e8a:	e9 81       	ldd	r30, Y+1	; 0x01
     e8c:	fa 81       	ldd	r31, Y+2	; 0x02
     e8e:	90 81       	ld	r25, Z
     e90:	8d 81       	ldd	r24, Y+5	; 0x05
     e92:	89 2b       	or	r24, r25
     e94:	e9 81       	ldd	r30, Y+1	; 0x01
     e96:	fa 81       	ldd	r31, Y+2	; 0x02
     e98:	80 83       	st	Z, r24
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <DIO_Write+0xd4>
		break;
	default:
		au8_Ret = E_NOK;
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}

	return au8_Ret;
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
}
     ea2:	2a 96       	adiw	r28, 0x0a	; 10
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <DIO_Read>:

ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t* data)
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	27 97       	sbiw	r28, 0x07	; 7
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	8a 83       	std	Y+2, r24	; 0x02
     eca:	6b 83       	std	Y+3, r22	; 0x03
     ecc:	5d 83       	std	Y+5, r21	; 0x05
     ece:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t au8_Ret = E_OK;
     ed0:	19 82       	std	Y+1, r1	; 0x01

	/* A switch case to determine which port will be read from */
	switch(GPIO)
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	3f 83       	std	Y+7, r19	; 0x07
     eda:	2e 83       	std	Y+6, r18	; 0x06
     edc:	8e 81       	ldd	r24, Y+6	; 0x06
     ede:	9f 81       	ldd	r25, Y+7	; 0x07
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	91 05       	cpc	r25, r1
     ee4:	f1 f0       	breq	.+60     	; 0xf22 <DIO_Read+0x6e>
     ee6:	2e 81       	ldd	r18, Y+6	; 0x06
     ee8:	3f 81       	ldd	r19, Y+7	; 0x07
     eea:	22 30       	cpi	r18, 0x02	; 2
     eec:	31 05       	cpc	r19, r1
     eee:	2c f4       	brge	.+10     	; 0xefa <DIO_Read+0x46>
     ef0:	8e 81       	ldd	r24, Y+6	; 0x06
     ef2:	9f 81       	ldd	r25, Y+7	; 0x07
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	61 f0       	breq	.+24     	; 0xf10 <DIO_Read+0x5c>
     ef8:	2f c0       	rjmp	.+94     	; 0xf58 <DIO_Read+0xa4>
     efa:	2e 81       	ldd	r18, Y+6	; 0x06
     efc:	3f 81       	ldd	r19, Y+7	; 0x07
     efe:	22 30       	cpi	r18, 0x02	; 2
     f00:	31 05       	cpc	r19, r1
     f02:	c1 f0       	breq	.+48     	; 0xf34 <DIO_Read+0x80>
     f04:	8e 81       	ldd	r24, Y+6	; 0x06
     f06:	9f 81       	ldd	r25, Y+7	; 0x07
     f08:	83 30       	cpi	r24, 0x03	; 3
     f0a:	91 05       	cpc	r25, r1
     f0c:	e1 f0       	breq	.+56     	; 0xf46 <DIO_Read+0x92>
     f0e:	24 c0       	rjmp	.+72     	; 0xf58 <DIO_Read+0xa4>
	{
	case GPIOA:
		*data = PORTA_PIN & pins;
     f10:	e9 e3       	ldi	r30, 0x39	; 57
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	90 81       	ld	r25, Z
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	89 23       	and	r24, r25
     f1a:	ec 81       	ldd	r30, Y+4	; 0x04
     f1c:	fd 81       	ldd	r31, Y+5	; 0x05
     f1e:	80 83       	st	Z, r24
     f20:	1d c0       	rjmp	.+58     	; 0xf5c <DIO_Read+0xa8>
		break;
	case GPIOB:
		*data = PORTB_PIN & pins;
     f22:	e6 e3       	ldi	r30, 0x36	; 54
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	90 81       	ld	r25, Z
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	89 23       	and	r24, r25
     f2c:	ec 81       	ldd	r30, Y+4	; 0x04
     f2e:	fd 81       	ldd	r31, Y+5	; 0x05
     f30:	80 83       	st	Z, r24
     f32:	14 c0       	rjmp	.+40     	; 0xf5c <DIO_Read+0xa8>
		break;
	case GPIOC:
		*data = PORTC_PIN & pins;
     f34:	e3 e3       	ldi	r30, 0x33	; 51
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	90 81       	ld	r25, Z
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	89 23       	and	r24, r25
     f3e:	ec 81       	ldd	r30, Y+4	; 0x04
     f40:	fd 81       	ldd	r31, Y+5	; 0x05
     f42:	80 83       	st	Z, r24
     f44:	0b c0       	rjmp	.+22     	; 0xf5c <DIO_Read+0xa8>
		break;
	case GPIOD:
		*data = PORTD_PIN & pins;
     f46:	e0 e3       	ldi	r30, 0x30	; 48
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	90 81       	ld	r25, Z
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	89 23       	and	r24, r25
     f50:	ec 81       	ldd	r30, Y+4	; 0x04
     f52:	fd 81       	ldd	r31, Y+5	; 0x05
     f54:	80 83       	st	Z, r24
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO_Read+0xa8>
		break;
	default:
		au8_Ret = E_NOK;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_Ret;
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f5e:	27 96       	adiw	r28, 0x07	; 7
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <DIO_Toggle>:

ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	00 d0       	rcall	.+0      	; 0xf76 <DIO_Toggle+0x6>
     f76:	00 d0       	rcall	.+0      	; 0xf78 <DIO_Toggle+0x8>
     f78:	0f 92       	push	r0
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	8a 83       	std	Y+2, r24	; 0x02
     f80:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_Ret = E_OK;
     f82:	19 82       	std	Y+1, r1	; 0x01

	/* A switch case to determine which port value to be toggled */
	switch(GPIO)
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	3d 83       	std	Y+5, r19	; 0x05
     f8c:	2c 83       	std	Y+4, r18	; 0x04
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	9d 81       	ldd	r25, Y+5	; 0x05
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	91 05       	cpc	r25, r1
     f96:	f1 f0       	breq	.+60     	; 0xfd4 <DIO_Toggle+0x64>
     f98:	2c 81       	ldd	r18, Y+4	; 0x04
     f9a:	3d 81       	ldd	r19, Y+5	; 0x05
     f9c:	22 30       	cpi	r18, 0x02	; 2
     f9e:	31 05       	cpc	r19, r1
     fa0:	2c f4       	brge	.+10     	; 0xfac <DIO_Toggle+0x3c>
     fa2:	8c 81       	ldd	r24, Y+4	; 0x04
     fa4:	9d 81       	ldd	r25, Y+5	; 0x05
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	61 f0       	breq	.+24     	; 0xfc2 <DIO_Toggle+0x52>
     faa:	2f c0       	rjmp	.+94     	; 0x100a <DIO_Toggle+0x9a>
     fac:	2c 81       	ldd	r18, Y+4	; 0x04
     fae:	3d 81       	ldd	r19, Y+5	; 0x05
     fb0:	22 30       	cpi	r18, 0x02	; 2
     fb2:	31 05       	cpc	r19, r1
     fb4:	c1 f0       	breq	.+48     	; 0xfe6 <DIO_Toggle+0x76>
     fb6:	8c 81       	ldd	r24, Y+4	; 0x04
     fb8:	9d 81       	ldd	r25, Y+5	; 0x05
     fba:	83 30       	cpi	r24, 0x03	; 3
     fbc:	91 05       	cpc	r25, r1
     fbe:	e1 f0       	breq	.+56     	; 0xff8 <DIO_Toggle+0x88>
     fc0:	24 c0       	rjmp	.+72     	; 0x100a <DIO_Toggle+0x9a>
	{
	case GPIOA:
		PORTA_DATA ^= pins;
     fc2:	ab e3       	ldi	r26, 0x3B	; 59
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	eb e3       	ldi	r30, 0x3B	; 59
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	90 81       	ld	r25, Z
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	89 27       	eor	r24, r25
     fd0:	8c 93       	st	X, r24
     fd2:	1d c0       	rjmp	.+58     	; 0x100e <DIO_Toggle+0x9e>
		break;
	case GPIOB:
		PORTB_DATA ^= pins;
     fd4:	a8 e3       	ldi	r26, 0x38	; 56
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e8 e3       	ldi	r30, 0x38	; 56
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	90 81       	ld	r25, Z
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	89 27       	eor	r24, r25
     fe2:	8c 93       	st	X, r24
     fe4:	14 c0       	rjmp	.+40     	; 0x100e <DIO_Toggle+0x9e>
		break;
	case GPIOC:
		PORTC_DATA ^= pins;
     fe6:	a5 e3       	ldi	r26, 0x35	; 53
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e5 e3       	ldi	r30, 0x35	; 53
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	90 81       	ld	r25, Z
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	89 27       	eor	r24, r25
     ff4:	8c 93       	st	X, r24
     ff6:	0b c0       	rjmp	.+22     	; 0x100e <DIO_Toggle+0x9e>
		break;
	case GPIOD:
		PORTD_DATA ^= pins;
     ff8:	a2 e3       	ldi	r26, 0x32	; 50
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e2 e3       	ldi	r30, 0x32	; 50
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	90 81       	ld	r25, Z
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	89 27       	eor	r24, r25
    1006:	8c 93       	st	X, r24
    1008:	02 c0       	rjmp	.+4      	; 0x100e <DIO_Toggle+0x9e>
		break;
	default:
		au8_Ret = E_NOK;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	89 83       	std	Y+1, r24	; 0x01
	}

	return au8_Ret;
    100e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <Icu_Init>:


/*- APIs IMPLEMENTATION ------------------------------------*/

ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	00 d0       	rcall	.+0      	; 0x1026 <Icu_Init+0x6>
    1026:	0f 92       	push	r0
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	9b 83       	std	Y+3, r25	; 0x03
    102e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t au8_Ret = E_OK;
    1030:	19 82       	std	Y+1, r1	; 0x01

	/* Configure pin2 of portB as an input pin and activate the internal pull-up resistor option */
	PORTB_DIR &= ~BIT2;
    1032:	a7 e3       	ldi	r26, 0x37	; 55
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e7 e3       	ldi	r30, 0x37	; 55
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	8b 7f       	andi	r24, 0xFB	; 251
    103e:	8c 93       	st	X, r24
	PORTB_DATA |= BIT2;
    1040:	a8 e3       	ldi	r26, 0x38	; 56
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e8 e3       	ldi	r30, 0x38	; 56
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	84 60       	ori	r24, 0x04	; 4
    104c:	8c 93       	st	X, r24

	switch(Icu_Cfg->ICU_Ch_Timer)
    104e:	ea 81       	ldd	r30, Y+2	; 0x02
    1050:	fb 81       	ldd	r31, Y+3	; 0x03
    1052:	81 81       	ldd	r24, Z+1	; 0x01
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	82 30       	cpi	r24, 0x02	; 2
    105a:	91 05       	cpc	r25, r1
    105c:	e9 f4       	brne	.+58     	; 0x1098 <Icu_Init+0x78>
	{
	case ICU_TIMER_CH2:
		/* Non-PWM mode */
		SET_BIT(TCCR2_R, FOC2);
    105e:	a5 e4       	ldi	r26, 0x45	; 69
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e5 e4       	ldi	r30, 0x45	; 69
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	80 68       	ori	r24, 0x80	; 128
    106a:	8c 93       	st	X, r24

		/* Normal mode */
		CLEAR_BIT(TCCR2_R, WGM20);
    106c:	a5 e4       	ldi	r26, 0x45	; 69
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e5 e4       	ldi	r30, 0x45	; 69
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8f 7b       	andi	r24, 0xBF	; 191
    1078:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2_R, WGM21);
    107a:	a5 e4       	ldi	r26, 0x45	; 69
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e5 e4       	ldi	r30, 0x45	; 69
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	87 7f       	andi	r24, 0xF7	; 247
    1086:	8c 93       	st	X, r24

		/* Choose the prescaler of 1024 */
		TCCR2_R = (TCCR2_R & TIMER_PRESCALER_MASK) | TIMER2_1024_PRESCALER;
    1088:	a5 e4       	ldi	r26, 0x45	; 69
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e5 e4       	ldi	r30, 0x45	; 69
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	87 60       	ori	r24, 0x07	; 7
    1094:	8c 93       	st	X, r24
    1096:	02 c0       	rjmp	.+4      	; 0x109c <Icu_Init+0x7c>

		break;
	default:
		au8_Ret = E_NOK;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return au8_Ret;
    109c:	89 81       	ldd	r24, Y+1	; 0x01
}
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <Icu_ReadTime>:

ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel, uint8_t Icu_EdgeToEdge, uint32_t* Icu_Time)
{
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	27 97       	sbiw	r28, 0x07	; 7
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	8a 83       	std	Y+2, r24	; 0x02
    10c0:	6b 83       	std	Y+3, r22	; 0x03
    10c2:	5d 83       	std	Y+5, r21	; 0x05
    10c4:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t au8_Ret = E_OK;
    10c6:	19 82       	std	Y+1, r1	; 0x01

	/* A switch case to determine the edge detection mode */
	switch(Icu_EdgeToEdge)
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	3f 83       	std	Y+7, r19	; 0x07
    10d0:	2e 83       	std	Y+6, r18	; 0x06
    10d2:	8e 81       	ldd	r24, Y+6	; 0x06
    10d4:	9f 81       	ldd	r25, Y+7	; 0x07
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	91 05       	cpc	r25, r1
    10da:	b9 f1       	breq	.+110    	; 0x114a <Icu_ReadTime+0xa0>
    10dc:	2e 81       	ldd	r18, Y+6	; 0x06
    10de:	3f 81       	ldd	r19, Y+7	; 0x07
    10e0:	22 30       	cpi	r18, 0x02	; 2
    10e2:	31 05       	cpc	r19, r1
    10e4:	31 f0       	breq	.+12     	; 0x10f2 <Icu_ReadTime+0x48>
    10e6:	8e 81       	ldd	r24, Y+6	; 0x06
    10e8:	9f 81       	ldd	r25, Y+7	; 0x07
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <Icu_ReadTime+0x46>
    10ee:	59 c0       	rjmp	.+178    	; 0x11a2 <Icu_ReadTime+0xf8>
    10f0:	8d c0       	rjmp	.+282    	; 0x120c <Icu_ReadTime+0x162>
	{
	case ICU_FALL_TO_RISE:
		/* A busy-wait until the rising edge is met */
		while(!(PORTB_PIN & BIT2));
    10f2:	e6 e3       	ldi	r30, 0x36	; 54
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	88 2f       	mov	r24, r24
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	84 70       	andi	r24, 0x04	; 4
    10fe:	90 70       	andi	r25, 0x00	; 0
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	b9 f3       	breq	.-18     	; 0x10f2 <Icu_ReadTime+0x48>
		/* A busy-wait until the falling edge is met */
		while(PORTB_PIN & BIT2);
    1104:	e6 e3       	ldi	r30, 0x36	; 54
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	84 70       	andi	r24, 0x04	; 4
    1110:	90 70       	andi	r25, 0x00	; 0
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	b9 f7       	brne	.-18     	; 0x1104 <Icu_ReadTime+0x5a>
		TCNT2_R = 0;
    1116:	e4 e4       	ldi	r30, 0x44	; 68
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	10 82       	st	Z, r1
		/* A busy-wait until the rising edge is met */
		while(!(PORTB_PIN & BIT2));
    111c:	e6 e3       	ldi	r30, 0x36	; 54
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	88 2f       	mov	r24, r24
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	84 70       	andi	r24, 0x04	; 4
    1128:	90 70       	andi	r25, 0x00	; 0
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	b9 f3       	breq	.-18     	; 0x111c <Icu_ReadTime+0x72>
		*Icu_Time = TCNT2_R;
    112e:	e4 e4       	ldi	r30, 0x44	; 68
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	a0 e0       	ldi	r26, 0x00	; 0
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	ec 81       	ldd	r30, Y+4	; 0x04
    113e:	fd 81       	ldd	r31, Y+5	; 0x05
    1140:	80 83       	st	Z, r24
    1142:	91 83       	std	Z+1, r25	; 0x01
    1144:	a2 83       	std	Z+2, r26	; 0x02
    1146:	b3 83       	std	Z+3, r27	; 0x03
    1148:	63 c0       	rjmp	.+198    	; 0x1210 <Icu_ReadTime+0x166>
		break;
	case ICU_RISE_TO_FALL:
		/* A busy-wait until the falling edge is met */
		while(PORTB_PIN & BIT2);
    114a:	e6 e3       	ldi	r30, 0x36	; 54
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	88 2f       	mov	r24, r24
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	84 70       	andi	r24, 0x04	; 4
    1156:	90 70       	andi	r25, 0x00	; 0
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	b9 f7       	brne	.-18     	; 0x114a <Icu_ReadTime+0xa0>
		/* A busy-wait until the rising edge is met */
		while(!(PORTB_PIN & BIT2));
    115c:	e6 e3       	ldi	r30, 0x36	; 54
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	88 2f       	mov	r24, r24
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	84 70       	andi	r24, 0x04	; 4
    1168:	90 70       	andi	r25, 0x00	; 0
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	b9 f3       	breq	.-18     	; 0x115c <Icu_ReadTime+0xb2>
		TCNT2_R = 0;
    116e:	e4 e4       	ldi	r30, 0x44	; 68
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	10 82       	st	Z, r1
		/* A busy-wait until the falling edge is met */
		while(PORTB_PIN & BIT2);
    1174:	e6 e3       	ldi	r30, 0x36	; 54
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	84 70       	andi	r24, 0x04	; 4
    1180:	90 70       	andi	r25, 0x00	; 0
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	b9 f7       	brne	.-18     	; 0x1174 <Icu_ReadTime+0xca>
		*Icu_Time = TCNT2_R;
    1186:	e4 e4       	ldi	r30, 0x44	; 68
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	88 2f       	mov	r24, r24
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	a0 e0       	ldi	r26, 0x00	; 0
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	ec 81       	ldd	r30, Y+4	; 0x04
    1196:	fd 81       	ldd	r31, Y+5	; 0x05
    1198:	80 83       	st	Z, r24
    119a:	91 83       	std	Z+1, r25	; 0x01
    119c:	a2 83       	std	Z+2, r26	; 0x02
    119e:	b3 83       	std	Z+3, r27	; 0x03
    11a0:	37 c0       	rjmp	.+110    	; 0x1210 <Icu_ReadTime+0x166>
		break;
	case ICU_RISE_TO_RISE:
		/* A busy-wait until the falling edge is met */
		while(PORTB_PIN & BIT2);
    11a2:	e6 e3       	ldi	r30, 0x36	; 54
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	84 70       	andi	r24, 0x04	; 4
    11ae:	90 70       	andi	r25, 0x00	; 0
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	b9 f7       	brne	.-18     	; 0x11a2 <Icu_ReadTime+0xf8>
		/* A busy-wait until the rising edge is met */
		while(!(PORTB_PIN & BIT2));
    11b4:	e6 e3       	ldi	r30, 0x36	; 54
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	88 2f       	mov	r24, r24
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	84 70       	andi	r24, 0x04	; 4
    11c0:	90 70       	andi	r25, 0x00	; 0
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	b9 f3       	breq	.-18     	; 0x11b4 <Icu_ReadTime+0x10a>
		TCNT2_R = 0;
    11c6:	e4 e4       	ldi	r30, 0x44	; 68
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	10 82       	st	Z, r1
		/* A busy-wait until the falling edge is met */
		while(PORTB_PIN & BIT2);
    11cc:	e6 e3       	ldi	r30, 0x36	; 54
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	88 2f       	mov	r24, r24
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	84 70       	andi	r24, 0x04	; 4
    11d8:	90 70       	andi	r25, 0x00	; 0
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	b9 f7       	brne	.-18     	; 0x11cc <Icu_ReadTime+0x122>
		/* A busy-wait until the rising edge is met */
		while(!(PORTB_PIN & BIT2));
    11de:	e6 e3       	ldi	r30, 0x36	; 54
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	88 2f       	mov	r24, r24
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	84 70       	andi	r24, 0x04	; 4
    11ea:	90 70       	andi	r25, 0x00	; 0
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	b9 f3       	breq	.-18     	; 0x11de <Icu_ReadTime+0x134>
		*Icu_Time = TCNT2_R;
    11f0:	e4 e4       	ldi	r30, 0x44	; 68
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	a0 e0       	ldi	r26, 0x00	; 0
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	ec 81       	ldd	r30, Y+4	; 0x04
    1200:	fd 81       	ldd	r31, Y+5	; 0x05
    1202:	80 83       	st	Z, r24
    1204:	91 83       	std	Z+1, r25	; 0x01
    1206:	a2 83       	std	Z+2, r26	; 0x02
    1208:	b3 83       	std	Z+3, r27	; 0x03
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <Icu_ReadTime+0x166>
		break;
	default:
		au8_Ret = E_NOK;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_Ret;
    1210:	89 81       	ldd	r24, Y+1	; 0x01
}
    1212:	27 96       	adiw	r28, 0x07	; 7
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <Pwm_Init>:


/*- APIs IMPLEMENTATION ------------------------------------*/

ERROR_STATUS Pwm_Init(Pwm_Cfg_s *Pwm_Cfg)
{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	00 d0       	rcall	.+0      	; 0x122a <Pwm_Init+0x6>
    122a:	00 d0       	rcall	.+0      	; 0x122c <Pwm_Init+0x8>
    122c:	0f 92       	push	r0
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	9b 83       	std	Y+3, r25	; 0x03
    1234:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t au8_Ret = E_OK;
    1236:	19 82       	std	Y+1, r1	; 0x01

	/* PWM mode */
	CLEAR_BIT(TCCR1A_R, FOC1B);
    1238:	af e4       	ldi	r26, 0x4F	; 79
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	ef e4       	ldi	r30, 0x4F	; 79
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	8b 7f       	andi	r24, 0xFB	; 251
    1244:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A_R, FOC1A);
    1246:	af e4       	ldi	r26, 0x4F	; 79
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	ef e4       	ldi	r30, 0x4F	; 79
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	87 7f       	andi	r24, 0xF7	; 247
    1252:	8c 93       	st	X, r24

	/* Fast PWM mode 16-bit timer mode chosen */
	CLEAR_BIT(TCCR1A_R, WGM10);
    1254:	af e4       	ldi	r26, 0x4F	; 79
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	ef e4       	ldi	r30, 0x4F	; 79
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	8e 7f       	andi	r24, 0xFE	; 254
    1260:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_R, WGM11);
    1262:	af e4       	ldi	r26, 0x4F	; 79
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	ef e4       	ldi	r30, 0x4F	; 79
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	82 60       	ori	r24, 0x02	; 2
    126e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_R, WGM12);
    1270:	ae e4       	ldi	r26, 0x4E	; 78
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	ee e4       	ldi	r30, 0x4E	; 78
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	88 60       	ori	r24, 0x08	; 8
    127c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_R, WGM13);
    127e:	ae e4       	ldi	r26, 0x4E	; 78
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	ee e4       	ldi	r30, 0x4E	; 78
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	80 61       	ori	r24, 0x10	; 16
    128a:	8c 93       	st	X, r24

	/* A switch case to determine which channel to be used for PWM operation */
	switch(Pwm_Cfg->Channel)
    128c:	ea 81       	ldd	r30, Y+2	; 0x02
    128e:	fb 81       	ldd	r31, Y+3	; 0x03
    1290:	80 81       	ld	r24, Z
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	3d 83       	std	Y+5, r19	; 0x05
    1298:	2c 83       	std	Y+4, r18	; 0x04
    129a:	8c 81       	ldd	r24, Y+4	; 0x04
    129c:	9d 81       	ldd	r25, Y+5	; 0x05
    129e:	82 30       	cpi	r24, 0x02	; 2
    12a0:	91 05       	cpc	r25, r1
    12a2:	09 f1       	breq	.+66     	; 0x12e6 <Pwm_Init+0xc2>
    12a4:	2c 81       	ldd	r18, Y+4	; 0x04
    12a6:	3d 81       	ldd	r19, Y+5	; 0x05
    12a8:	23 30       	cpi	r18, 0x03	; 3
    12aa:	31 05       	cpc	r19, r1
    12ac:	91 f1       	breq	.+100    	; 0x1312 <Pwm_Init+0xee>
    12ae:	8c 81       	ldd	r24, Y+4	; 0x04
    12b0:	9d 81       	ldd	r25, Y+5	; 0x05
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	91 05       	cpc	r25, r1
    12b6:	09 f0       	breq	.+2      	; 0x12ba <Pwm_Init+0x96>
    12b8:	50 c0       	rjmp	.+160    	; 0x135a <Pwm_Init+0x136>
	{
	case PWM_CH1A:
		SET_BIT(TCCR1A_R, COM1A0);
    12ba:	af e4       	ldi	r26, 0x4F	; 79
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	ef e4       	ldi	r30, 0x4F	; 79
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	80 64       	ori	r24, 0x40	; 64
    12c6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_R, COM1A1);
    12c8:	af e4       	ldi	r26, 0x4F	; 79
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	ef e4       	ldi	r30, 0x4F	; 79
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	80 68       	ori	r24, 0x80	; 128
    12d4:	8c 93       	st	X, r24
		PORTD_DIR |= BIT5;
    12d6:	a1 e3       	ldi	r26, 0x31	; 49
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e1 e3       	ldi	r30, 0x31	; 49
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	80 62       	ori	r24, 0x20	; 32
    12e2:	8c 93       	st	X, r24
    12e4:	3c c0       	rjmp	.+120    	; 0x135e <Pwm_Init+0x13a>
		break;
	case PWM_CH1B:
		SET_BIT(TCCR1A_R, COM1B0);
    12e6:	af e4       	ldi	r26, 0x4F	; 79
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	ef e4       	ldi	r30, 0x4F	; 79
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	80 61       	ori	r24, 0x10	; 16
    12f2:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_R, COM1B1);
    12f4:	af e4       	ldi	r26, 0x4F	; 79
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	ef e4       	ldi	r30, 0x4F	; 79
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	80 62       	ori	r24, 0x20	; 32
    1300:	8c 93       	st	X, r24
		PORTD_DIR |= BIT4;
    1302:	a1 e3       	ldi	r26, 0x31	; 49
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e1 e3       	ldi	r30, 0x31	; 49
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	80 61       	ori	r24, 0x10	; 16
    130e:	8c 93       	st	X, r24
    1310:	26 c0       	rjmp	.+76     	; 0x135e <Pwm_Init+0x13a>
		break;
	case (PWM_CH1A | PWM_CH1B):
	{
		SET_BIT(TCCR1A_R, COM1A0);
    1312:	af e4       	ldi	r26, 0x4F	; 79
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	ef e4       	ldi	r30, 0x4F	; 79
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	80 64       	ori	r24, 0x40	; 64
    131e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_R, COM1A1);
    1320:	af e4       	ldi	r26, 0x4F	; 79
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	ef e4       	ldi	r30, 0x4F	; 79
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	80 68       	ori	r24, 0x80	; 128
    132c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_R, COM1B0);
    132e:	af e4       	ldi	r26, 0x4F	; 79
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	ef e4       	ldi	r30, 0x4F	; 79
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	80 61       	ori	r24, 0x10	; 16
    133a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_R, COM1B1);
    133c:	af e4       	ldi	r26, 0x4F	; 79
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	ef e4       	ldi	r30, 0x4F	; 79
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	80 62       	ori	r24, 0x20	; 32
    1348:	8c 93       	st	X, r24
		PORTD_DIR |= BIT4 | BIT5;
    134a:	a1 e3       	ldi	r26, 0x31	; 49
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e1 e3       	ldi	r30, 0x31	; 49
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	80 63       	ori	r24, 0x30	; 48
    1356:	8c 93       	st	X, r24
    1358:	02 c0       	rjmp	.+4      	; 0x135e <Pwm_Init+0x13a>
		break;
	}
	default:
		au8_Ret = E_NOK;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	/* Zero the timer counter register */
	TCNT1_R = 0;
    135e:	ec e4       	ldi	r30, 0x4C	; 76
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	11 82       	std	Z+1, r1	; 0x01
    1364:	10 82       	st	Z, r1

	return au8_Ret;
    1366:	89 81       	ldd	r24, Y+1	; 0x01
}
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <Pwm_Start>:

ERROR_STATUS Pwm_Start(uint8_t Channel, uint8_t Duty, uint32_t Frequency)
{
    1378:	ef 92       	push	r14
    137a:	ff 92       	push	r15
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	29 97       	sbiw	r28, 0x09	; 9
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	8a 83       	std	Y+2, r24	; 0x02
    1396:	6b 83       	std	Y+3, r22	; 0x03
    1398:	2c 83       	std	Y+4, r18	; 0x04
    139a:	3d 83       	std	Y+5, r19	; 0x05
    139c:	4e 83       	std	Y+6, r20	; 0x06
    139e:	5f 83       	std	Y+7, r21	; 0x07
	uint8_t au8_Ret = E_OK;
    13a0:	19 82       	std	Y+1, r1	; 0x01

	/* An operation to determine the duty cycle according to the used inverting mode */
	Duty = PERCENTAGE - Duty;
    13a2:	94 e6       	ldi	r25, 0x64	; 100
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	29 2f       	mov	r18, r25
    13a8:	28 1b       	sub	r18, r24
    13aa:	82 2f       	mov	r24, r18
    13ac:	8b 83       	std	Y+3, r24	; 0x03

	/* An if condition to determine the prescaler and the ICR register according to the required frequency */
	if(Frequency >= 300)
    13ae:	8c 81       	ldd	r24, Y+4	; 0x04
    13b0:	9d 81       	ldd	r25, Y+5	; 0x05
    13b2:	ae 81       	ldd	r26, Y+6	; 0x06
    13b4:	bf 81       	ldd	r27, Y+7	; 0x07
    13b6:	8c 32       	cpi	r24, 0x2C	; 44
    13b8:	31 e0       	ldi	r19, 0x01	; 1
    13ba:	93 07       	cpc	r25, r19
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	a3 07       	cpc	r26, r19
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	b3 07       	cpc	r27, r19
    13c4:	e0 f0       	brcs	.+56     	; 0x13fe <Pwm_Start+0x86>
	{
		ICR1_R = F_CPU / (TIMER_PRESCALER_NO * Frequency);
    13c6:	06 e4       	ldi	r16, 0x46	; 70
    13c8:	10 e0       	ldi	r17, 0x00	; 0
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	94 e2       	ldi	r25, 0x24	; 36
    13ce:	a4 ef       	ldi	r26, 0xF4	; 244
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	2c 81       	ldd	r18, Y+4	; 0x04
    13d4:	3d 81       	ldd	r19, Y+5	; 0x05
    13d6:	4e 81       	ldd	r20, Y+6	; 0x06
    13d8:	5f 81       	ldd	r21, Y+7	; 0x07
    13da:	bc 01       	movw	r22, r24
    13dc:	cd 01       	movw	r24, r26
    13de:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__udivmodsi4>
    13e2:	da 01       	movw	r26, r20
    13e4:	c9 01       	movw	r24, r18
    13e6:	f8 01       	movw	r30, r16
    13e8:	91 83       	std	Z+1, r25	; 0x01
    13ea:	80 83       	st	Z, r24
		TCCR1B_R = (TCCR1B_R & TIMER_PRESCALER_MASK) | BIT0;
    13ec:	ae e4       	ldi	r26, 0x4E	; 78
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	ee e4       	ldi	r30, 0x4E	; 78
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	88 7f       	andi	r24, 0xF8	; 248
    13f8:	81 60       	ori	r24, 0x01	; 1
    13fa:	8c 93       	st	X, r24
    13fc:	71 c0       	rjmp	.+226    	; 0x14e0 <Pwm_Start+0x168>
	}else if(Frequency >= 40)
    13fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1400:	9d 81       	ldd	r25, Y+5	; 0x05
    1402:	ae 81       	ldd	r26, Y+6	; 0x06
    1404:	bf 81       	ldd	r27, Y+7	; 0x07
    1406:	88 32       	cpi	r24, 0x28	; 40
    1408:	91 05       	cpc	r25, r1
    140a:	a1 05       	cpc	r26, r1
    140c:	b1 05       	cpc	r27, r1
    140e:	50 f1       	brcs	.+84     	; 0x1464 <Pwm_Start+0xec>
	{
		ICR1_R = F_CPU / (TIMER_PRESCALER_8 * Frequency);
    1410:	06 e4       	ldi	r16, 0x46	; 70
    1412:	10 e0       	ldi	r17, 0x00	; 0
    1414:	8c 81       	ldd	r24, Y+4	; 0x04
    1416:	9d 81       	ldd	r25, Y+5	; 0x05
    1418:	ae 81       	ldd	r26, Y+6	; 0x06
    141a:	bf 81       	ldd	r27, Y+7	; 0x07
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	aa 1f       	adc	r26, r26
    1422:	bb 1f       	adc	r27, r27
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	aa 1f       	adc	r26, r26
    142a:	bb 1f       	adc	r27, r27
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	aa 1f       	adc	r26, r26
    1432:	bb 1f       	adc	r27, r27
    1434:	9c 01       	movw	r18, r24
    1436:	ad 01       	movw	r20, r26
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	94 e2       	ldi	r25, 0x24	; 36
    143c:	a4 ef       	ldi	r26, 0xF4	; 244
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	bc 01       	movw	r22, r24
    1442:	cd 01       	movw	r24, r26
    1444:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__udivmodsi4>
    1448:	da 01       	movw	r26, r20
    144a:	c9 01       	movw	r24, r18
    144c:	f8 01       	movw	r30, r16
    144e:	91 83       	std	Z+1, r25	; 0x01
    1450:	80 83       	st	Z, r24
		TCCR1B_R = (TCCR1B_R & TIMER_PRESCALER_MASK) | BIT1;
    1452:	ae e4       	ldi	r26, 0x4E	; 78
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	ee e4       	ldi	r30, 0x4E	; 78
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	88 7f       	andi	r24, 0xF8	; 248
    145e:	82 60       	ori	r24, 0x02	; 2
    1460:	8c 93       	st	X, r24
    1462:	3e c0       	rjmp	.+124    	; 0x14e0 <Pwm_Start+0x168>
	}else if(Frequency >= 4)
    1464:	8c 81       	ldd	r24, Y+4	; 0x04
    1466:	9d 81       	ldd	r25, Y+5	; 0x05
    1468:	ae 81       	ldd	r26, Y+6	; 0x06
    146a:	bf 81       	ldd	r27, Y+7	; 0x07
    146c:	84 30       	cpi	r24, 0x04	; 4
    146e:	91 05       	cpc	r25, r1
    1470:	a1 05       	cpc	r26, r1
    1472:	b1 05       	cpc	r27, r1
    1474:	a8 f1       	brcs	.+106    	; 0x14e0 <Pwm_Start+0x168>
	{
		ICR1_R = F_CPU / (TIMER_PRESCALER_64 * Frequency);
    1476:	06 e4       	ldi	r16, 0x46	; 70
    1478:	10 e0       	ldi	r17, 0x00	; 0
    147a:	8c 81       	ldd	r24, Y+4	; 0x04
    147c:	9d 81       	ldd	r25, Y+5	; 0x05
    147e:	ae 81       	ldd	r26, Y+6	; 0x06
    1480:	bf 81       	ldd	r27, Y+7	; 0x07
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	aa 1f       	adc	r26, r26
    1488:	bb 1f       	adc	r27, r27
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	aa 1f       	adc	r26, r26
    1490:	bb 1f       	adc	r27, r27
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	aa 1f       	adc	r26, r26
    1498:	bb 1f       	adc	r27, r27
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	aa 1f       	adc	r26, r26
    14a0:	bb 1f       	adc	r27, r27
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	aa 1f       	adc	r26, r26
    14a8:	bb 1f       	adc	r27, r27
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	aa 1f       	adc	r26, r26
    14b0:	bb 1f       	adc	r27, r27
    14b2:	9c 01       	movw	r18, r24
    14b4:	ad 01       	movw	r20, r26
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	94 e2       	ldi	r25, 0x24	; 36
    14ba:	a4 ef       	ldi	r26, 0xF4	; 244
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	bc 01       	movw	r22, r24
    14c0:	cd 01       	movw	r24, r26
    14c2:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__udivmodsi4>
    14c6:	da 01       	movw	r26, r20
    14c8:	c9 01       	movw	r24, r18
    14ca:	f8 01       	movw	r30, r16
    14cc:	91 83       	std	Z+1, r25	; 0x01
    14ce:	80 83       	st	Z, r24
		TCCR1B_R = (TCCR1B_R & TIMER_PRESCALER_MASK) | BIT0 | BIT1;
    14d0:	ae e4       	ldi	r26, 0x4E	; 78
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	ee e4       	ldi	r30, 0x4E	; 78
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	88 7f       	andi	r24, 0xF8	; 248
    14dc:	83 60       	ori	r24, 0x03	; 3
    14de:	8c 93       	st	X, r24
	}

	/* A switch case to determine the required channel to produce the PWM signal on */
	switch(Channel)
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	39 87       	std	Y+9, r19	; 0x09
    14e8:	28 87       	std	Y+8, r18	; 0x08
    14ea:	88 85       	ldd	r24, Y+8	; 0x08
    14ec:	99 85       	ldd	r25, Y+9	; 0x09
    14ee:	82 30       	cpi	r24, 0x02	; 2
    14f0:	91 05       	cpc	r25, r1
    14f2:	c1 f1       	breq	.+112    	; 0x1564 <Pwm_Start+0x1ec>
    14f4:	e8 85       	ldd	r30, Y+8	; 0x08
    14f6:	f9 85       	ldd	r31, Y+9	; 0x09
    14f8:	e3 30       	cpi	r30, 0x03	; 3
    14fa:	f1 05       	cpc	r31, r1
    14fc:	09 f4       	brne	.+2      	; 0x1500 <Pwm_Start+0x188>
    14fe:	5e c0       	rjmp	.+188    	; 0x15bc <Pwm_Start+0x244>
    1500:	28 85       	ldd	r18, Y+8	; 0x08
    1502:	39 85       	ldd	r19, Y+9	; 0x09
    1504:	21 30       	cpi	r18, 0x01	; 1
    1506:	31 05       	cpc	r19, r1
    1508:	09 f0       	breq	.+2      	; 0x150c <Pwm_Start+0x194>
    150a:	af c0       	rjmp	.+350    	; 0x166a <Pwm_Start+0x2f2>
	{
	case PWM_CH1A:
		SET_BIT(TCCR1A_R, COM1A0);
    150c:	af e4       	ldi	r26, 0x4F	; 79
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	ef e4       	ldi	r30, 0x4F	; 79
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	80 64       	ori	r24, 0x40	; 64
    1518:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_R, COM1A1);
    151a:	af e4       	ldi	r26, 0x4F	; 79
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	ef e4       	ldi	r30, 0x4F	; 79
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	80 68       	ori	r24, 0x80	; 128
    1526:	8c 93       	st	X, r24
		OCR1A_R = Duty * (ICR1_R / PERCENTAGE);
    1528:	0f 2e       	mov	r0, r31
    152a:	fa e4       	ldi	r31, 0x4A	; 74
    152c:	ef 2e       	mov	r14, r31
    152e:	ff 24       	eor	r15, r15
    1530:	f0 2d       	mov	r31, r0
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	08 2f       	mov	r16, r24
    1536:	10 e0       	ldi	r17, 0x00	; 0
    1538:	e6 e4       	ldi	r30, 0x46	; 70
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	91 81       	ldd	r25, Z+1	; 0x01
    1540:	24 e6       	ldi	r18, 0x64	; 100
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	b9 01       	movw	r22, r18
    1546:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__udivmodhi4>
    154a:	cb 01       	movw	r24, r22
    154c:	fc 01       	movw	r30, r24
    154e:	0e 9f       	mul	r16, r30
    1550:	c0 01       	movw	r24, r0
    1552:	0f 9f       	mul	r16, r31
    1554:	90 0d       	add	r25, r0
    1556:	1e 9f       	mul	r17, r30
    1558:	90 0d       	add	r25, r0
    155a:	11 24       	eor	r1, r1
    155c:	f7 01       	movw	r30, r14
    155e:	91 83       	std	Z+1, r25	; 0x01
    1560:	80 83       	st	Z, r24
    1562:	85 c0       	rjmp	.+266    	; 0x166e <Pwm_Start+0x2f6>
		break;
	case PWM_CH1B:
		SET_BIT(TCCR1A_R, COM1B0);
    1564:	af e4       	ldi	r26, 0x4F	; 79
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	ef e4       	ldi	r30, 0x4F	; 79
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	80 61       	ori	r24, 0x10	; 16
    1570:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_R, COM1B1);
    1572:	af e4       	ldi	r26, 0x4F	; 79
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	ef e4       	ldi	r30, 0x4F	; 79
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	80 62       	ori	r24, 0x20	; 32
    157e:	8c 93       	st	X, r24
		OCR1B_R = Duty * (ICR1_R / PERCENTAGE);
    1580:	0f 2e       	mov	r0, r31
    1582:	f8 e4       	ldi	r31, 0x48	; 72
    1584:	ef 2e       	mov	r14, r31
    1586:	ff 24       	eor	r15, r15
    1588:	f0 2d       	mov	r31, r0
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	08 2f       	mov	r16, r24
    158e:	10 e0       	ldi	r17, 0x00	; 0
    1590:	e6 e4       	ldi	r30, 0x46	; 70
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	91 81       	ldd	r25, Z+1	; 0x01
    1598:	24 e6       	ldi	r18, 0x64	; 100
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	b9 01       	movw	r22, r18
    159e:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__udivmodhi4>
    15a2:	cb 01       	movw	r24, r22
    15a4:	9c 01       	movw	r18, r24
    15a6:	02 9f       	mul	r16, r18
    15a8:	c0 01       	movw	r24, r0
    15aa:	03 9f       	mul	r16, r19
    15ac:	90 0d       	add	r25, r0
    15ae:	12 9f       	mul	r17, r18
    15b0:	90 0d       	add	r25, r0
    15b2:	11 24       	eor	r1, r1
    15b4:	f7 01       	movw	r30, r14
    15b6:	91 83       	std	Z+1, r25	; 0x01
    15b8:	80 83       	st	Z, r24
    15ba:	59 c0       	rjmp	.+178    	; 0x166e <Pwm_Start+0x2f6>
		break;
	case (PWM_CH1A | PWM_CH1B):
	{
		SET_BIT(TCCR1A_R, COM1A0);
    15bc:	af e4       	ldi	r26, 0x4F	; 79
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	ef e4       	ldi	r30, 0x4F	; 79
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	80 64       	ori	r24, 0x40	; 64
    15c8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_R, COM1A1);
    15ca:	af e4       	ldi	r26, 0x4F	; 79
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	ef e4       	ldi	r30, 0x4F	; 79
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	80 68       	ori	r24, 0x80	; 128
    15d6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_R, COM1B0);
    15d8:	af e4       	ldi	r26, 0x4F	; 79
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	ef e4       	ldi	r30, 0x4F	; 79
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	80 61       	ori	r24, 0x10	; 16
    15e4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_R, COM1B1);
    15e6:	af e4       	ldi	r26, 0x4F	; 79
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	ef e4       	ldi	r30, 0x4F	; 79
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	80 62       	ori	r24, 0x20	; 32
    15f2:	8c 93       	st	X, r24
		OCR1A_R = Duty * (ICR1_R / PERCENTAGE);
    15f4:	0f 2e       	mov	r0, r31
    15f6:	fa e4       	ldi	r31, 0x4A	; 74
    15f8:	ef 2e       	mov	r14, r31
    15fa:	ff 24       	eor	r15, r15
    15fc:	f0 2d       	mov	r31, r0
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	08 2f       	mov	r16, r24
    1602:	10 e0       	ldi	r17, 0x00	; 0
    1604:	e6 e4       	ldi	r30, 0x46	; 70
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	91 81       	ldd	r25, Z+1	; 0x01
    160c:	24 e6       	ldi	r18, 0x64	; 100
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	b9 01       	movw	r22, r18
    1612:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__udivmodhi4>
    1616:	cb 01       	movw	r24, r22
    1618:	9c 01       	movw	r18, r24
    161a:	02 9f       	mul	r16, r18
    161c:	c0 01       	movw	r24, r0
    161e:	03 9f       	mul	r16, r19
    1620:	90 0d       	add	r25, r0
    1622:	12 9f       	mul	r17, r18
    1624:	90 0d       	add	r25, r0
    1626:	11 24       	eor	r1, r1
    1628:	f7 01       	movw	r30, r14
    162a:	91 83       	std	Z+1, r25	; 0x01
    162c:	80 83       	st	Z, r24
		OCR1B_R = Duty * (ICR1_R / PERCENTAGE);
    162e:	0f 2e       	mov	r0, r31
    1630:	f8 e4       	ldi	r31, 0x48	; 72
    1632:	ef 2e       	mov	r14, r31
    1634:	ff 24       	eor	r15, r15
    1636:	f0 2d       	mov	r31, r0
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	08 2f       	mov	r16, r24
    163c:	10 e0       	ldi	r17, 0x00	; 0
    163e:	e6 e4       	ldi	r30, 0x46	; 70
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	91 81       	ldd	r25, Z+1	; 0x01
    1646:	24 e6       	ldi	r18, 0x64	; 100
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	b9 01       	movw	r22, r18
    164c:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__udivmodhi4>
    1650:	cb 01       	movw	r24, r22
    1652:	9c 01       	movw	r18, r24
    1654:	02 9f       	mul	r16, r18
    1656:	c0 01       	movw	r24, r0
    1658:	03 9f       	mul	r16, r19
    165a:	90 0d       	add	r25, r0
    165c:	12 9f       	mul	r17, r18
    165e:	90 0d       	add	r25, r0
    1660:	11 24       	eor	r1, r1
    1662:	f7 01       	movw	r30, r14
    1664:	91 83       	std	Z+1, r25	; 0x01
    1666:	80 83       	st	Z, r24
    1668:	02 c0       	rjmp	.+4      	; 0x166e <Pwm_Start+0x2f6>
		break;
	}
	default:
		au8_Ret = E_NOK;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_Ret;
    166e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1670:	29 96       	adiw	r28, 0x09	; 9
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	1f 91       	pop	r17
    1682:	0f 91       	pop	r16
    1684:	ff 90       	pop	r15
    1686:	ef 90       	pop	r14
    1688:	08 95       	ret

0000168a <Pwm_Update>:

ERROR_STATUS Pwm_Update(uint8_t Channel, uint8_t Duty, uint32_t Frequency)
{
    168a:	ef 92       	push	r14
    168c:	ff 92       	push	r15
    168e:	0f 93       	push	r16
    1690:	1f 93       	push	r17
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	29 97       	sbiw	r28, 0x09	; 9
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	f8 94       	cli
    16a0:	de bf       	out	0x3e, r29	; 62
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	cd bf       	out	0x3d, r28	; 61
    16a6:	8a 83       	std	Y+2, r24	; 0x02
    16a8:	6b 83       	std	Y+3, r22	; 0x03
    16aa:	2c 83       	std	Y+4, r18	; 0x04
    16ac:	3d 83       	std	Y+5, r19	; 0x05
    16ae:	4e 83       	std	Y+6, r20	; 0x06
    16b0:	5f 83       	std	Y+7, r21	; 0x07
	uint8_t au8_Ret = E_OK;
    16b2:	19 82       	std	Y+1, r1	; 0x01

	/* An operation to determine the duty cycle according to the used inverting mode */
	Duty = PERCENTAGE - Duty;
    16b4:	94 e6       	ldi	r25, 0x64	; 100
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	29 2f       	mov	r18, r25
    16ba:	28 1b       	sub	r18, r24
    16bc:	82 2f       	mov	r24, r18
    16be:	8b 83       	std	Y+3, r24	; 0x03

	/* An if condition to determine the prescaler and the ICR register according to the required frequency */
	if(Frequency >= 300)
    16c0:	8c 81       	ldd	r24, Y+4	; 0x04
    16c2:	9d 81       	ldd	r25, Y+5	; 0x05
    16c4:	ae 81       	ldd	r26, Y+6	; 0x06
    16c6:	bf 81       	ldd	r27, Y+7	; 0x07
    16c8:	8c 32       	cpi	r24, 0x2C	; 44
    16ca:	31 e0       	ldi	r19, 0x01	; 1
    16cc:	93 07       	cpc	r25, r19
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	a3 07       	cpc	r26, r19
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	b3 07       	cpc	r27, r19
    16d6:	e0 f0       	brcs	.+56     	; 0x1710 <Pwm_Update+0x86>
	{
		ICR1_R = F_CPU / (TIMER_PRESCALER_NO * Frequency);
    16d8:	06 e4       	ldi	r16, 0x46	; 70
    16da:	10 e0       	ldi	r17, 0x00	; 0
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	94 e2       	ldi	r25, 0x24	; 36
    16e0:	a4 ef       	ldi	r26, 0xF4	; 244
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	2c 81       	ldd	r18, Y+4	; 0x04
    16e6:	3d 81       	ldd	r19, Y+5	; 0x05
    16e8:	4e 81       	ldd	r20, Y+6	; 0x06
    16ea:	5f 81       	ldd	r21, Y+7	; 0x07
    16ec:	bc 01       	movw	r22, r24
    16ee:	cd 01       	movw	r24, r26
    16f0:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__udivmodsi4>
    16f4:	da 01       	movw	r26, r20
    16f6:	c9 01       	movw	r24, r18
    16f8:	f8 01       	movw	r30, r16
    16fa:	91 83       	std	Z+1, r25	; 0x01
    16fc:	80 83       	st	Z, r24
		TCCR1B_R = (TCCR1B_R & TIMER_PRESCALER_MASK) | BIT0;
    16fe:	ae e4       	ldi	r26, 0x4E	; 78
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	ee e4       	ldi	r30, 0x4E	; 78
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	88 7f       	andi	r24, 0xF8	; 248
    170a:	81 60       	ori	r24, 0x01	; 1
    170c:	8c 93       	st	X, r24
    170e:	71 c0       	rjmp	.+226    	; 0x17f2 <Pwm_Update+0x168>
	}else if(Frequency >= 40)
    1710:	8c 81       	ldd	r24, Y+4	; 0x04
    1712:	9d 81       	ldd	r25, Y+5	; 0x05
    1714:	ae 81       	ldd	r26, Y+6	; 0x06
    1716:	bf 81       	ldd	r27, Y+7	; 0x07
    1718:	88 32       	cpi	r24, 0x28	; 40
    171a:	91 05       	cpc	r25, r1
    171c:	a1 05       	cpc	r26, r1
    171e:	b1 05       	cpc	r27, r1
    1720:	50 f1       	brcs	.+84     	; 0x1776 <Pwm_Update+0xec>
	{
		ICR1_R = F_CPU / (TIMER_PRESCALER_8 * Frequency);
    1722:	06 e4       	ldi	r16, 0x46	; 70
    1724:	10 e0       	ldi	r17, 0x00	; 0
    1726:	8c 81       	ldd	r24, Y+4	; 0x04
    1728:	9d 81       	ldd	r25, Y+5	; 0x05
    172a:	ae 81       	ldd	r26, Y+6	; 0x06
    172c:	bf 81       	ldd	r27, Y+7	; 0x07
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	aa 1f       	adc	r26, r26
    1734:	bb 1f       	adc	r27, r27
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	aa 1f       	adc	r26, r26
    173c:	bb 1f       	adc	r27, r27
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	aa 1f       	adc	r26, r26
    1744:	bb 1f       	adc	r27, r27
    1746:	9c 01       	movw	r18, r24
    1748:	ad 01       	movw	r20, r26
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	94 e2       	ldi	r25, 0x24	; 36
    174e:	a4 ef       	ldi	r26, 0xF4	; 244
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	bc 01       	movw	r22, r24
    1754:	cd 01       	movw	r24, r26
    1756:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__udivmodsi4>
    175a:	da 01       	movw	r26, r20
    175c:	c9 01       	movw	r24, r18
    175e:	f8 01       	movw	r30, r16
    1760:	91 83       	std	Z+1, r25	; 0x01
    1762:	80 83       	st	Z, r24
		TCCR1B_R = (TCCR1B_R & TIMER_PRESCALER_MASK) | BIT1;
    1764:	ae e4       	ldi	r26, 0x4E	; 78
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	ee e4       	ldi	r30, 0x4E	; 78
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	88 7f       	andi	r24, 0xF8	; 248
    1770:	82 60       	ori	r24, 0x02	; 2
    1772:	8c 93       	st	X, r24
    1774:	3e c0       	rjmp	.+124    	; 0x17f2 <Pwm_Update+0x168>
	}else if(Frequency >= 4)
    1776:	8c 81       	ldd	r24, Y+4	; 0x04
    1778:	9d 81       	ldd	r25, Y+5	; 0x05
    177a:	ae 81       	ldd	r26, Y+6	; 0x06
    177c:	bf 81       	ldd	r27, Y+7	; 0x07
    177e:	84 30       	cpi	r24, 0x04	; 4
    1780:	91 05       	cpc	r25, r1
    1782:	a1 05       	cpc	r26, r1
    1784:	b1 05       	cpc	r27, r1
    1786:	a8 f1       	brcs	.+106    	; 0x17f2 <Pwm_Update+0x168>
	{
		ICR1_R = F_CPU / (TIMER_PRESCALER_64 * Frequency);
    1788:	06 e4       	ldi	r16, 0x46	; 70
    178a:	10 e0       	ldi	r17, 0x00	; 0
    178c:	8c 81       	ldd	r24, Y+4	; 0x04
    178e:	9d 81       	ldd	r25, Y+5	; 0x05
    1790:	ae 81       	ldd	r26, Y+6	; 0x06
    1792:	bf 81       	ldd	r27, Y+7	; 0x07
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	aa 1f       	adc	r26, r26
    179a:	bb 1f       	adc	r27, r27
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	aa 1f       	adc	r26, r26
    17a2:	bb 1f       	adc	r27, r27
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	aa 1f       	adc	r26, r26
    17aa:	bb 1f       	adc	r27, r27
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	aa 1f       	adc	r26, r26
    17b2:	bb 1f       	adc	r27, r27
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	aa 1f       	adc	r26, r26
    17ba:	bb 1f       	adc	r27, r27
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	aa 1f       	adc	r26, r26
    17c2:	bb 1f       	adc	r27, r27
    17c4:	9c 01       	movw	r18, r24
    17c6:	ad 01       	movw	r20, r26
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	94 e2       	ldi	r25, 0x24	; 36
    17cc:	a4 ef       	ldi	r26, 0xF4	; 244
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	bc 01       	movw	r22, r24
    17d2:	cd 01       	movw	r24, r26
    17d4:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__udivmodsi4>
    17d8:	da 01       	movw	r26, r20
    17da:	c9 01       	movw	r24, r18
    17dc:	f8 01       	movw	r30, r16
    17de:	91 83       	std	Z+1, r25	; 0x01
    17e0:	80 83       	st	Z, r24
		TCCR1B_R = (TCCR1B_R & TIMER_PRESCALER_MASK) | BIT0 | BIT1;
    17e2:	ae e4       	ldi	r26, 0x4E	; 78
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	ee e4       	ldi	r30, 0x4E	; 78
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	88 7f       	andi	r24, 0xF8	; 248
    17ee:	83 60       	ori	r24, 0x03	; 3
    17f0:	8c 93       	st	X, r24
	}

	/* A switch case to determine the required channel to produce the PWM signal on */
	switch(Channel)
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	39 87       	std	Y+9, r19	; 0x09
    17fa:	28 87       	std	Y+8, r18	; 0x08
    17fc:	88 85       	ldd	r24, Y+8	; 0x08
    17fe:	99 85       	ldd	r25, Y+9	; 0x09
    1800:	82 30       	cpi	r24, 0x02	; 2
    1802:	91 05       	cpc	r25, r1
    1804:	51 f1       	breq	.+84     	; 0x185a <Pwm_Update+0x1d0>
    1806:	e8 85       	ldd	r30, Y+8	; 0x08
    1808:	f9 85       	ldd	r31, Y+9	; 0x09
    180a:	e3 30       	cpi	r30, 0x03	; 3
    180c:	f1 05       	cpc	r31, r1
    180e:	09 f4       	brne	.+2      	; 0x1812 <Pwm_Update+0x188>
    1810:	42 c0       	rjmp	.+132    	; 0x1896 <Pwm_Update+0x20c>
    1812:	28 85       	ldd	r18, Y+8	; 0x08
    1814:	39 85       	ldd	r19, Y+9	; 0x09
    1816:	21 30       	cpi	r18, 0x01	; 1
    1818:	31 05       	cpc	r19, r1
    181a:	09 f0       	breq	.+2      	; 0x181e <Pwm_Update+0x194>
    181c:	77 c0       	rjmp	.+238    	; 0x190c <Pwm_Update+0x282>
	{
	case PWM_CH1A:
		OCR1A_R = Duty * (ICR1_R / PERCENTAGE);
    181e:	0f 2e       	mov	r0, r31
    1820:	fa e4       	ldi	r31, 0x4A	; 74
    1822:	ef 2e       	mov	r14, r31
    1824:	ff 24       	eor	r15, r15
    1826:	f0 2d       	mov	r31, r0
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	08 2f       	mov	r16, r24
    182c:	10 e0       	ldi	r17, 0x00	; 0
    182e:	e6 e4       	ldi	r30, 0x46	; 70
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	91 81       	ldd	r25, Z+1	; 0x01
    1836:	24 e6       	ldi	r18, 0x64	; 100
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	b9 01       	movw	r22, r18
    183c:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__udivmodhi4>
    1840:	cb 01       	movw	r24, r22
    1842:	fc 01       	movw	r30, r24
    1844:	0e 9f       	mul	r16, r30
    1846:	c0 01       	movw	r24, r0
    1848:	0f 9f       	mul	r16, r31
    184a:	90 0d       	add	r25, r0
    184c:	1e 9f       	mul	r17, r30
    184e:	90 0d       	add	r25, r0
    1850:	11 24       	eor	r1, r1
    1852:	f7 01       	movw	r30, r14
    1854:	91 83       	std	Z+1, r25	; 0x01
    1856:	80 83       	st	Z, r24
    1858:	5b c0       	rjmp	.+182    	; 0x1910 <Pwm_Update+0x286>
		break;
	case PWM_CH1B:
		OCR1B_R = Duty * (ICR1_R / PERCENTAGE);
    185a:	0f 2e       	mov	r0, r31
    185c:	f8 e4       	ldi	r31, 0x48	; 72
    185e:	ef 2e       	mov	r14, r31
    1860:	ff 24       	eor	r15, r15
    1862:	f0 2d       	mov	r31, r0
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	08 2f       	mov	r16, r24
    1868:	10 e0       	ldi	r17, 0x00	; 0
    186a:	e6 e4       	ldi	r30, 0x46	; 70
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	91 81       	ldd	r25, Z+1	; 0x01
    1872:	24 e6       	ldi	r18, 0x64	; 100
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	b9 01       	movw	r22, r18
    1878:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__udivmodhi4>
    187c:	cb 01       	movw	r24, r22
    187e:	9c 01       	movw	r18, r24
    1880:	02 9f       	mul	r16, r18
    1882:	c0 01       	movw	r24, r0
    1884:	03 9f       	mul	r16, r19
    1886:	90 0d       	add	r25, r0
    1888:	12 9f       	mul	r17, r18
    188a:	90 0d       	add	r25, r0
    188c:	11 24       	eor	r1, r1
    188e:	f7 01       	movw	r30, r14
    1890:	91 83       	std	Z+1, r25	; 0x01
    1892:	80 83       	st	Z, r24
    1894:	3d c0       	rjmp	.+122    	; 0x1910 <Pwm_Update+0x286>
		break;
	case (PWM_CH1A | PWM_CH1B):
	{
		OCR1A_R = Duty * (ICR1_R / PERCENTAGE);
    1896:	0f 2e       	mov	r0, r31
    1898:	fa e4       	ldi	r31, 0x4A	; 74
    189a:	ef 2e       	mov	r14, r31
    189c:	ff 24       	eor	r15, r15
    189e:	f0 2d       	mov	r31, r0
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	08 2f       	mov	r16, r24
    18a4:	10 e0       	ldi	r17, 0x00	; 0
    18a6:	e6 e4       	ldi	r30, 0x46	; 70
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	91 81       	ldd	r25, Z+1	; 0x01
    18ae:	24 e6       	ldi	r18, 0x64	; 100
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	b9 01       	movw	r22, r18
    18b4:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__udivmodhi4>
    18b8:	cb 01       	movw	r24, r22
    18ba:	9c 01       	movw	r18, r24
    18bc:	02 9f       	mul	r16, r18
    18be:	c0 01       	movw	r24, r0
    18c0:	03 9f       	mul	r16, r19
    18c2:	90 0d       	add	r25, r0
    18c4:	12 9f       	mul	r17, r18
    18c6:	90 0d       	add	r25, r0
    18c8:	11 24       	eor	r1, r1
    18ca:	f7 01       	movw	r30, r14
    18cc:	91 83       	std	Z+1, r25	; 0x01
    18ce:	80 83       	st	Z, r24
		OCR1B_R = Duty * (ICR1_R / PERCENTAGE);
    18d0:	0f 2e       	mov	r0, r31
    18d2:	f8 e4       	ldi	r31, 0x48	; 72
    18d4:	ef 2e       	mov	r14, r31
    18d6:	ff 24       	eor	r15, r15
    18d8:	f0 2d       	mov	r31, r0
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	08 2f       	mov	r16, r24
    18de:	10 e0       	ldi	r17, 0x00	; 0
    18e0:	e6 e4       	ldi	r30, 0x46	; 70
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	91 81       	ldd	r25, Z+1	; 0x01
    18e8:	24 e6       	ldi	r18, 0x64	; 100
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	b9 01       	movw	r22, r18
    18ee:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__udivmodhi4>
    18f2:	cb 01       	movw	r24, r22
    18f4:	9c 01       	movw	r18, r24
    18f6:	02 9f       	mul	r16, r18
    18f8:	c0 01       	movw	r24, r0
    18fa:	03 9f       	mul	r16, r19
    18fc:	90 0d       	add	r25, r0
    18fe:	12 9f       	mul	r17, r18
    1900:	90 0d       	add	r25, r0
    1902:	11 24       	eor	r1, r1
    1904:	f7 01       	movw	r30, r14
    1906:	91 83       	std	Z+1, r25	; 0x01
    1908:	80 83       	st	Z, r24
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <Pwm_Update+0x286>
		break;
	}
	default:
		au8_Ret = E_NOK;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_Ret;
    1910:	89 81       	ldd	r24, Y+1	; 0x01
}
    1912:	29 96       	adiw	r28, 0x09	; 9
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	1f 91       	pop	r17
    1924:	0f 91       	pop	r16
    1926:	ff 90       	pop	r15
    1928:	ef 90       	pop	r14
    192a:	08 95       	ret

0000192c <Pwm_Stop>:

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	00 d0       	rcall	.+0      	; 0x1932 <Pwm_Stop+0x6>
    1932:	00 d0       	rcall	.+0      	; 0x1934 <Pwm_Stop+0x8>
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t au8_Ret = E_OK;
    193a:	19 82       	std	Y+1, r1	; 0x01

	/* A switch case to determine the required channel to stop the PWM running on it */
	switch(Channel)
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	3c 83       	std	Y+4, r19	; 0x04
    1944:	2b 83       	std	Y+3, r18	; 0x03
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	9c 81       	ldd	r25, Y+4	; 0x04
    194a:	82 30       	cpi	r24, 0x02	; 2
    194c:	91 05       	cpc	r25, r1
    194e:	c9 f0       	breq	.+50     	; 0x1982 <Pwm_Stop+0x56>
    1950:	2b 81       	ldd	r18, Y+3	; 0x03
    1952:	3c 81       	ldd	r19, Y+4	; 0x04
    1954:	23 30       	cpi	r18, 0x03	; 3
    1956:	31 05       	cpc	r19, r1
    1958:	19 f1       	breq	.+70     	; 0x19a0 <Pwm_Stop+0x74>
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	9c 81       	ldd	r25, Y+4	; 0x04
    195e:	81 30       	cpi	r24, 0x01	; 1
    1960:	91 05       	cpc	r25, r1
    1962:	d9 f5       	brne	.+118    	; 0x19da <Pwm_Stop+0xae>
	{
	case PWM_CH1A:
		CLEAR_BIT(TCCR1A_R, COM1A0);
    1964:	af e4       	ldi	r26, 0x4F	; 79
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	ef e4       	ldi	r30, 0x4F	; 79
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	8f 7b       	andi	r24, 0xBF	; 191
    1970:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A_R, COM1A1);
    1972:	af e4       	ldi	r26, 0x4F	; 79
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	ef e4       	ldi	r30, 0x4F	; 79
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	8f 77       	andi	r24, 0x7F	; 127
    197e:	8c 93       	st	X, r24
    1980:	2e c0       	rjmp	.+92     	; 0x19de <Pwm_Stop+0xb2>
		break;
	case PWM_CH1B:
		CLEAR_BIT(TCCR1A_R, COM1B0);
    1982:	af e4       	ldi	r26, 0x4F	; 79
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	ef e4       	ldi	r30, 0x4F	; 79
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	8f 7e       	andi	r24, 0xEF	; 239
    198e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A_R, COM1B1);
    1990:	af e4       	ldi	r26, 0x4F	; 79
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	ef e4       	ldi	r30, 0x4F	; 79
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	8f 7d       	andi	r24, 0xDF	; 223
    199c:	8c 93       	st	X, r24
    199e:	1f c0       	rjmp	.+62     	; 0x19de <Pwm_Stop+0xb2>
		break;
	case (PWM_CH1A | PWM_CH1B):
	{
		CLEAR_BIT(TCCR1A_R, COM1A0);
    19a0:	af e4       	ldi	r26, 0x4F	; 79
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	ef e4       	ldi	r30, 0x4F	; 79
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	8f 7b       	andi	r24, 0xBF	; 191
    19ac:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A_R, COM1A1);
    19ae:	af e4       	ldi	r26, 0x4F	; 79
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	ef e4       	ldi	r30, 0x4F	; 79
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	8f 77       	andi	r24, 0x7F	; 127
    19ba:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A_R, COM1B0);
    19bc:	af e4       	ldi	r26, 0x4F	; 79
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	ef e4       	ldi	r30, 0x4F	; 79
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	8f 7e       	andi	r24, 0xEF	; 239
    19c8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A_R, COM1B1);
    19ca:	af e4       	ldi	r26, 0x4F	; 79
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	ef e4       	ldi	r30, 0x4F	; 79
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	8f 7d       	andi	r24, 0xDF	; 223
    19d6:	8c 93       	st	X, r24
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <Pwm_Stop+0xb2>
		break;
	}
	default:
		au8_Ret = E_NOK;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_Ret;
    19de:	89 81       	ldd	r24, Y+1	; 0x01
}
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <__vector_10>:


/*- INTERRUPT SERVICE ROUTINES -----------------------------*/

ISR(TIMER0_COMP_vect)
{
    19ee:	1f 92       	push	r1
    19f0:	0f 92       	push	r0
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	0f 92       	push	r0
    19f6:	11 24       	eor	r1, r1
    19f8:	2f 93       	push	r18
    19fa:	3f 93       	push	r19
    19fc:	4f 93       	push	r20
    19fe:	5f 93       	push	r21
    1a00:	6f 93       	push	r22
    1a02:	7f 93       	push	r23
    1a04:	8f 93       	push	r24
    1a06:	9f 93       	push	r25
    1a08:	af 93       	push	r26
    1a0a:	bf 93       	push	r27
    1a0c:	ef 93       	push	r30
    1a0e:	ff 93       	push	r31
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
	if(g_T0_CTC_callBackPtr != NULL)
    1a18:	80 91 70 01 	lds	r24, 0x0170
    1a1c:	90 91 71 01 	lds	r25, 0x0171
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	29 f0       	breq	.+10     	; 0x1a2e <__vector_10+0x40>
	{
		g_T0_CTC_callBackPtr();
    1a24:	e0 91 70 01 	lds	r30, 0x0170
    1a28:	f0 91 71 01 	lds	r31, 0x0171
    1a2c:	09 95       	icall
	}
}
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	ff 91       	pop	r31
    1a34:	ef 91       	pop	r30
    1a36:	bf 91       	pop	r27
    1a38:	af 91       	pop	r26
    1a3a:	9f 91       	pop	r25
    1a3c:	8f 91       	pop	r24
    1a3e:	7f 91       	pop	r23
    1a40:	6f 91       	pop	r22
    1a42:	5f 91       	pop	r21
    1a44:	4f 91       	pop	r20
    1a46:	3f 91       	pop	r19
    1a48:	2f 91       	pop	r18
    1a4a:	0f 90       	pop	r0
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	0f 90       	pop	r0
    1a50:	1f 90       	pop	r1
    1a52:	18 95       	reti

00001a54 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    1a54:	1f 92       	push	r1
    1a56:	0f 92       	push	r0
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	0f 92       	push	r0
    1a5c:	11 24       	eor	r1, r1
    1a5e:	2f 93       	push	r18
    1a60:	3f 93       	push	r19
    1a62:	4f 93       	push	r20
    1a64:	5f 93       	push	r21
    1a66:	6f 93       	push	r22
    1a68:	7f 93       	push	r23
    1a6a:	8f 93       	push	r24
    1a6c:	9f 93       	push	r25
    1a6e:	af 93       	push	r26
    1a70:	bf 93       	push	r27
    1a72:	ef 93       	push	r30
    1a74:	ff 93       	push	r31
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
	if(g_T0_OVF_callBackPtr != NULL)
    1a7e:	80 91 72 01 	lds	r24, 0x0172
    1a82:	90 91 73 01 	lds	r25, 0x0173
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	29 f0       	breq	.+10     	; 0x1a94 <__vector_11+0x40>
	{
		g_T0_OVF_callBackPtr();
    1a8a:	e0 91 72 01 	lds	r30, 0x0172
    1a8e:	f0 91 73 01 	lds	r31, 0x0173
    1a92:	09 95       	icall
	}
}
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	ff 91       	pop	r31
    1a9a:	ef 91       	pop	r30
    1a9c:	bf 91       	pop	r27
    1a9e:	af 91       	pop	r26
    1aa0:	9f 91       	pop	r25
    1aa2:	8f 91       	pop	r24
    1aa4:	7f 91       	pop	r23
    1aa6:	6f 91       	pop	r22
    1aa8:	5f 91       	pop	r21
    1aaa:	4f 91       	pop	r20
    1aac:	3f 91       	pop	r19
    1aae:	2f 91       	pop	r18
    1ab0:	0f 90       	pop	r0
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	0f 90       	pop	r0
    1ab6:	1f 90       	pop	r1
    1ab8:	18 95       	reti

00001aba <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
    1aba:	1f 92       	push	r1
    1abc:	0f 92       	push	r0
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	0f 92       	push	r0
    1ac2:	11 24       	eor	r1, r1
    1ac4:	2f 93       	push	r18
    1ac6:	3f 93       	push	r19
    1ac8:	4f 93       	push	r20
    1aca:	5f 93       	push	r21
    1acc:	6f 93       	push	r22
    1ace:	7f 93       	push	r23
    1ad0:	8f 93       	push	r24
    1ad2:	9f 93       	push	r25
    1ad4:	af 93       	push	r26
    1ad6:	bf 93       	push	r27
    1ad8:	ef 93       	push	r30
    1ada:	ff 93       	push	r31
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
	if(g_T1_ICU_callBackPtr != NULL)
    1ae4:	80 91 74 01 	lds	r24, 0x0174
    1ae8:	90 91 75 01 	lds	r25, 0x0175
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	29 f0       	breq	.+10     	; 0x1afa <__vector_6+0x40>
	{
		g_T1_ICU_callBackPtr();
    1af0:	e0 91 74 01 	lds	r30, 0x0174
    1af4:	f0 91 75 01 	lds	r31, 0x0175
    1af8:	09 95       	icall
	}
}
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	ff 91       	pop	r31
    1b00:	ef 91       	pop	r30
    1b02:	bf 91       	pop	r27
    1b04:	af 91       	pop	r26
    1b06:	9f 91       	pop	r25
    1b08:	8f 91       	pop	r24
    1b0a:	7f 91       	pop	r23
    1b0c:	6f 91       	pop	r22
    1b0e:	5f 91       	pop	r21
    1b10:	4f 91       	pop	r20
    1b12:	3f 91       	pop	r19
    1b14:	2f 91       	pop	r18
    1b16:	0f 90       	pop	r0
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	0f 90       	pop	r0
    1b1c:	1f 90       	pop	r1
    1b1e:	18 95       	reti

00001b20 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1b20:	1f 92       	push	r1
    1b22:	0f 92       	push	r0
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	0f 92       	push	r0
    1b28:	11 24       	eor	r1, r1
    1b2a:	2f 93       	push	r18
    1b2c:	3f 93       	push	r19
    1b2e:	4f 93       	push	r20
    1b30:	5f 93       	push	r21
    1b32:	6f 93       	push	r22
    1b34:	7f 93       	push	r23
    1b36:	8f 93       	push	r24
    1b38:	9f 93       	push	r25
    1b3a:	af 93       	push	r26
    1b3c:	bf 93       	push	r27
    1b3e:	ef 93       	push	r30
    1b40:	ff 93       	push	r31
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
	if(g_T1_CTC_A_callBackPtr != NULL)
    1b4a:	80 91 76 01 	lds	r24, 0x0176
    1b4e:	90 91 77 01 	lds	r25, 0x0177
    1b52:	00 97       	sbiw	r24, 0x00	; 0
    1b54:	29 f0       	breq	.+10     	; 0x1b60 <__vector_7+0x40>
	{
		g_T1_CTC_A_callBackPtr();
    1b56:	e0 91 76 01 	lds	r30, 0x0176
    1b5a:	f0 91 77 01 	lds	r31, 0x0177
    1b5e:	09 95       	icall
	}
}
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	ff 91       	pop	r31
    1b66:	ef 91       	pop	r30
    1b68:	bf 91       	pop	r27
    1b6a:	af 91       	pop	r26
    1b6c:	9f 91       	pop	r25
    1b6e:	8f 91       	pop	r24
    1b70:	7f 91       	pop	r23
    1b72:	6f 91       	pop	r22
    1b74:	5f 91       	pop	r21
    1b76:	4f 91       	pop	r20
    1b78:	3f 91       	pop	r19
    1b7a:	2f 91       	pop	r18
    1b7c:	0f 90       	pop	r0
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	0f 90       	pop	r0
    1b82:	1f 90       	pop	r1
    1b84:	18 95       	reti

00001b86 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    1b86:	1f 92       	push	r1
    1b88:	0f 92       	push	r0
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	0f 92       	push	r0
    1b8e:	11 24       	eor	r1, r1
    1b90:	2f 93       	push	r18
    1b92:	3f 93       	push	r19
    1b94:	4f 93       	push	r20
    1b96:	5f 93       	push	r21
    1b98:	6f 93       	push	r22
    1b9a:	7f 93       	push	r23
    1b9c:	8f 93       	push	r24
    1b9e:	9f 93       	push	r25
    1ba0:	af 93       	push	r26
    1ba2:	bf 93       	push	r27
    1ba4:	ef 93       	push	r30
    1ba6:	ff 93       	push	r31
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
	if(g_T1_CTC_B_callBackPtr != NULL)
    1bb0:	80 91 78 01 	lds	r24, 0x0178
    1bb4:	90 91 79 01 	lds	r25, 0x0179
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	29 f0       	breq	.+10     	; 0x1bc6 <__vector_8+0x40>
	{
		g_T1_CTC_B_callBackPtr();
    1bbc:	e0 91 78 01 	lds	r30, 0x0178
    1bc0:	f0 91 79 01 	lds	r31, 0x0179
    1bc4:	09 95       	icall
	}
}
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	ff 91       	pop	r31
    1bcc:	ef 91       	pop	r30
    1bce:	bf 91       	pop	r27
    1bd0:	af 91       	pop	r26
    1bd2:	9f 91       	pop	r25
    1bd4:	8f 91       	pop	r24
    1bd6:	7f 91       	pop	r23
    1bd8:	6f 91       	pop	r22
    1bda:	5f 91       	pop	r21
    1bdc:	4f 91       	pop	r20
    1bde:	3f 91       	pop	r19
    1be0:	2f 91       	pop	r18
    1be2:	0f 90       	pop	r0
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	0f 90       	pop	r0
    1be8:	1f 90       	pop	r1
    1bea:	18 95       	reti

00001bec <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1bec:	1f 92       	push	r1
    1bee:	0f 92       	push	r0
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	0f 92       	push	r0
    1bf4:	11 24       	eor	r1, r1
    1bf6:	2f 93       	push	r18
    1bf8:	3f 93       	push	r19
    1bfa:	4f 93       	push	r20
    1bfc:	5f 93       	push	r21
    1bfe:	6f 93       	push	r22
    1c00:	7f 93       	push	r23
    1c02:	8f 93       	push	r24
    1c04:	9f 93       	push	r25
    1c06:	af 93       	push	r26
    1c08:	bf 93       	push	r27
    1c0a:	ef 93       	push	r30
    1c0c:	ff 93       	push	r31
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
	if(g_T1_OVF_callBackPtr != NULL)
    1c16:	80 91 7a 01 	lds	r24, 0x017A
    1c1a:	90 91 7b 01 	lds	r25, 0x017B
    1c1e:	00 97       	sbiw	r24, 0x00	; 0
    1c20:	29 f0       	breq	.+10     	; 0x1c2c <__vector_9+0x40>
	{
		g_T1_OVF_callBackPtr();
    1c22:	e0 91 7a 01 	lds	r30, 0x017A
    1c26:	f0 91 7b 01 	lds	r31, 0x017B
    1c2a:	09 95       	icall
	}
}
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	ff 91       	pop	r31
    1c32:	ef 91       	pop	r30
    1c34:	bf 91       	pop	r27
    1c36:	af 91       	pop	r26
    1c38:	9f 91       	pop	r25
    1c3a:	8f 91       	pop	r24
    1c3c:	7f 91       	pop	r23
    1c3e:	6f 91       	pop	r22
    1c40:	5f 91       	pop	r21
    1c42:	4f 91       	pop	r20
    1c44:	3f 91       	pop	r19
    1c46:	2f 91       	pop	r18
    1c48:	0f 90       	pop	r0
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	0f 90       	pop	r0
    1c4e:	1f 90       	pop	r1
    1c50:	18 95       	reti

00001c52 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    1c52:	1f 92       	push	r1
    1c54:	0f 92       	push	r0
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	0f 92       	push	r0
    1c5a:	11 24       	eor	r1, r1
    1c5c:	2f 93       	push	r18
    1c5e:	3f 93       	push	r19
    1c60:	4f 93       	push	r20
    1c62:	5f 93       	push	r21
    1c64:	6f 93       	push	r22
    1c66:	7f 93       	push	r23
    1c68:	8f 93       	push	r24
    1c6a:	9f 93       	push	r25
    1c6c:	af 93       	push	r26
    1c6e:	bf 93       	push	r27
    1c70:	ef 93       	push	r30
    1c72:	ff 93       	push	r31
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
	if(g_T2_CTC_callBackPtr != NULL)
    1c7c:	80 91 7c 01 	lds	r24, 0x017C
    1c80:	90 91 7d 01 	lds	r25, 0x017D
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	29 f0       	breq	.+10     	; 0x1c92 <__vector_4+0x40>
	{
		g_T2_CTC_callBackPtr();
    1c88:	e0 91 7c 01 	lds	r30, 0x017C
    1c8c:	f0 91 7d 01 	lds	r31, 0x017D
    1c90:	09 95       	icall
	}
}
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	ff 91       	pop	r31
    1c98:	ef 91       	pop	r30
    1c9a:	bf 91       	pop	r27
    1c9c:	af 91       	pop	r26
    1c9e:	9f 91       	pop	r25
    1ca0:	8f 91       	pop	r24
    1ca2:	7f 91       	pop	r23
    1ca4:	6f 91       	pop	r22
    1ca6:	5f 91       	pop	r21
    1ca8:	4f 91       	pop	r20
    1caa:	3f 91       	pop	r19
    1cac:	2f 91       	pop	r18
    1cae:	0f 90       	pop	r0
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	0f 90       	pop	r0
    1cb4:	1f 90       	pop	r1
    1cb6:	18 95       	reti

00001cb8 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    1cb8:	1f 92       	push	r1
    1cba:	0f 92       	push	r0
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	0f 92       	push	r0
    1cc0:	11 24       	eor	r1, r1
    1cc2:	2f 93       	push	r18
    1cc4:	3f 93       	push	r19
    1cc6:	4f 93       	push	r20
    1cc8:	5f 93       	push	r21
    1cca:	6f 93       	push	r22
    1ccc:	7f 93       	push	r23
    1cce:	8f 93       	push	r24
    1cd0:	9f 93       	push	r25
    1cd2:	af 93       	push	r26
    1cd4:	bf 93       	push	r27
    1cd6:	ef 93       	push	r30
    1cd8:	ff 93       	push	r31
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
	if(g_T2_OVF_callBackPtr != NULL)
    1ce2:	80 91 7e 01 	lds	r24, 0x017E
    1ce6:	90 91 7f 01 	lds	r25, 0x017F
    1cea:	00 97       	sbiw	r24, 0x00	; 0
    1cec:	29 f0       	breq	.+10     	; 0x1cf8 <__vector_5+0x40>
	{
		g_T2_OVF_callBackPtr();
    1cee:	e0 91 7e 01 	lds	r30, 0x017E
    1cf2:	f0 91 7f 01 	lds	r31, 0x017F
    1cf6:	09 95       	icall
	}
}
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	ff 91       	pop	r31
    1cfe:	ef 91       	pop	r30
    1d00:	bf 91       	pop	r27
    1d02:	af 91       	pop	r26
    1d04:	9f 91       	pop	r25
    1d06:	8f 91       	pop	r24
    1d08:	7f 91       	pop	r23
    1d0a:	6f 91       	pop	r22
    1d0c:	5f 91       	pop	r21
    1d0e:	4f 91       	pop	r20
    1d10:	3f 91       	pop	r19
    1d12:	2f 91       	pop	r18
    1d14:	0f 90       	pop	r0
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	0f 90       	pop	r0
    1d1a:	1f 90       	pop	r1
    1d1c:	18 95       	reti

00001d1e <Timer_Init>:


/*- APIs IMPLEMENTATION ------------------------------------*/

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	2f 97       	sbiw	r28, 0x0f	; 15
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	9b 83       	std	Y+3, r25	; 0x03
    1d34:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t au8_Ret = E_OK;
    1d36:	19 82       	std	Y+1, r1	; 0x01
	/* A switch case to decide which timer module to be used */
	switch(Timer_cfg->Timer_CH_NO)
    1d38:	ea 81       	ldd	r30, Y+2	; 0x02
    1d3a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d3c:	80 81       	ld	r24, Z
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	3f 87       	std	Y+15, r19	; 0x0f
    1d44:	2e 87       	std	Y+14, r18	; 0x0e
    1d46:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d48:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <Timer_Init+0x34>
    1d50:	62 c0       	rjmp	.+196    	; 0x1e16 <Timer_Init+0xf8>
    1d52:	2e 85       	ldd	r18, Y+14	; 0x0e
    1d54:	3f 85       	ldd	r19, Y+15	; 0x0f
    1d56:	22 30       	cpi	r18, 0x02	; 2
    1d58:	31 05       	cpc	r19, r1
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <Timer_Init+0x40>
    1d5c:	b3 c0       	rjmp	.+358    	; 0x1ec4 <Timer_Init+0x1a6>
    1d5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d60:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	09 f0       	breq	.+2      	; 0x1d68 <Timer_Init+0x4a>
    1d66:	e5 c0       	rjmp	.+458    	; 0x1f32 <Timer_Init+0x214>
	{
	case TIMER_CH0:
		/* Non-PWM mode */
		SET_BIT(TCCR0_R, FOC0);
    1d68:	a3 e5       	ldi	r26, 0x53	; 83
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e3 e5       	ldi	r30, 0x53	; 83
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	80 68       	ori	r24, 0x80	; 128
    1d74:	8c 93       	st	X, r24

		/* Choose CTC mode */
		SET_BIT(TCCR0_R, WGM01);
    1d76:	a3 e5       	ldi	r26, 0x53	; 83
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e3 e5       	ldi	r30, 0x53	; 83
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	88 60       	ori	r24, 0x08	; 8
    1d82:	8c 93       	st	X, r24

		/* A switch case to decide which mode to be operating at */
		switch(Timer_cfg->Timer_Mode)
    1d84:	ea 81       	ldd	r30, Y+2	; 0x02
    1d86:	fb 81       	ldd	r31, Y+3	; 0x03
    1d88:	81 81       	ldd	r24, Z+1	; 0x01
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	3d 87       	std	Y+13, r19	; 0x0d
    1d90:	2c 87       	std	Y+12, r18	; 0x0c
    1d92:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d94:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d96:	81 30       	cpi	r24, 0x01	; 1
    1d98:	91 05       	cpc	r25, r1
    1d9a:	79 f0       	breq	.+30     	; 0x1dba <Timer_Init+0x9c>
    1d9c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d9e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1da0:	22 30       	cpi	r18, 0x02	; 2
    1da2:	31 05       	cpc	r19, r1
    1da4:	71 f0       	breq	.+28     	; 0x1dc2 <Timer_Init+0xa4>
    1da6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1da8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1daa:	00 97       	sbiw	r24, 0x00	; 0
    1dac:	71 f4       	brne	.+28     	; 0x1dca <Timer_Init+0xac>
		{
		case TIMER_MODE:
			gu8_timer0Timer1PreScaler = Timer_cfg->Timer_Prescaler;
    1dae:	ea 81       	ldd	r30, Y+2	; 0x02
    1db0:	fb 81       	ldd	r31, Y+3	; 0x03
    1db2:	83 81       	ldd	r24, Z+3	; 0x03
    1db4:	80 93 6e 01 	sts	0x016E, r24
    1db8:	0a c0       	rjmp	.+20     	; 0x1dce <Timer_Init+0xb0>
			break;
		case COUNTER_RISING_MODE:
			gu8_timer0Timer1PreScaler = TIMER_CLOCK_ON_RISING_EDGE;
    1dba:	87 e0       	ldi	r24, 0x07	; 7
    1dbc:	80 93 6e 01 	sts	0x016E, r24
    1dc0:	06 c0       	rjmp	.+12     	; 0x1dce <Timer_Init+0xb0>
			break;
		case COUNTER_FALLING_MODE:
			gu8_timer0Timer1PreScaler = TIMER_CLOCK_ON_FALLING_EDGE;
    1dc2:	86 e0       	ldi	r24, 0x06	; 6
    1dc4:	80 93 6e 01 	sts	0x016E, r24
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <Timer_Init+0xb0>
			break;
		default:
			au8_Ret = E_NOK;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		/* A switch case to decide whether to operate in interrupt mode or polling mode */
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
    1dce:	ea 81       	ldd	r30, Y+2	; 0x02
    1dd0:	fb 81       	ldd	r31, Y+3	; 0x03
    1dd2:	82 81       	ldd	r24, Z+2	; 0x02
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	3b 87       	std	Y+11, r19	; 0x0b
    1dda:	2a 87       	std	Y+10, r18	; 0x0a
    1ddc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dde:	9b 85       	ldd	r25, Y+11	; 0x0b
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	31 f0       	breq	.+12     	; 0x1df0 <Timer_Init+0xd2>
    1de4:	2a 85       	ldd	r18, Y+10	; 0x0a
    1de6:	3b 85       	ldd	r19, Y+11	; 0x0b
    1de8:	21 30       	cpi	r18, 0x01	; 1
    1dea:	31 05       	cpc	r19, r1
    1dec:	49 f0       	breq	.+18     	; 0x1e00 <Timer_Init+0xe2>
    1dee:	10 c0       	rjmp	.+32     	; 0x1e10 <Timer_Init+0xf2>
		{
		case TIMER_POLLING_MODE:
			CLEAR_BIT(TIMSK_R, OCIE0);
    1df0:	a9 e5       	ldi	r26, 0x59	; 89
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e9 e5       	ldi	r30, 0x59	; 89
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	8d 7f       	andi	r24, 0xFD	; 253
    1dfc:	8c 93       	st	X, r24
    1dfe:	9b c0       	rjmp	.+310    	; 0x1f36 <Timer_Init+0x218>
			break;
		case TIMER_INTERRUPT_MODE:
			SET_BIT(TIMSK_R, OCIE0);
    1e00:	a9 e5       	ldi	r26, 0x59	; 89
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e9 e5       	ldi	r30, 0x59	; 89
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	82 60       	ori	r24, 0x02	; 2
    1e0c:	8c 93       	st	X, r24
    1e0e:	93 c0       	rjmp	.+294    	; 0x1f36 <Timer_Init+0x218>
			break;
		default:
			au8_Ret = E_NOK;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	89 83       	std	Y+1, r24	; 0x01
    1e14:	90 c0       	rjmp	.+288    	; 0x1f36 <Timer_Init+0x218>
			break;
		}
		break;
	case TIMER_CH1:
		/* Non-PWM mode */
		SET_BIT(TCCR1A_R, FOC1A);
    1e16:	af e4       	ldi	r26, 0x4F	; 79
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	ef e4       	ldi	r30, 0x4F	; 79
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	88 60       	ori	r24, 0x08	; 8
    1e22:	8c 93       	st	X, r24

		/* Choose CTC mode */
		SET_BIT(TCCR1B_R, WGM12);
    1e24:	ae e4       	ldi	r26, 0x4E	; 78
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	ee e4       	ldi	r30, 0x4E	; 78
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	88 60       	ori	r24, 0x08	; 8
    1e30:	8c 93       	st	X, r24

		/* A switch case to decide which mode to be operating at */
		switch(Timer_cfg->Timer_Mode)
    1e32:	ea 81       	ldd	r30, Y+2	; 0x02
    1e34:	fb 81       	ldd	r31, Y+3	; 0x03
    1e36:	81 81       	ldd	r24, Z+1	; 0x01
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	39 87       	std	Y+9, r19	; 0x09
    1e3e:	28 87       	std	Y+8, r18	; 0x08
    1e40:	88 85       	ldd	r24, Y+8	; 0x08
    1e42:	99 85       	ldd	r25, Y+9	; 0x09
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	91 05       	cpc	r25, r1
    1e48:	79 f0       	breq	.+30     	; 0x1e68 <Timer_Init+0x14a>
    1e4a:	28 85       	ldd	r18, Y+8	; 0x08
    1e4c:	39 85       	ldd	r19, Y+9	; 0x09
    1e4e:	22 30       	cpi	r18, 0x02	; 2
    1e50:	31 05       	cpc	r19, r1
    1e52:	71 f0       	breq	.+28     	; 0x1e70 <Timer_Init+0x152>
    1e54:	88 85       	ldd	r24, Y+8	; 0x08
    1e56:	99 85       	ldd	r25, Y+9	; 0x09
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	71 f4       	brne	.+28     	; 0x1e78 <Timer_Init+0x15a>
		{
		case TIMER_MODE:
			gu8_timer0Timer1PreScaler = Timer_cfg->Timer_Prescaler;
    1e5c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e5e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e60:	83 81       	ldd	r24, Z+3	; 0x03
    1e62:	80 93 6e 01 	sts	0x016E, r24
    1e66:	0a c0       	rjmp	.+20     	; 0x1e7c <Timer_Init+0x15e>
			break;
		case COUNTER_RISING_MODE:
			gu8_timer0Timer1PreScaler = TIMER_CLOCK_ON_RISING_EDGE;
    1e68:	87 e0       	ldi	r24, 0x07	; 7
    1e6a:	80 93 6e 01 	sts	0x016E, r24
    1e6e:	06 c0       	rjmp	.+12     	; 0x1e7c <Timer_Init+0x15e>
			break;
		case COUNTER_FALLING_MODE:
			gu8_timer0Timer1PreScaler = TIMER_CLOCK_ON_FALLING_EDGE;
    1e70:	86 e0       	ldi	r24, 0x06	; 6
    1e72:	80 93 6e 01 	sts	0x016E, r24
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <Timer_Init+0x15e>
			break;
		default:
			au8_Ret = E_NOK;
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		/* A switch case to decide whether to operate in interrupt mode or polling mode */
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
    1e7c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e7e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e80:	82 81       	ldd	r24, Z+2	; 0x02
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	3f 83       	std	Y+7, r19	; 0x07
    1e88:	2e 83       	std	Y+6, r18	; 0x06
    1e8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	31 f0       	breq	.+12     	; 0x1e9e <Timer_Init+0x180>
    1e92:	2e 81       	ldd	r18, Y+6	; 0x06
    1e94:	3f 81       	ldd	r19, Y+7	; 0x07
    1e96:	21 30       	cpi	r18, 0x01	; 1
    1e98:	31 05       	cpc	r19, r1
    1e9a:	49 f0       	breq	.+18     	; 0x1eae <Timer_Init+0x190>
    1e9c:	10 c0       	rjmp	.+32     	; 0x1ebe <Timer_Init+0x1a0>
		{
		case TIMER_POLLING_MODE:
			CLEAR_BIT(TIMSK_R, OCIE1A);
    1e9e:	a9 e5       	ldi	r26, 0x59	; 89
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e9 e5       	ldi	r30, 0x59	; 89
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	8f 7e       	andi	r24, 0xEF	; 239
    1eaa:	8c 93       	st	X, r24
    1eac:	44 c0       	rjmp	.+136    	; 0x1f36 <Timer_Init+0x218>
			break;
		case TIMER_INTERRUPT_MODE:
			SET_BIT(TIMSK_R, OCIE1A);
    1eae:	a9 e5       	ldi	r26, 0x59	; 89
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e9 e5       	ldi	r30, 0x59	; 89
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	80 61       	ori	r24, 0x10	; 16
    1eba:	8c 93       	st	X, r24
    1ebc:	3c c0       	rjmp	.+120    	; 0x1f36 <Timer_Init+0x218>
			break;
		default:
			au8_Ret = E_NOK;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	39 c0       	rjmp	.+114    	; 0x1f36 <Timer_Init+0x218>
			break;
		}
		break;
	case TIMER_CH2:
		/* Non-PWM mode */
		SET_BIT(TCCR2_R, FOC2);
    1ec4:	a5 e4       	ldi	r26, 0x45	; 69
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e5 e4       	ldi	r30, 0x45	; 69
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	80 68       	ori	r24, 0x80	; 128
    1ed0:	8c 93       	st	X, r24

		/* Choose CTC mode */
		SET_BIT(TCCR2_R, WGM21);
    1ed2:	a5 e4       	ldi	r26, 0x45	; 69
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e5 e4       	ldi	r30, 0x45	; 69
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	88 60       	ori	r24, 0x08	; 8
    1ede:	8c 93       	st	X, r24

		/* A switch case to decide which mode to be operating at */
		switch(TIMER_MODE)
		{
		case TIMER_MODE:
			gu8_timer2PreScaler = Timer_cfg->Timer_Prescaler;
    1ee0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ee2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ee4:	83 81       	ldd	r24, Z+3	; 0x03
    1ee6:	80 93 6f 01 	sts	0x016F, r24
		default:
			au8_Ret = E_NOK;
			break;
		}
		/* A switch case to decide whether to operate in interrupt mode or polling mode */
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
    1eea:	ea 81       	ldd	r30, Y+2	; 0x02
    1eec:	fb 81       	ldd	r31, Y+3	; 0x03
    1eee:	82 81       	ldd	r24, Z+2	; 0x02
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	3d 83       	std	Y+5, r19	; 0x05
    1ef6:	2c 83       	std	Y+4, r18	; 0x04
    1ef8:	8c 81       	ldd	r24, Y+4	; 0x04
    1efa:	9d 81       	ldd	r25, Y+5	; 0x05
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	31 f0       	breq	.+12     	; 0x1f0c <Timer_Init+0x1ee>
    1f00:	2c 81       	ldd	r18, Y+4	; 0x04
    1f02:	3d 81       	ldd	r19, Y+5	; 0x05
    1f04:	21 30       	cpi	r18, 0x01	; 1
    1f06:	31 05       	cpc	r19, r1
    1f08:	49 f0       	breq	.+18     	; 0x1f1c <Timer_Init+0x1fe>
    1f0a:	10 c0       	rjmp	.+32     	; 0x1f2c <Timer_Init+0x20e>
		{
		case TIMER_POLLING_MODE:
			CLEAR_BIT(TIMSK_R, OCIE2);
    1f0c:	a9 e5       	ldi	r26, 0x59	; 89
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e9 e5       	ldi	r30, 0x59	; 89
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	8f 77       	andi	r24, 0x7F	; 127
    1f18:	8c 93       	st	X, r24
    1f1a:	0d c0       	rjmp	.+26     	; 0x1f36 <Timer_Init+0x218>
			break;
		case TIMER_INTERRUPT_MODE:
			SET_BIT(TIMSK_R, OCIE2);
    1f1c:	a9 e5       	ldi	r26, 0x59	; 89
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e9 e5       	ldi	r30, 0x59	; 89
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	80 68       	ori	r24, 0x80	; 128
    1f28:	8c 93       	st	X, r24
    1f2a:	05 c0       	rjmp	.+10     	; 0x1f36 <Timer_Init+0x218>
			break;
		default:
			au8_Ret = E_NOK;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	89 83       	std	Y+1, r24	; 0x01
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <Timer_Init+0x218>
			break;
		}
		break;
	default:
		au8_Ret = E_NOK;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_Ret;
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f38:	2f 96       	adiw	r28, 0x0f	; 15
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	de bf       	out	0x3e, r29	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	cd bf       	out	0x3d, r28	; 61
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <Timer_SetCallBack>:

ERROR_STATUS Timer_SetCallBack(Timer_cfg_s* Timer_cfg)
{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <Timer_SetCallBack+0x6>
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <Timer_SetCallBack+0x8>
    1f52:	0f 92       	push	r0
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	9b 83       	std	Y+3, r25	; 0x03
    1f5a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t au8_Ret = E_OK;
    1f5c:	19 82       	std	Y+1, r1	; 0x01
	/* A switch case to check which timer to set its call back operation */
	switch(Timer_cfg->Timer_CH_NO)
    1f5e:	ea 81       	ldd	r30, Y+2	; 0x02
    1f60:	fb 81       	ldd	r31, Y+3	; 0x03
    1f62:	80 81       	ld	r24, Z
    1f64:	28 2f       	mov	r18, r24
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	3d 83       	std	Y+5, r19	; 0x05
    1f6a:	2c 83       	std	Y+4, r18	; 0x04
    1f6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f70:	81 30       	cpi	r24, 0x01	; 1
    1f72:	91 05       	cpc	r25, r1
    1f74:	91 f0       	breq	.+36     	; 0x1f9a <Timer_SetCallBack+0x50>
    1f76:	2c 81       	ldd	r18, Y+4	; 0x04
    1f78:	3d 81       	ldd	r19, Y+5	; 0x05
    1f7a:	22 30       	cpi	r18, 0x02	; 2
    1f7c:	31 05       	cpc	r19, r1
    1f7e:	b1 f0       	breq	.+44     	; 0x1fac <Timer_SetCallBack+0x62>
    1f80:	8c 81       	ldd	r24, Y+4	; 0x04
    1f82:	9d 81       	ldd	r25, Y+5	; 0x05
    1f84:	00 97       	sbiw	r24, 0x00	; 0
    1f86:	d9 f4       	brne	.+54     	; 0x1fbe <Timer_SetCallBack+0x74>
	{
	case TIMER_CH0:
		g_T0_CTC_callBackPtr = (volatile void (*)(void))(Timer_cfg->Timer_Cbk_ptr);
    1f88:	ea 81       	ldd	r30, Y+2	; 0x02
    1f8a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f8c:	84 81       	ldd	r24, Z+4	; 0x04
    1f8e:	95 81       	ldd	r25, Z+5	; 0x05
    1f90:	90 93 71 01 	sts	0x0171, r25
    1f94:	80 93 70 01 	sts	0x0170, r24
    1f98:	14 c0       	rjmp	.+40     	; 0x1fc2 <Timer_SetCallBack+0x78>
		break;
	case TIMER_CH1:
		g_T1_CTC_A_callBackPtr = (volatile void (*)(void))(Timer_cfg->Timer_Cbk_ptr);
    1f9a:	ea 81       	ldd	r30, Y+2	; 0x02
    1f9c:	fb 81       	ldd	r31, Y+3	; 0x03
    1f9e:	84 81       	ldd	r24, Z+4	; 0x04
    1fa0:	95 81       	ldd	r25, Z+5	; 0x05
    1fa2:	90 93 77 01 	sts	0x0177, r25
    1fa6:	80 93 76 01 	sts	0x0176, r24
    1faa:	0b c0       	rjmp	.+22     	; 0x1fc2 <Timer_SetCallBack+0x78>
		break;
	case TIMER_CH2:
		g_T2_CTC_callBackPtr = (volatile void (*)(void))(Timer_cfg->Timer_Cbk_ptr);
    1fac:	ea 81       	ldd	r30, Y+2	; 0x02
    1fae:	fb 81       	ldd	r31, Y+3	; 0x03
    1fb0:	84 81       	ldd	r24, Z+4	; 0x04
    1fb2:	95 81       	ldd	r25, Z+5	; 0x05
    1fb4:	90 93 7d 01 	sts	0x017D, r25
    1fb8:	80 93 7c 01 	sts	0x017C, r24
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <Timer_SetCallBack+0x78>
		break;
	default:
		au8_Ret = E_NOK;
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_Ret;
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	08 95       	ret

00001fd4 <Timer_Start>:

ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
    1fdc:	2c 97       	sbiw	r28, 0x0c	; 12
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	f8 94       	cli
    1fe2:	de bf       	out	0x3e, r29	; 62
    1fe4:	0f be       	out	0x3f, r0	; 63
    1fe6:	cd bf       	out	0x3d, r28	; 61
    1fe8:	8c 83       	std	Y+4, r24	; 0x04
    1fea:	7e 83       	std	Y+6, r23	; 0x06
    1fec:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t au8_Ret = E_OK;
    1fee:	1b 82       	std	Y+3, r1	; 0x03
	/* Local variables to store the value of the prescaler bits in the timer/counter control registers */
	uint8_t au8_t01PreScaler_temp = 0;
    1ff0:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t au8_t2PreScaler_temp = 0;
    1ff2:	19 82       	std	Y+1, r1	; 0x01

	/* A switch case to choose the prescaler of timer0 and timer1 */
	switch(gu8_timer0Timer1PreScaler)
    1ff4:	80 91 6e 01 	lds	r24, 0x016E
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	3c 87       	std	Y+12, r19	; 0x0c
    1ffe:	2b 87       	std	Y+11, r18	; 0x0b
    2000:	8b 85       	ldd	r24, Y+11	; 0x0b
    2002:	9c 85       	ldd	r25, Y+12	; 0x0c
    2004:	82 30       	cpi	r24, 0x02	; 2
    2006:	91 05       	cpc	r25, r1
    2008:	21 f1       	breq	.+72     	; 0x2052 <Timer_Start+0x7e>
    200a:	2b 85       	ldd	r18, Y+11	; 0x0b
    200c:	3c 85       	ldd	r19, Y+12	; 0x0c
    200e:	23 30       	cpi	r18, 0x03	; 3
    2010:	31 05       	cpc	r19, r1
    2012:	54 f4       	brge	.+20     	; 0x2028 <Timer_Start+0x54>
    2014:	8b 85       	ldd	r24, Y+11	; 0x0b
    2016:	9c 85       	ldd	r25, Y+12	; 0x0c
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	b1 f0       	breq	.+44     	; 0x2048 <Timer_Start+0x74>
    201c:	2b 85       	ldd	r18, Y+11	; 0x0b
    201e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2020:	21 30       	cpi	r18, 0x01	; 1
    2022:	31 05       	cpc	r19, r1
    2024:	99 f0       	breq	.+38     	; 0x204c <Timer_Start+0x78>
    2026:	21 c0       	rjmp	.+66     	; 0x206a <Timer_Start+0x96>
    2028:	8b 85       	ldd	r24, Y+11	; 0x0b
    202a:	9c 85       	ldd	r25, Y+12	; 0x0c
    202c:	86 30       	cpi	r24, 0x06	; 6
    202e:	91 05       	cpc	r25, r1
    2030:	b1 f0       	breq	.+44     	; 0x205e <Timer_Start+0x8a>
    2032:	2b 85       	ldd	r18, Y+11	; 0x0b
    2034:	3c 85       	ldd	r19, Y+12	; 0x0c
    2036:	27 30       	cpi	r18, 0x07	; 7
    2038:	31 05       	cpc	r19, r1
    203a:	a1 f0       	breq	.+40     	; 0x2064 <Timer_Start+0x90>
    203c:	8b 85       	ldd	r24, Y+11	; 0x0b
    203e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2040:	84 30       	cpi	r24, 0x04	; 4
    2042:	91 05       	cpc	r25, r1
    2044:	49 f0       	breq	.+18     	; 0x2058 <Timer_Start+0x84>
    2046:	11 c0       	rjmp	.+34     	; 0x206a <Timer_Start+0x96>
	{
	case TIMER_NO_CLOCK:
		au8_t01PreScaler_temp = TIMER01_NO_CLOCK;
    2048:	1a 82       	std	Y+2, r1	; 0x02
    204a:	11 c0       	rjmp	.+34     	; 0x206e <Timer_Start+0x9a>
		break;
	case TIMER_PRESCALER_NO:
		au8_t01PreScaler_temp = TIMER01_NO_PRESCALER;
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	8a 83       	std	Y+2, r24	; 0x02
    2050:	0e c0       	rjmp	.+28     	; 0x206e <Timer_Start+0x9a>
		break;
	case TIMER_PRESCALER_8:
		au8_t01PreScaler_temp = TIMER01_8_PRESCALER;
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	8a 83       	std	Y+2, r24	; 0x02
    2056:	0b c0       	rjmp	.+22     	; 0x206e <Timer_Start+0x9a>
		break;
	case TIMER_PRESCALER_64:
		au8_t01PreScaler_temp = TIMER01_64_PRESCALER;
    2058:	83 e0       	ldi	r24, 0x03	; 3
    205a:	8a 83       	std	Y+2, r24	; 0x02
    205c:	08 c0       	rjmp	.+16     	; 0x206e <Timer_Start+0x9a>
		break;
	case TIMER_PRESCALER_256:
		au8_t01PreScaler_temp = TIMER01_256_PRESCALER;
    205e:	84 e0       	ldi	r24, 0x04	; 4
    2060:	8a 83       	std	Y+2, r24	; 0x02
    2062:	05 c0       	rjmp	.+10     	; 0x206e <Timer_Start+0x9a>
		break;
	case TIMER_PRESCALER_1024:
		au8_t01PreScaler_temp = TIMER01_1024_PRESCALER;
    2064:	85 e0       	ldi	r24, 0x05	; 5
    2066:	8a 83       	std	Y+2, r24	; 0x02
    2068:	02 c0       	rjmp	.+4      	; 0x206e <Timer_Start+0x9a>
		break;
	default:
		au8_Ret = E_NOK;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}

	/* A switch case to choose the prescaler of timer2 */
	switch(gu8_timer2PreScaler)
    206e:	80 91 6f 01 	lds	r24, 0x016F
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	3a 87       	std	Y+10, r19	; 0x0a
    2078:	29 87       	std	Y+9, r18	; 0x09
    207a:	89 85       	ldd	r24, Y+9	; 0x09
    207c:	9a 85       	ldd	r25, Y+10	; 0x0a
    207e:	83 30       	cpi	r24, 0x03	; 3
    2080:	91 05       	cpc	r25, r1
    2082:	89 f1       	breq	.+98     	; 0x20e6 <Timer_Start+0x112>
    2084:	29 85       	ldd	r18, Y+9	; 0x09
    2086:	3a 85       	ldd	r19, Y+10	; 0x0a
    2088:	24 30       	cpi	r18, 0x04	; 4
    208a:	31 05       	cpc	r19, r1
    208c:	7c f4       	brge	.+30     	; 0x20ac <Timer_Start+0xd8>
    208e:	89 85       	ldd	r24, Y+9	; 0x09
    2090:	9a 85       	ldd	r25, Y+10	; 0x0a
    2092:	81 30       	cpi	r24, 0x01	; 1
    2094:	91 05       	cpc	r25, r1
    2096:	09 f1       	breq	.+66     	; 0x20da <Timer_Start+0x106>
    2098:	29 85       	ldd	r18, Y+9	; 0x09
    209a:	3a 85       	ldd	r19, Y+10	; 0x0a
    209c:	22 30       	cpi	r18, 0x02	; 2
    209e:	31 05       	cpc	r19, r1
    20a0:	fc f4       	brge	.+62     	; 0x20e0 <Timer_Start+0x10c>
    20a2:	89 85       	ldd	r24, Y+9	; 0x09
    20a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	b1 f0       	breq	.+44     	; 0x20d6 <Timer_Start+0x102>
    20aa:	2c c0       	rjmp	.+88     	; 0x2104 <Timer_Start+0x130>
    20ac:	29 85       	ldd	r18, Y+9	; 0x09
    20ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    20b0:	25 30       	cpi	r18, 0x05	; 5
    20b2:	31 05       	cpc	r19, r1
    20b4:	f1 f0       	breq	.+60     	; 0x20f2 <Timer_Start+0x11e>
    20b6:	89 85       	ldd	r24, Y+9	; 0x09
    20b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ba:	85 30       	cpi	r24, 0x05	; 5
    20bc:	91 05       	cpc	r25, r1
    20be:	b4 f0       	brlt	.+44     	; 0x20ec <Timer_Start+0x118>
    20c0:	29 85       	ldd	r18, Y+9	; 0x09
    20c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    20c4:	26 30       	cpi	r18, 0x06	; 6
    20c6:	31 05       	cpc	r19, r1
    20c8:	b9 f0       	breq	.+46     	; 0x20f8 <Timer_Start+0x124>
    20ca:	89 85       	ldd	r24, Y+9	; 0x09
    20cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ce:	87 30       	cpi	r24, 0x07	; 7
    20d0:	91 05       	cpc	r25, r1
    20d2:	a9 f0       	breq	.+42     	; 0x20fe <Timer_Start+0x12a>
    20d4:	17 c0       	rjmp	.+46     	; 0x2104 <Timer_Start+0x130>
	{
	case TIMER_NO_CLOCK:
		au8_t2PreScaler_temp = TIMER2_NO_CLOCK;
    20d6:	19 82       	std	Y+1, r1	; 0x01
    20d8:	17 c0       	rjmp	.+46     	; 0x2108 <Timer_Start+0x134>
		break;
	case TIMER_PRESCALER_NO:
		au8_t2PreScaler_temp = TIMER2_NO_PRESCALER;
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	14 c0       	rjmp	.+40     	; 0x2108 <Timer_Start+0x134>
		break;
	case TIMER_PRESCALER_8:
		au8_t2PreScaler_temp = TIMER2_8_PRESCALER;
    20e0:	82 e0       	ldi	r24, 0x02	; 2
    20e2:	89 83       	std	Y+1, r24	; 0x01
    20e4:	11 c0       	rjmp	.+34     	; 0x2108 <Timer_Start+0x134>
		break;
	case TIMER_PRESCALER_32:
		au8_t2PreScaler_temp = TIMER2_32_PRESCALER;
    20e6:	83 e0       	ldi	r24, 0x03	; 3
    20e8:	89 83       	std	Y+1, r24	; 0x01
    20ea:	0e c0       	rjmp	.+28     	; 0x2108 <Timer_Start+0x134>
		break;
	case TIMER_PRESCALER_64:
		au8_t2PreScaler_temp = TIMER2_64_PRESCALER;
    20ec:	84 e0       	ldi	r24, 0x04	; 4
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	0b c0       	rjmp	.+22     	; 0x2108 <Timer_Start+0x134>
		break;
	case TIMER_PRESCALER_128:
		au8_t2PreScaler_temp = TIMER2_128_PRESCALER;
    20f2:	85 e0       	ldi	r24, 0x05	; 5
    20f4:	89 83       	std	Y+1, r24	; 0x01
    20f6:	08 c0       	rjmp	.+16     	; 0x2108 <Timer_Start+0x134>
		break;
	case TIMER_PRESCALER_256:
		au8_t2PreScaler_temp = TIMER2_256_PRESCALER;
    20f8:	86 e0       	ldi	r24, 0x06	; 6
    20fa:	89 83       	std	Y+1, r24	; 0x01
    20fc:	05 c0       	rjmp	.+10     	; 0x2108 <Timer_Start+0x134>
		break;
	case TIMER_PRESCALER_1024:
		au8_t2PreScaler_temp = TIMER2_1024_PRESCALER;
    20fe:	87 e0       	ldi	r24, 0x07	; 7
    2100:	89 83       	std	Y+1, r24	; 0x01
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <Timer_Start+0x134>
		break;
	default:
		au8_Ret = E_NOK;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}

	/* A switch case to decide which timer to start */
	switch(Timer_CH_NO)
    2108:	8c 81       	ldd	r24, Y+4	; 0x04
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	38 87       	std	Y+8, r19	; 0x08
    2110:	2f 83       	std	Y+7, r18	; 0x07
    2112:	8f 81       	ldd	r24, Y+7	; 0x07
    2114:	98 85       	ldd	r25, Y+8	; 0x08
    2116:	81 30       	cpi	r24, 0x01	; 1
    2118:	91 05       	cpc	r25, r1
    211a:	c1 f0       	breq	.+48     	; 0x214c <Timer_Start+0x178>
    211c:	2f 81       	ldd	r18, Y+7	; 0x07
    211e:	38 85       	ldd	r19, Y+8	; 0x08
    2120:	22 30       	cpi	r18, 0x02	; 2
    2122:	31 05       	cpc	r19, r1
    2124:	21 f1       	breq	.+72     	; 0x216e <Timer_Start+0x19a>
    2126:	8f 81       	ldd	r24, Y+7	; 0x07
    2128:	98 85       	ldd	r25, Y+8	; 0x08
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	79 f5       	brne	.+94     	; 0x218c <Timer_Start+0x1b8>
	{
	case TIMER_CH0:
		/* Providing the chosen prescaler value to the timer/counter control register */
		TCCR0_R = (TCCR0_R & TIMER_PRESCALER_MASK) | au8_t01PreScaler_temp;
    212e:	a3 e5       	ldi	r26, 0x53	; 83
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e3 e5       	ldi	r30, 0x53	; 83
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	98 2f       	mov	r25, r24
    213a:	98 7f       	andi	r25, 0xF8	; 248
    213c:	8a 81       	ldd	r24, Y+2	; 0x02
    213e:	89 2b       	or	r24, r25
    2140:	8c 93       	st	X, r24
		/* Providing the output compare value for CTC mode */
		OCR0_R = (uint8_t)Timer_Count;
    2142:	ec e5       	ldi	r30, 0x5C	; 92
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	8d 81       	ldd	r24, Y+5	; 0x05
    2148:	80 83       	st	Z, r24
    214a:	22 c0       	rjmp	.+68     	; 0x2190 <Timer_Start+0x1bc>
		break;
	case TIMER_CH1:
		/* Providing the chosen prescaler value to the timer/counter control register */
		TCCR1B_R = (TCCR1B_R & TIMER_PRESCALER_MASK) | au8_t01PreScaler_temp;
    214c:	ae e4       	ldi	r26, 0x4E	; 78
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	ee e4       	ldi	r30, 0x4E	; 78
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	98 2f       	mov	r25, r24
    2158:	98 7f       	andi	r25, 0xF8	; 248
    215a:	8a 81       	ldd	r24, Y+2	; 0x02
    215c:	89 2b       	or	r24, r25
    215e:	8c 93       	st	X, r24
		/* Providing the output compare value for CTC mode */
		OCR1A_R = Timer_Count;
    2160:	ea e4       	ldi	r30, 0x4A	; 74
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	8d 81       	ldd	r24, Y+5	; 0x05
    2166:	9e 81       	ldd	r25, Y+6	; 0x06
    2168:	91 83       	std	Z+1, r25	; 0x01
    216a:	80 83       	st	Z, r24
    216c:	11 c0       	rjmp	.+34     	; 0x2190 <Timer_Start+0x1bc>
		break;
	case TIMER_CH2:
		/* Providing the chosen prescaler value to the timer/counter control register */
		TCCR2_R = (TCCR2_R & TIMER_PRESCALER_MASK) | au8_t2PreScaler_temp;
    216e:	a5 e4       	ldi	r26, 0x45	; 69
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e5 e4       	ldi	r30, 0x45	; 69
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	98 2f       	mov	r25, r24
    217a:	98 7f       	andi	r25, 0xF8	; 248
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	89 2b       	or	r24, r25
    2180:	8c 93       	st	X, r24
		/* Providing the output compare value for CTC mode */
		OCR2_R = (uint8_t)Timer_Count;
    2182:	e3 e4       	ldi	r30, 0x43	; 67
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	8d 81       	ldd	r24, Y+5	; 0x05
    2188:	80 83       	st	Z, r24
    218a:	02 c0       	rjmp	.+4      	; 0x2190 <Timer_Start+0x1bc>
		break;
	default:
		au8_Ret = E_NOK;
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}

	return au8_Ret;
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2192:	2c 96       	adiw	r28, 0x0c	; 12
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	de bf       	out	0x3e, r29	; 62
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	cd bf       	out	0x3d, r28	; 61
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <Timer_Stop>:

ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <Timer_Stop+0x6>
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <Timer_Stop+0x8>
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t au8_Ret = E_OK;
    21b2:	19 82       	std	Y+1, r1	; 0x01
	/* A switch case to decide which timer to be stopped */
	switch(Timer_CH_NO)
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	28 2f       	mov	r18, r24
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	3c 83       	std	Y+4, r19	; 0x04
    21bc:	2b 83       	std	Y+3, r18	; 0x03
    21be:	8b 81       	ldd	r24, Y+3	; 0x03
    21c0:	9c 81       	ldd	r25, Y+4	; 0x04
    21c2:	81 30       	cpi	r24, 0x01	; 1
    21c4:	91 05       	cpc	r25, r1
    21c6:	19 f1       	breq	.+70     	; 0x220e <Timer_Stop+0x6a>
    21c8:	2b 81       	ldd	r18, Y+3	; 0x03
    21ca:	3c 81       	ldd	r19, Y+4	; 0x04
    21cc:	22 30       	cpi	r18, 0x02	; 2
    21ce:	31 05       	cpc	r19, r1
    21d0:	c1 f1       	breq	.+112    	; 0x2242 <Timer_Stop+0x9e>
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	9c 81       	ldd	r25, Y+4	; 0x04
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	09 f0       	breq	.+2      	; 0x21dc <Timer_Stop+0x38>
    21da:	4c c0       	rjmp	.+152    	; 0x2274 <Timer_Stop+0xd0>
	{
	case TIMER_CH0:
		/* Clearing the prescaler bits the timer/counter control register */
		CLEAR_BIT(TCCR0_R, CS00);
    21dc:	a3 e5       	ldi	r26, 0x53	; 83
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e3 e5       	ldi	r30, 0x53	; 83
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	8e 7f       	andi	r24, 0xFE	; 254
    21e8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0_R, CS01);
    21ea:	a3 e5       	ldi	r26, 0x53	; 83
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e3 e5       	ldi	r30, 0x53	; 83
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	8d 7f       	andi	r24, 0xFD	; 253
    21f6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0_R, CS02);
    21f8:	a3 e5       	ldi	r26, 0x53	; 83
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e3 e5       	ldi	r30, 0x53	; 83
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	8b 7f       	andi	r24, 0xFB	; 251
    2204:	8c 93       	st	X, r24
		/* Zeroing the timer/counter ticks for the next start operation */
		TCNT0_R = 0;
    2206:	e2 e5       	ldi	r30, 0x52	; 82
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	10 82       	st	Z, r1
    220c:	35 c0       	rjmp	.+106    	; 0x2278 <Timer_Stop+0xd4>
		break;
	case TIMER_CH1:
		/* Clearing the prescaler bits the timer/counter control register */
		CLEAR_BIT(TCCR1B_R, CS10);
    220e:	ae e4       	ldi	r26, 0x4E	; 78
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	ee e4       	ldi	r30, 0x4E	; 78
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	8e 7f       	andi	r24, 0xFE	; 254
    221a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B_R, CS11);
    221c:	ae e4       	ldi	r26, 0x4E	; 78
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	ee e4       	ldi	r30, 0x4E	; 78
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	8d 7f       	andi	r24, 0xFD	; 253
    2228:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B_R, CS12);
    222a:	ae e4       	ldi	r26, 0x4E	; 78
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	ee e4       	ldi	r30, 0x4E	; 78
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	8b 7f       	andi	r24, 0xFB	; 251
    2236:	8c 93       	st	X, r24
		/* Zeroing the timer/counter ticks for the next start operation */
		TCNT1_R = 0;
    2238:	ec e4       	ldi	r30, 0x4C	; 76
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	11 82       	std	Z+1, r1	; 0x01
    223e:	10 82       	st	Z, r1
    2240:	1b c0       	rjmp	.+54     	; 0x2278 <Timer_Stop+0xd4>
		break;
	case TIMER_CH2:
		/* Clearing the prescaler bits the timer/counter control register */
		CLEAR_BIT(TCCR2_R, CS20);
    2242:	a5 e4       	ldi	r26, 0x45	; 69
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e5 e4       	ldi	r30, 0x45	; 69
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	8e 7f       	andi	r24, 0xFE	; 254
    224e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2_R, CS21);
    2250:	a5 e4       	ldi	r26, 0x45	; 69
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e5 e4       	ldi	r30, 0x45	; 69
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	8d 7f       	andi	r24, 0xFD	; 253
    225c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2_R, CS22);
    225e:	a5 e4       	ldi	r26, 0x45	; 69
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	e5 e4       	ldi	r30, 0x45	; 69
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	8b 7f       	andi	r24, 0xFB	; 251
    226a:	8c 93       	st	X, r24
		/* Zeroing the timer/counter ticks for the next start operation */
		TCNT2_R = 0;
    226c:	e4 e4       	ldi	r30, 0x44	; 68
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	10 82       	st	Z, r1
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <Timer_Stop+0xd4>
		break;
	default:
		au8_Ret = E_NOK;
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_Ret;
    2278:	89 81       	ldd	r24, Y+1	; 0x01
}
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <Timer_GetStatus>:

ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO, bool* Data)
{
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	00 d0       	rcall	.+0      	; 0x228e <Timer_GetStatus+0x6>
    228e:	00 d0       	rcall	.+0      	; 0x2290 <Timer_GetStatus+0x8>
    2290:	00 d0       	rcall	.+0      	; 0x2292 <Timer_GetStatus+0xa>
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	8a 83       	std	Y+2, r24	; 0x02
    2298:	7c 83       	std	Y+4, r23	; 0x04
    229a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_Ret = E_OK;
    229c:	19 82       	std	Y+1, r1	; 0x01
	/* A switch case to decide which timer to get its status */
	switch(Timer_CH_NO)
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	28 2f       	mov	r18, r24
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	3e 83       	std	Y+6, r19	; 0x06
    22a6:	2d 83       	std	Y+5, r18	; 0x05
    22a8:	8d 81       	ldd	r24, Y+5	; 0x05
    22aa:	9e 81       	ldd	r25, Y+6	; 0x06
    22ac:	81 30       	cpi	r24, 0x01	; 1
    22ae:	91 05       	cpc	r25, r1
    22b0:	89 f0       	breq	.+34     	; 0x22d4 <Timer_GetStatus+0x4c>
    22b2:	2d 81       	ldd	r18, Y+5	; 0x05
    22b4:	3e 81       	ldd	r19, Y+6	; 0x06
    22b6:	22 30       	cpi	r18, 0x02	; 2
    22b8:	31 05       	cpc	r19, r1
    22ba:	a1 f0       	breq	.+40     	; 0x22e4 <Timer_GetStatus+0x5c>
    22bc:	8d 81       	ldd	r24, Y+5	; 0x05
    22be:	9e 81       	ldd	r25, Y+6	; 0x06
    22c0:	00 97       	sbiw	r24, 0x00	; 0
    22c2:	c1 f4       	brne	.+48     	; 0x22f4 <Timer_GetStatus+0x6c>
	{
	case TIMER_CH0:
		*Data = BIT_IS_SET(TIFR_R, OCF0);
    22c4:	e8 e5       	ldi	r30, 0x58	; 88
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	82 70       	andi	r24, 0x02	; 2
    22cc:	eb 81       	ldd	r30, Y+3	; 0x03
    22ce:	fc 81       	ldd	r31, Y+4	; 0x04
    22d0:	80 83       	st	Z, r24
    22d2:	12 c0       	rjmp	.+36     	; 0x22f8 <Timer_GetStatus+0x70>
		break;
	case TIMER_CH1:
		*Data = BIT_IS_SET(TIFR_R, OCF1A);
    22d4:	e8 e5       	ldi	r30, 0x58	; 88
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	80 71       	andi	r24, 0x10	; 16
    22dc:	eb 81       	ldd	r30, Y+3	; 0x03
    22de:	fc 81       	ldd	r31, Y+4	; 0x04
    22e0:	80 83       	st	Z, r24
    22e2:	0a c0       	rjmp	.+20     	; 0x22f8 <Timer_GetStatus+0x70>
		break;
	case TIMER_CH2:
		*Data = BIT_IS_SET(TIFR_R, OCF2);
    22e4:	e8 e5       	ldi	r30, 0x58	; 88
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	80 78       	andi	r24, 0x80	; 128
    22ec:	eb 81       	ldd	r30, Y+3	; 0x03
    22ee:	fc 81       	ldd	r31, Y+4	; 0x04
    22f0:	80 83       	st	Z, r24
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <Timer_GetStatus+0x70>
		break;
	default:
		au8_Ret = E_NOK;
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_Ret;
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    22fa:	26 96       	adiw	r28, 0x06	; 6
    22fc:	0f b6       	in	r0, 0x3f	; 63
    22fe:	f8 94       	cli
    2300:	de bf       	out	0x3e, r29	; 62
    2302:	0f be       	out	0x3f, r0	; 63
    2304:	cd bf       	out	0x3d, r28	; 61
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	08 95       	ret

0000230c <Timer_GetValue>:

ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
    230c:	df 93       	push	r29
    230e:	cf 93       	push	r28
    2310:	00 d0       	rcall	.+0      	; 0x2312 <Timer_GetValue+0x6>
    2312:	00 d0       	rcall	.+0      	; 0x2314 <Timer_GetValue+0x8>
    2314:	00 d0       	rcall	.+0      	; 0x2316 <Timer_GetValue+0xa>
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
    231a:	8a 83       	std	Y+2, r24	; 0x02
    231c:	7c 83       	std	Y+4, r23	; 0x04
    231e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_Ret = E_OK;
    2320:	19 82       	std	Y+1, r1	; 0x01
	/* A switch case to decide which timer to get its counter current value */
	switch(Timer_CH_NO)
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
    2324:	28 2f       	mov	r18, r24
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	3e 83       	std	Y+6, r19	; 0x06
    232a:	2d 83       	std	Y+5, r18	; 0x05
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	9e 81       	ldd	r25, Y+6	; 0x06
    2330:	81 30       	cpi	r24, 0x01	; 1
    2332:	91 05       	cpc	r25, r1
    2334:	99 f0       	breq	.+38     	; 0x235c <Timer_GetValue+0x50>
    2336:	2d 81       	ldd	r18, Y+5	; 0x05
    2338:	3e 81       	ldd	r19, Y+6	; 0x06
    233a:	22 30       	cpi	r18, 0x02	; 2
    233c:	31 05       	cpc	r19, r1
    233e:	b9 f0       	breq	.+46     	; 0x236e <Timer_GetValue+0x62>
    2340:	8d 81       	ldd	r24, Y+5	; 0x05
    2342:	9e 81       	ldd	r25, Y+6	; 0x06
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	e9 f4       	brne	.+58     	; 0x2382 <Timer_GetValue+0x76>
	{
	case TIMER_CH0:
		*Data = TCNT0_R;
    2348:	e2 e5       	ldi	r30, 0x52	; 82
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	88 2f       	mov	r24, r24
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	eb 81       	ldd	r30, Y+3	; 0x03
    2354:	fc 81       	ldd	r31, Y+4	; 0x04
    2356:	91 83       	std	Z+1, r25	; 0x01
    2358:	80 83       	st	Z, r24
    235a:	15 c0       	rjmp	.+42     	; 0x2386 <Timer_GetValue+0x7a>
		break;
	case TIMER_CH1:
		*Data = TCNT1_R;
    235c:	ec e4       	ldi	r30, 0x4C	; 76
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	91 81       	ldd	r25, Z+1	; 0x01
    2364:	eb 81       	ldd	r30, Y+3	; 0x03
    2366:	fc 81       	ldd	r31, Y+4	; 0x04
    2368:	91 83       	std	Z+1, r25	; 0x01
    236a:	80 83       	st	Z, r24
    236c:	0c c0       	rjmp	.+24     	; 0x2386 <Timer_GetValue+0x7a>
		break;
	case TIMER_CH2:
		*Data = TCNT2_R;
    236e:	e4 e4       	ldi	r30, 0x44	; 68
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	88 2f       	mov	r24, r24
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	eb 81       	ldd	r30, Y+3	; 0x03
    237a:	fc 81       	ldd	r31, Y+4	; 0x04
    237c:	91 83       	std	Z+1, r25	; 0x01
    237e:	80 83       	st	Z, r24
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <Timer_GetValue+0x7a>
		break;
	default:
		au8_Ret = E_NOK;
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_Ret;
    2386:	89 81       	ldd	r24, Y+1	; 0x01
}
    2388:	26 96       	adiw	r28, 0x06	; 6
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <Timer_SetValue>:

ERROR_STATUS Timer_SetValue(uint8_t Timer_CH_NO, uint16_t Data)
{
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <Timer_SetValue+0x6>
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <Timer_SetValue+0x8>
    23a2:	00 d0       	rcall	.+0      	; 0x23a4 <Timer_SetValue+0xa>
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	8a 83       	std	Y+2, r24	; 0x02
    23aa:	7c 83       	std	Y+4, r23	; 0x04
    23ac:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_Ret = E_OK;
    23ae:	19 82       	std	Y+1, r1	; 0x01
	/* A switch case to decide which timer to set its counter value */
	switch(Timer_CH_NO)
    23b0:	8a 81       	ldd	r24, Y+2	; 0x02
    23b2:	28 2f       	mov	r18, r24
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	3e 83       	std	Y+6, r19	; 0x06
    23b8:	2d 83       	std	Y+5, r18	; 0x05
    23ba:	8d 81       	ldd	r24, Y+5	; 0x05
    23bc:	9e 81       	ldd	r25, Y+6	; 0x06
    23be:	81 30       	cpi	r24, 0x01	; 1
    23c0:	91 05       	cpc	r25, r1
    23c2:	71 f0       	breq	.+28     	; 0x23e0 <Timer_SetValue+0x46>
    23c4:	2d 81       	ldd	r18, Y+5	; 0x05
    23c6:	3e 81       	ldd	r19, Y+6	; 0x06
    23c8:	22 30       	cpi	r18, 0x02	; 2
    23ca:	31 05       	cpc	r19, r1
    23cc:	81 f0       	breq	.+32     	; 0x23ee <Timer_SetValue+0x54>
    23ce:	8d 81       	ldd	r24, Y+5	; 0x05
    23d0:	9e 81       	ldd	r25, Y+6	; 0x06
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	89 f4       	brne	.+34     	; 0x23f8 <Timer_SetValue+0x5e>
	{
	case TIMER_CH0:
		TCNT0_R = (uint8_t)Data;
    23d6:	e2 e5       	ldi	r30, 0x52	; 82
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	80 83       	st	Z, r24
    23de:	0e c0       	rjmp	.+28     	; 0x23fc <Timer_SetValue+0x62>
		break;
	case TIMER_CH1:
		TCNT1_R = Data;
    23e0:	ec e4       	ldi	r30, 0x4C	; 76
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	9c 81       	ldd	r25, Y+4	; 0x04
    23e8:	91 83       	std	Z+1, r25	; 0x01
    23ea:	80 83       	st	Z, r24
    23ec:	07 c0       	rjmp	.+14     	; 0x23fc <Timer_SetValue+0x62>
		break;
	case TIMER_CH2:
		TCNT2_R = (uint8_t)Data;
    23ee:	e4 e4       	ldi	r30, 0x44	; 68
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	80 83       	st	Z, r24
    23f6:	02 c0       	rjmp	.+4      	; 0x23fc <Timer_SetValue+0x62>
		break;
	default:
		au8_Ret = E_NOK;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_Ret;
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    23fe:	26 96       	adiw	r28, 0x06	; 6
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <LCD_init>:

/*
 * Description : A Function to Initialize the LCD Driver.
 */
void LCD_init(void)
{
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1 << E) | (1 << RS) | (1 << RW);
    2418:	aa e3       	ldi	r26, 0x3A	; 58
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	ea e3       	ldi	r30, 0x3A	; 58
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	8e 60       	ori	r24, 0x0E	; 14
    2424:	8c 93       	st	X, r24
#if(DATA_BITS_MODE == 8)
	LCD_DATA_PORT_DIR = 0xFF;
	LCD_sendCommand(TWO_LINE_LCD_EIGHT_BIT_MODE);
#elif(DATA_BITS_MODE == 4)
#ifdef UPPER_PORT_BITS
	LCD_DATA_PORT_DIR |= 0xF0;
    2426:	aa e3       	ldi	r26, 0x3A	; 58
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	ea e3       	ldi	r30, 0x3A	; 58
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	80 6f       	ori	r24, 0xF0	; 240
    2432:	8c 93       	st	X, r24
#else
	LCD_DATA_PORT_DIR |= 0x0F;
#endif
	LCD_sendCommand(FOUR_BITS_DATA_MODE_ACTIVATED);
    2434:	82 e0       	ldi	r24, 0x02	; 2
    2436:	0e 94 29 12 	call	0x2452	; 0x2452 <LCD_sendCommand>
	LCD_sendCommand(TWO_LINE_LCD_FOUR_BIT_MODE);
    243a:	88 e2       	ldi	r24, 0x28	; 40
    243c:	0e 94 29 12 	call	0x2452	; 0x2452 <LCD_sendCommand>
#endif
	LCD_sendCommand(CURSOR_OFF);
    2440:	8c e0       	ldi	r24, 0x0C	; 12
    2442:	0e 94 29 12 	call	0x2452	; 0x2452 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND);
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	0e 94 29 12 	call	0x2452	; 0x2452 <LCD_sendCommand>
}
    244c:	cf 91       	pop	r28
    244e:	df 91       	pop	r29
    2450:	08 95       	ret

00002452 <LCD_sendCommand>:

/*
 * Description : A Function to send a Command.
 */
void LCD_sendCommand(uint8_t command)
{
    2452:	0f 93       	push	r16
    2454:	1f 93       	push	r17
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
    245e:	c3 56       	subi	r28, 0x63	; 99
    2460:	d0 40       	sbci	r29, 0x00	; 0
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	de bf       	out	0x3e, r29	; 62
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	cd bf       	out	0x3d, r28	; 61
    246c:	fe 01       	movw	r30, r28
    246e:	ed 59       	subi	r30, 0x9D	; 157
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT, RS);
    2474:	ab e3       	ldi	r26, 0x3B	; 59
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	eb e3       	ldi	r30, 0x3B	; 59
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	8d 7f       	andi	r24, 0xFD	; 253
    2480:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, RW);
    2482:	ab e3       	ldi	r26, 0x3B	; 59
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	eb e3       	ldi	r30, 0x3B	; 59
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	8b 7f       	andi	r24, 0xFB	; 251
    248e:	8c 93       	st	X, r24
    2490:	fe 01       	movw	r30, r28
    2492:	e1 5a       	subi	r30, 0xA1	; 161
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	a0 e8       	ldi	r26, 0x80	; 128
    249c:	bf e3       	ldi	r27, 0x3F	; 63
    249e:	80 83       	st	Z, r24
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	a2 83       	std	Z+2, r26	; 0x02
    24a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a6:	8e 01       	movw	r16, r28
    24a8:	05 5a       	subi	r16, 0xA5	; 165
    24aa:	1f 4f       	sbci	r17, 0xFF	; 255
    24ac:	fe 01       	movw	r30, r28
    24ae:	e1 5a       	subi	r30, 0xA1	; 161
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	60 81       	ld	r22, Z
    24b4:	71 81       	ldd	r23, Z+1	; 0x01
    24b6:	82 81       	ldd	r24, Z+2	; 0x02
    24b8:	93 81       	ldd	r25, Z+3	; 0x03
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	4a e7       	ldi	r20, 0x7A	; 122
    24c0:	55 e4       	ldi	r21, 0x45	; 69
    24c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	f8 01       	movw	r30, r16
    24cc:	80 83       	st	Z, r24
    24ce:	91 83       	std	Z+1, r25	; 0x01
    24d0:	a2 83       	std	Z+2, r26	; 0x02
    24d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24d4:	fe 01       	movw	r30, r28
    24d6:	e5 5a       	subi	r30, 0xA5	; 165
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	60 81       	ld	r22, Z
    24dc:	71 81       	ldd	r23, Z+1	; 0x01
    24de:	82 81       	ldd	r24, Z+2	; 0x02
    24e0:	93 81       	ldd	r25, Z+3	; 0x03
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e8       	ldi	r20, 0x80	; 128
    24e8:	5f e3       	ldi	r21, 0x3F	; 63
    24ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ee:	88 23       	and	r24, r24
    24f0:	44 f4       	brge	.+16     	; 0x2502 <LCD_sendCommand+0xb0>
		__ticks = 1;
    24f2:	fe 01       	movw	r30, r28
    24f4:	e7 5a       	subi	r30, 0xA7	; 167
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	80 83       	st	Z, r24
    2500:	64 c0       	rjmp	.+200    	; 0x25ca <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    2502:	fe 01       	movw	r30, r28
    2504:	e5 5a       	subi	r30, 0xA5	; 165
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	60 81       	ld	r22, Z
    250a:	71 81       	ldd	r23, Z+1	; 0x01
    250c:	82 81       	ldd	r24, Z+2	; 0x02
    250e:	93 81       	ldd	r25, Z+3	; 0x03
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	3f ef       	ldi	r19, 0xFF	; 255
    2514:	4f e7       	ldi	r20, 0x7F	; 127
    2516:	57 e4       	ldi	r21, 0x47	; 71
    2518:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    251c:	18 16       	cp	r1, r24
    251e:	0c f0       	brlt	.+2      	; 0x2522 <LCD_sendCommand+0xd0>
    2520:	43 c0       	rjmp	.+134    	; 0x25a8 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2522:	fe 01       	movw	r30, r28
    2524:	e1 5a       	subi	r30, 0xA1	; 161
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	60 81       	ld	r22, Z
    252a:	71 81       	ldd	r23, Z+1	; 0x01
    252c:	82 81       	ldd	r24, Z+2	; 0x02
    252e:	93 81       	ldd	r25, Z+3	; 0x03
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e2       	ldi	r20, 0x20	; 32
    2536:	51 e4       	ldi	r21, 0x41	; 65
    2538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	8e 01       	movw	r16, r28
    2542:	07 5a       	subi	r16, 0xA7	; 167
    2544:	1f 4f       	sbci	r17, 0xFF	; 255
    2546:	bc 01       	movw	r22, r24
    2548:	cd 01       	movw	r24, r26
    254a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	f8 01       	movw	r30, r16
    2554:	91 83       	std	Z+1, r25	; 0x01
    2556:	80 83       	st	Z, r24
    2558:	1f c0       	rjmp	.+62     	; 0x2598 <LCD_sendCommand+0x146>
    255a:	fe 01       	movw	r30, r28
    255c:	e9 5a       	subi	r30, 0xA9	; 169
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	80 e9       	ldi	r24, 0x90	; 144
    2562:	91 e0       	ldi	r25, 0x01	; 1
    2564:	91 83       	std	Z+1, r25	; 0x01
    2566:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2568:	fe 01       	movw	r30, r28
    256a:	e9 5a       	subi	r30, 0xA9	; 169
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	80 81       	ld	r24, Z
    2570:	91 81       	ldd	r25, Z+1	; 0x01
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	f1 f7       	brne	.-4      	; 0x2572 <LCD_sendCommand+0x120>
    2576:	fe 01       	movw	r30, r28
    2578:	e9 5a       	subi	r30, 0xA9	; 169
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	91 83       	std	Z+1, r25	; 0x01
    257e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2580:	de 01       	movw	r26, r28
    2582:	a7 5a       	subi	r26, 0xA7	; 167
    2584:	bf 4f       	sbci	r27, 0xFF	; 255
    2586:	fe 01       	movw	r30, r28
    2588:	e7 5a       	subi	r30, 0xA7	; 167
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	80 81       	ld	r24, Z
    258e:	91 81       	ldd	r25, Z+1	; 0x01
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	11 96       	adiw	r26, 0x01	; 1
    2594:	9c 93       	st	X, r25
    2596:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2598:	fe 01       	movw	r30, r28
    259a:	e7 5a       	subi	r30, 0xA7	; 167
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	80 81       	ld	r24, Z
    25a0:	91 81       	ldd	r25, Z+1	; 0x01
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	d1 f6       	brne	.-76     	; 0x255a <LCD_sendCommand+0x108>
    25a6:	27 c0       	rjmp	.+78     	; 0x25f6 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a8:	8e 01       	movw	r16, r28
    25aa:	07 5a       	subi	r16, 0xA7	; 167
    25ac:	1f 4f       	sbci	r17, 0xFF	; 255
    25ae:	fe 01       	movw	r30, r28
    25b0:	e5 5a       	subi	r30, 0xA5	; 165
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	60 81       	ld	r22, Z
    25b6:	71 81       	ldd	r23, Z+1	; 0x01
    25b8:	82 81       	ldd	r24, Z+2	; 0x02
    25ba:	93 81       	ldd	r25, Z+3	; 0x03
    25bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	f8 01       	movw	r30, r16
    25c6:	91 83       	std	Z+1, r25	; 0x01
    25c8:	80 83       	st	Z, r24
    25ca:	de 01       	movw	r26, r28
    25cc:	ab 5a       	subi	r26, 0xAB	; 171
    25ce:	bf 4f       	sbci	r27, 0xFF	; 255
    25d0:	fe 01       	movw	r30, r28
    25d2:	e7 5a       	subi	r30, 0xA7	; 167
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	80 81       	ld	r24, Z
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	8d 93       	st	X+, r24
    25dc:	9c 93       	st	X, r25
    25de:	fe 01       	movw	r30, r28
    25e0:	eb 5a       	subi	r30, 0xAB	; 171
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	80 81       	ld	r24, Z
    25e6:	91 81       	ldd	r25, Z+1	; 0x01
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	f1 f7       	brne	.-4      	; 0x25e8 <LCD_sendCommand+0x196>
    25ec:	fe 01       	movw	r30, r28
    25ee:	eb 5a       	subi	r30, 0xAB	; 171
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	91 83       	std	Z+1, r25	; 0x01
    25f4:	80 83       	st	Z, r24
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, E);
    25f6:	ab e3       	ldi	r26, 0x3B	; 59
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	eb e3       	ldi	r30, 0x3B	; 59
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	88 60       	ori	r24, 0x08	; 8
    2602:	8c 93       	st	X, r24
    2604:	fe 01       	movw	r30, r28
    2606:	ef 5a       	subi	r30, 0xAF	; 175
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	a0 e8       	ldi	r26, 0x80	; 128
    2610:	bf e3       	ldi	r27, 0x3F	; 63
    2612:	80 83       	st	Z, r24
    2614:	91 83       	std	Z+1, r25	; 0x01
    2616:	a2 83       	std	Z+2, r26	; 0x02
    2618:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261a:	8e 01       	movw	r16, r28
    261c:	03 5b       	subi	r16, 0xB3	; 179
    261e:	1f 4f       	sbci	r17, 0xFF	; 255
    2620:	fe 01       	movw	r30, r28
    2622:	ef 5a       	subi	r30, 0xAF	; 175
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	60 81       	ld	r22, Z
    2628:	71 81       	ldd	r23, Z+1	; 0x01
    262a:	82 81       	ldd	r24, Z+2	; 0x02
    262c:	93 81       	ldd	r25, Z+3	; 0x03
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	4a e7       	ldi	r20, 0x7A	; 122
    2634:	55 e4       	ldi	r21, 0x45	; 69
    2636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	f8 01       	movw	r30, r16
    2640:	80 83       	st	Z, r24
    2642:	91 83       	std	Z+1, r25	; 0x01
    2644:	a2 83       	std	Z+2, r26	; 0x02
    2646:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2648:	fe 01       	movw	r30, r28
    264a:	e3 5b       	subi	r30, 0xB3	; 179
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	60 81       	ld	r22, Z
    2650:	71 81       	ldd	r23, Z+1	; 0x01
    2652:	82 81       	ldd	r24, Z+2	; 0x02
    2654:	93 81       	ldd	r25, Z+3	; 0x03
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e8       	ldi	r20, 0x80	; 128
    265c:	5f e3       	ldi	r21, 0x3F	; 63
    265e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2662:	88 23       	and	r24, r24
    2664:	44 f4       	brge	.+16     	; 0x2676 <LCD_sendCommand+0x224>
		__ticks = 1;
    2666:	fe 01       	movw	r30, r28
    2668:	e5 5b       	subi	r30, 0xB5	; 181
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	91 83       	std	Z+1, r25	; 0x01
    2672:	80 83       	st	Z, r24
    2674:	64 c0       	rjmp	.+200    	; 0x273e <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    2676:	fe 01       	movw	r30, r28
    2678:	e3 5b       	subi	r30, 0xB3	; 179
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	60 81       	ld	r22, Z
    267e:	71 81       	ldd	r23, Z+1	; 0x01
    2680:	82 81       	ldd	r24, Z+2	; 0x02
    2682:	93 81       	ldd	r25, Z+3	; 0x03
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	3f ef       	ldi	r19, 0xFF	; 255
    2688:	4f e7       	ldi	r20, 0x7F	; 127
    268a:	57 e4       	ldi	r21, 0x47	; 71
    268c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2690:	18 16       	cp	r1, r24
    2692:	0c f0       	brlt	.+2      	; 0x2696 <LCD_sendCommand+0x244>
    2694:	43 c0       	rjmp	.+134    	; 0x271c <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2696:	fe 01       	movw	r30, r28
    2698:	ef 5a       	subi	r30, 0xAF	; 175
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	60 81       	ld	r22, Z
    269e:	71 81       	ldd	r23, Z+1	; 0x01
    26a0:	82 81       	ldd	r24, Z+2	; 0x02
    26a2:	93 81       	ldd	r25, Z+3	; 0x03
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	40 e2       	ldi	r20, 0x20	; 32
    26aa:	51 e4       	ldi	r21, 0x41	; 65
    26ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	8e 01       	movw	r16, r28
    26b6:	05 5b       	subi	r16, 0xB5	; 181
    26b8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ba:	bc 01       	movw	r22, r24
    26bc:	cd 01       	movw	r24, r26
    26be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	f8 01       	movw	r30, r16
    26c8:	91 83       	std	Z+1, r25	; 0x01
    26ca:	80 83       	st	Z, r24
    26cc:	1f c0       	rjmp	.+62     	; 0x270c <LCD_sendCommand+0x2ba>
    26ce:	fe 01       	movw	r30, r28
    26d0:	e7 5b       	subi	r30, 0xB7	; 183
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	80 e9       	ldi	r24, 0x90	; 144
    26d6:	91 e0       	ldi	r25, 0x01	; 1
    26d8:	91 83       	std	Z+1, r25	; 0x01
    26da:	80 83       	st	Z, r24
    26dc:	fe 01       	movw	r30, r28
    26de:	e7 5b       	subi	r30, 0xB7	; 183
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	80 81       	ld	r24, Z
    26e4:	91 81       	ldd	r25, Z+1	; 0x01
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <LCD_sendCommand+0x294>
    26ea:	fe 01       	movw	r30, r28
    26ec:	e7 5b       	subi	r30, 0xB7	; 183
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	91 83       	std	Z+1, r25	; 0x01
    26f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f4:	de 01       	movw	r26, r28
    26f6:	a5 5b       	subi	r26, 0xB5	; 181
    26f8:	bf 4f       	sbci	r27, 0xFF	; 255
    26fa:	fe 01       	movw	r30, r28
    26fc:	e5 5b       	subi	r30, 0xB5	; 181
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	80 81       	ld	r24, Z
    2702:	91 81       	ldd	r25, Z+1	; 0x01
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	11 96       	adiw	r26, 0x01	; 1
    2708:	9c 93       	st	X, r25
    270a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270c:	fe 01       	movw	r30, r28
    270e:	e5 5b       	subi	r30, 0xB5	; 181
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	80 81       	ld	r24, Z
    2714:	91 81       	ldd	r25, Z+1	; 0x01
    2716:	00 97       	sbiw	r24, 0x00	; 0
    2718:	d1 f6       	brne	.-76     	; 0x26ce <LCD_sendCommand+0x27c>
    271a:	27 c0       	rjmp	.+78     	; 0x276a <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271c:	8e 01       	movw	r16, r28
    271e:	05 5b       	subi	r16, 0xB5	; 181
    2720:	1f 4f       	sbci	r17, 0xFF	; 255
    2722:	fe 01       	movw	r30, r28
    2724:	e3 5b       	subi	r30, 0xB3	; 179
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	60 81       	ld	r22, Z
    272a:	71 81       	ldd	r23, Z+1	; 0x01
    272c:	82 81       	ldd	r24, Z+2	; 0x02
    272e:	93 81       	ldd	r25, Z+3	; 0x03
    2730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	f8 01       	movw	r30, r16
    273a:	91 83       	std	Z+1, r25	; 0x01
    273c:	80 83       	st	Z, r24
    273e:	de 01       	movw	r26, r28
    2740:	a9 5b       	subi	r26, 0xB9	; 185
    2742:	bf 4f       	sbci	r27, 0xFF	; 255
    2744:	fe 01       	movw	r30, r28
    2746:	e5 5b       	subi	r30, 0xB5	; 181
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	80 81       	ld	r24, Z
    274c:	91 81       	ldd	r25, Z+1	; 0x01
    274e:	8d 93       	st	X+, r24
    2750:	9c 93       	st	X, r25
    2752:	fe 01       	movw	r30, r28
    2754:	e9 5b       	subi	r30, 0xB9	; 185
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	80 81       	ld	r24, Z
    275a:	91 81       	ldd	r25, Z+1	; 0x01
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	f1 f7       	brne	.-4      	; 0x275c <LCD_sendCommand+0x30a>
    2760:	fe 01       	movw	r30, r28
    2762:	e9 5b       	subi	r30, 0xB9	; 185
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	91 83       	std	Z+1, r25	; 0x01
    2768:	80 83       	st	Z, r24
	_delay_ms(1);
#if(DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command;
#elif(DATA_BITS_MODE == 4)
#ifdef UPPER_PORT_BITS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    276a:	ab e3       	ldi	r26, 0x3B	; 59
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	eb e3       	ldi	r30, 0x3B	; 59
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	98 2f       	mov	r25, r24
    2776:	9f 70       	andi	r25, 0x0F	; 15
    2778:	fe 01       	movw	r30, r28
    277a:	ed 59       	subi	r30, 0x9D	; 157
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	80 81       	ld	r24, Z
    2780:	80 7f       	andi	r24, 0xF0	; 240
    2782:	89 2b       	or	r24, r25
    2784:	8c 93       	st	X, r24
    2786:	fe 01       	movw	r30, r28
    2788:	ed 5b       	subi	r30, 0xBD	; 189
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	a0 e8       	ldi	r26, 0x80	; 128
    2792:	bf e3       	ldi	r27, 0x3F	; 63
    2794:	80 83       	st	Z, r24
    2796:	91 83       	std	Z+1, r25	; 0x01
    2798:	a2 83       	std	Z+2, r26	; 0x02
    279a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    279c:	8e 01       	movw	r16, r28
    279e:	01 5c       	subi	r16, 0xC1	; 193
    27a0:	1f 4f       	sbci	r17, 0xFF	; 255
    27a2:	fe 01       	movw	r30, r28
    27a4:	ed 5b       	subi	r30, 0xBD	; 189
    27a6:	ff 4f       	sbci	r31, 0xFF	; 255
    27a8:	60 81       	ld	r22, Z
    27aa:	71 81       	ldd	r23, Z+1	; 0x01
    27ac:	82 81       	ldd	r24, Z+2	; 0x02
    27ae:	93 81       	ldd	r25, Z+3	; 0x03
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	4a e7       	ldi	r20, 0x7A	; 122
    27b6:	55 e4       	ldi	r21, 0x45	; 69
    27b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	f8 01       	movw	r30, r16
    27c2:	80 83       	st	Z, r24
    27c4:	91 83       	std	Z+1, r25	; 0x01
    27c6:	a2 83       	std	Z+2, r26	; 0x02
    27c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27ca:	fe 01       	movw	r30, r28
    27cc:	ff 96       	adiw	r30, 0x3f	; 63
    27ce:	60 81       	ld	r22, Z
    27d0:	71 81       	ldd	r23, Z+1	; 0x01
    27d2:	82 81       	ldd	r24, Z+2	; 0x02
    27d4:	93 81       	ldd	r25, Z+3	; 0x03
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	40 e8       	ldi	r20, 0x80	; 128
    27dc:	5f e3       	ldi	r21, 0x3F	; 63
    27de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27e2:	88 23       	and	r24, r24
    27e4:	2c f4       	brge	.+10     	; 0x27f0 <LCD_sendCommand+0x39e>
		__ticks = 1;
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	9e af       	std	Y+62, r25	; 0x3e
    27ec:	8d af       	std	Y+61, r24	; 0x3d
    27ee:	46 c0       	rjmp	.+140    	; 0x287c <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    27f0:	fe 01       	movw	r30, r28
    27f2:	ff 96       	adiw	r30, 0x3f	; 63
    27f4:	60 81       	ld	r22, Z
    27f6:	71 81       	ldd	r23, Z+1	; 0x01
    27f8:	82 81       	ldd	r24, Z+2	; 0x02
    27fa:	93 81       	ldd	r25, Z+3	; 0x03
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	3f ef       	ldi	r19, 0xFF	; 255
    2800:	4f e7       	ldi	r20, 0x7F	; 127
    2802:	57 e4       	ldi	r21, 0x47	; 71
    2804:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2808:	18 16       	cp	r1, r24
    280a:	64 f5       	brge	.+88     	; 0x2864 <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    280c:	fe 01       	movw	r30, r28
    280e:	ed 5b       	subi	r30, 0xBD	; 189
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	60 81       	ld	r22, Z
    2814:	71 81       	ldd	r23, Z+1	; 0x01
    2816:	82 81       	ldd	r24, Z+2	; 0x02
    2818:	93 81       	ldd	r25, Z+3	; 0x03
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e2       	ldi	r20, 0x20	; 32
    2820:	51 e4       	ldi	r21, 0x41	; 65
    2822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	bc 01       	movw	r22, r24
    282c:	cd 01       	movw	r24, r26
    282e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	9e af       	std	Y+62, r25	; 0x3e
    2838:	8d af       	std	Y+61, r24	; 0x3d
    283a:	0f c0       	rjmp	.+30     	; 0x285a <LCD_sendCommand+0x408>
    283c:	80 e9       	ldi	r24, 0x90	; 144
    283e:	91 e0       	ldi	r25, 0x01	; 1
    2840:	9c af       	std	Y+60, r25	; 0x3c
    2842:	8b af       	std	Y+59, r24	; 0x3b
    2844:	8b ad       	ldd	r24, Y+59	; 0x3b
    2846:	9c ad       	ldd	r25, Y+60	; 0x3c
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <LCD_sendCommand+0x3f6>
    284c:	9c af       	std	Y+60, r25	; 0x3c
    284e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2850:	8d ad       	ldd	r24, Y+61	; 0x3d
    2852:	9e ad       	ldd	r25, Y+62	; 0x3e
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	9e af       	std	Y+62, r25	; 0x3e
    2858:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285a:	8d ad       	ldd	r24, Y+61	; 0x3d
    285c:	9e ad       	ldd	r25, Y+62	; 0x3e
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	69 f7       	brne	.-38     	; 0x283c <LCD_sendCommand+0x3ea>
    2862:	16 c0       	rjmp	.+44     	; 0x2890 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2864:	fe 01       	movw	r30, r28
    2866:	ff 96       	adiw	r30, 0x3f	; 63
    2868:	60 81       	ld	r22, Z
    286a:	71 81       	ldd	r23, Z+1	; 0x01
    286c:	82 81       	ldd	r24, Z+2	; 0x02
    286e:	93 81       	ldd	r25, Z+3	; 0x03
    2870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	9e af       	std	Y+62, r25	; 0x3e
    287a:	8d af       	std	Y+61, r24	; 0x3d
    287c:	8d ad       	ldd	r24, Y+61	; 0x3d
    287e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2880:	9a af       	std	Y+58, r25	; 0x3a
    2882:	89 af       	std	Y+57, r24	; 0x39
    2884:	89 ad       	ldd	r24, Y+57	; 0x39
    2886:	9a ad       	ldd	r25, Y+58	; 0x3a
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	f1 f7       	brne	.-4      	; 0x2888 <LCD_sendCommand+0x436>
    288c:	9a af       	std	Y+58, r25	; 0x3a
    288e:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT, E);
    2890:	ab e3       	ldi	r26, 0x3B	; 59
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	eb e3       	ldi	r30, 0x3B	; 59
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	87 7f       	andi	r24, 0xF7	; 247
    289c:	8c 93       	st	X, r24
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	a0 e8       	ldi	r26, 0x80	; 128
    28a4:	bf e3       	ldi	r27, 0x3F	; 63
    28a6:	8d ab       	std	Y+53, r24	; 0x35
    28a8:	9e ab       	std	Y+54, r25	; 0x36
    28aa:	af ab       	std	Y+55, r26	; 0x37
    28ac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ae:	6d a9       	ldd	r22, Y+53	; 0x35
    28b0:	7e a9       	ldd	r23, Y+54	; 0x36
    28b2:	8f a9       	ldd	r24, Y+55	; 0x37
    28b4:	98 ad       	ldd	r25, Y+56	; 0x38
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	4a e7       	ldi	r20, 0x7A	; 122
    28bc:	55 e4       	ldi	r21, 0x45	; 69
    28be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	89 ab       	std	Y+49, r24	; 0x31
    28c8:	9a ab       	std	Y+50, r25	; 0x32
    28ca:	ab ab       	std	Y+51, r26	; 0x33
    28cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28ce:	69 a9       	ldd	r22, Y+49	; 0x31
    28d0:	7a a9       	ldd	r23, Y+50	; 0x32
    28d2:	8b a9       	ldd	r24, Y+51	; 0x33
    28d4:	9c a9       	ldd	r25, Y+52	; 0x34
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	40 e8       	ldi	r20, 0x80	; 128
    28dc:	5f e3       	ldi	r21, 0x3F	; 63
    28de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28e2:	88 23       	and	r24, r24
    28e4:	2c f4       	brge	.+10     	; 0x28f0 <LCD_sendCommand+0x49e>
		__ticks = 1;
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	98 ab       	std	Y+48, r25	; 0x30
    28ec:	8f a7       	std	Y+47, r24	; 0x2f
    28ee:	3f c0       	rjmp	.+126    	; 0x296e <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    28f0:	69 a9       	ldd	r22, Y+49	; 0x31
    28f2:	7a a9       	ldd	r23, Y+50	; 0x32
    28f4:	8b a9       	ldd	r24, Y+51	; 0x33
    28f6:	9c a9       	ldd	r25, Y+52	; 0x34
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	3f ef       	ldi	r19, 0xFF	; 255
    28fc:	4f e7       	ldi	r20, 0x7F	; 127
    28fe:	57 e4       	ldi	r21, 0x47	; 71
    2900:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2904:	18 16       	cp	r1, r24
    2906:	4c f5       	brge	.+82     	; 0x295a <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2908:	6d a9       	ldd	r22, Y+53	; 0x35
    290a:	7e a9       	ldd	r23, Y+54	; 0x36
    290c:	8f a9       	ldd	r24, Y+55	; 0x37
    290e:	98 ad       	ldd	r25, Y+56	; 0x38
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	40 e2       	ldi	r20, 0x20	; 32
    2916:	51 e4       	ldi	r21, 0x41	; 65
    2918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	bc 01       	movw	r22, r24
    2922:	cd 01       	movw	r24, r26
    2924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	98 ab       	std	Y+48, r25	; 0x30
    292e:	8f a7       	std	Y+47, r24	; 0x2f
    2930:	0f c0       	rjmp	.+30     	; 0x2950 <LCD_sendCommand+0x4fe>
    2932:	80 e9       	ldi	r24, 0x90	; 144
    2934:	91 e0       	ldi	r25, 0x01	; 1
    2936:	9e a7       	std	Y+46, r25	; 0x2e
    2938:	8d a7       	std	Y+45, r24	; 0x2d
    293a:	8d a5       	ldd	r24, Y+45	; 0x2d
    293c:	9e a5       	ldd	r25, Y+46	; 0x2e
    293e:	01 97       	sbiw	r24, 0x01	; 1
    2940:	f1 f7       	brne	.-4      	; 0x293e <LCD_sendCommand+0x4ec>
    2942:	9e a7       	std	Y+46, r25	; 0x2e
    2944:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2946:	8f a5       	ldd	r24, Y+47	; 0x2f
    2948:	98 a9       	ldd	r25, Y+48	; 0x30
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	98 ab       	std	Y+48, r25	; 0x30
    294e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2950:	8f a5       	ldd	r24, Y+47	; 0x2f
    2952:	98 a9       	ldd	r25, Y+48	; 0x30
    2954:	00 97       	sbiw	r24, 0x00	; 0
    2956:	69 f7       	brne	.-38     	; 0x2932 <LCD_sendCommand+0x4e0>
    2958:	14 c0       	rjmp	.+40     	; 0x2982 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    295a:	69 a9       	ldd	r22, Y+49	; 0x31
    295c:	7a a9       	ldd	r23, Y+50	; 0x32
    295e:	8b a9       	ldd	r24, Y+51	; 0x33
    2960:	9c a9       	ldd	r25, Y+52	; 0x34
    2962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	98 ab       	std	Y+48, r25	; 0x30
    296c:	8f a7       	std	Y+47, r24	; 0x2f
    296e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2970:	98 a9       	ldd	r25, Y+48	; 0x30
    2972:	9c a7       	std	Y+44, r25	; 0x2c
    2974:	8b a7       	std	Y+43, r24	; 0x2b
    2976:	8b a5       	ldd	r24, Y+43	; 0x2b
    2978:	9c a5       	ldd	r25, Y+44	; 0x2c
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	f1 f7       	brne	.-4      	; 0x297a <LCD_sendCommand+0x528>
    297e:	9c a7       	std	Y+44, r25	; 0x2c
    2980:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, E);
    2982:	ab e3       	ldi	r26, 0x3B	; 59
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	eb e3       	ldi	r30, 0x3B	; 59
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	88 60       	ori	r24, 0x08	; 8
    298e:	8c 93       	st	X, r24
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	a0 e8       	ldi	r26, 0x80	; 128
    2996:	bf e3       	ldi	r27, 0x3F	; 63
    2998:	8f a3       	std	Y+39, r24	; 0x27
    299a:	98 a7       	std	Y+40, r25	; 0x28
    299c:	a9 a7       	std	Y+41, r26	; 0x29
    299e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a0:	6f a1       	ldd	r22, Y+39	; 0x27
    29a2:	78 a5       	ldd	r23, Y+40	; 0x28
    29a4:	89 a5       	ldd	r24, Y+41	; 0x29
    29a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	4a e7       	ldi	r20, 0x7A	; 122
    29ae:	55 e4       	ldi	r21, 0x45	; 69
    29b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	8b a3       	std	Y+35, r24	; 0x23
    29ba:	9c a3       	std	Y+36, r25	; 0x24
    29bc:	ad a3       	std	Y+37, r26	; 0x25
    29be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29c0:	6b a1       	ldd	r22, Y+35	; 0x23
    29c2:	7c a1       	ldd	r23, Y+36	; 0x24
    29c4:	8d a1       	ldd	r24, Y+37	; 0x25
    29c6:	9e a1       	ldd	r25, Y+38	; 0x26
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e8       	ldi	r20, 0x80	; 128
    29ce:	5f e3       	ldi	r21, 0x3F	; 63
    29d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d4:	88 23       	and	r24, r24
    29d6:	2c f4       	brge	.+10     	; 0x29e2 <LCD_sendCommand+0x590>
		__ticks = 1;
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	9a a3       	std	Y+34, r25	; 0x22
    29de:	89 a3       	std	Y+33, r24	; 0x21
    29e0:	3f c0       	rjmp	.+126    	; 0x2a60 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    29e2:	6b a1       	ldd	r22, Y+35	; 0x23
    29e4:	7c a1       	ldd	r23, Y+36	; 0x24
    29e6:	8d a1       	ldd	r24, Y+37	; 0x25
    29e8:	9e a1       	ldd	r25, Y+38	; 0x26
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	3f ef       	ldi	r19, 0xFF	; 255
    29ee:	4f e7       	ldi	r20, 0x7F	; 127
    29f0:	57 e4       	ldi	r21, 0x47	; 71
    29f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29f6:	18 16       	cp	r1, r24
    29f8:	4c f5       	brge	.+82     	; 0x2a4c <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fa:	6f a1       	ldd	r22, Y+39	; 0x27
    29fc:	78 a5       	ldd	r23, Y+40	; 0x28
    29fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2a00:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	40 e2       	ldi	r20, 0x20	; 32
    2a08:	51 e4       	ldi	r21, 0x41	; 65
    2a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	bc 01       	movw	r22, r24
    2a14:	cd 01       	movw	r24, r26
    2a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	9a a3       	std	Y+34, r25	; 0x22
    2a20:	89 a3       	std	Y+33, r24	; 0x21
    2a22:	0f c0       	rjmp	.+30     	; 0x2a42 <LCD_sendCommand+0x5f0>
    2a24:	80 e9       	ldi	r24, 0x90	; 144
    2a26:	91 e0       	ldi	r25, 0x01	; 1
    2a28:	98 a3       	std	Y+32, r25	; 0x20
    2a2a:	8f 8f       	std	Y+31, r24	; 0x1f
    2a2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a2e:	98 a1       	ldd	r25, Y+32	; 0x20
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	f1 f7       	brne	.-4      	; 0x2a30 <LCD_sendCommand+0x5de>
    2a34:	98 a3       	std	Y+32, r25	; 0x20
    2a36:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a38:	89 a1       	ldd	r24, Y+33	; 0x21
    2a3a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	9a a3       	std	Y+34, r25	; 0x22
    2a40:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a42:	89 a1       	ldd	r24, Y+33	; 0x21
    2a44:	9a a1       	ldd	r25, Y+34	; 0x22
    2a46:	00 97       	sbiw	r24, 0x00	; 0
    2a48:	69 f7       	brne	.-38     	; 0x2a24 <LCD_sendCommand+0x5d2>
    2a4a:	14 c0       	rjmp	.+40     	; 0x2a74 <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a4c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a4e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a50:	8d a1       	ldd	r24, Y+37	; 0x25
    2a52:	9e a1       	ldd	r25, Y+38	; 0x26
    2a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	9a a3       	std	Y+34, r25	; 0x22
    2a5e:	89 a3       	std	Y+33, r24	; 0x21
    2a60:	89 a1       	ldd	r24, Y+33	; 0x21
    2a62:	9a a1       	ldd	r25, Y+34	; 0x22
    2a64:	9e 8f       	std	Y+30, r25	; 0x1e
    2a66:	8d 8f       	std	Y+29, r24	; 0x1d
    2a68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	f1 f7       	brne	.-4      	; 0x2a6c <LCD_sendCommand+0x61a>
    2a70:	9e 8f       	std	Y+30, r25	; 0x1e
    2a72:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#ifdef UPPER_PORT_BITS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    2a74:	ab e3       	ldi	r26, 0x3B	; 59
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	eb e3       	ldi	r30, 0x3B	; 59
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	80 81       	ld	r24, Z
    2a7e:	28 2f       	mov	r18, r24
    2a80:	2f 70       	andi	r18, 0x0F	; 15
    2a82:	fe 01       	movw	r30, r28
    2a84:	ed 59       	subi	r30, 0x9D	; 157
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	80 81       	ld	r24, Z
    2a8a:	88 2f       	mov	r24, r24
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	82 95       	swap	r24
    2a90:	92 95       	swap	r25
    2a92:	90 7f       	andi	r25, 0xF0	; 240
    2a94:	98 27       	eor	r25, r24
    2a96:	80 7f       	andi	r24, 0xF0	; 240
    2a98:	98 27       	eor	r25, r24
    2a9a:	82 2b       	or	r24, r18
    2a9c:	8c 93       	st	X, r24
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	a0 e8       	ldi	r26, 0x80	; 128
    2aa4:	bf e3       	ldi	r27, 0x3F	; 63
    2aa6:	89 8f       	std	Y+25, r24	; 0x19
    2aa8:	9a 8f       	std	Y+26, r25	; 0x1a
    2aaa:	ab 8f       	std	Y+27, r26	; 0x1b
    2aac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aae:	69 8d       	ldd	r22, Y+25	; 0x19
    2ab0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ab2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ab4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	4a e7       	ldi	r20, 0x7A	; 122
    2abc:	55 e4       	ldi	r21, 0x45	; 69
    2abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	8d 8b       	std	Y+21, r24	; 0x15
    2ac8:	9e 8b       	std	Y+22, r25	; 0x16
    2aca:	af 8b       	std	Y+23, r26	; 0x17
    2acc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ace:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e8       	ldi	r20, 0x80	; 128
    2adc:	5f e3       	ldi	r21, 0x3F	; 63
    2ade:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ae2:	88 23       	and	r24, r24
    2ae4:	2c f4       	brge	.+10     	; 0x2af0 <LCD_sendCommand+0x69e>
		__ticks = 1;
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	9c 8b       	std	Y+20, r25	; 0x14
    2aec:	8b 8b       	std	Y+19, r24	; 0x13
    2aee:	3f c0       	rjmp	.+126    	; 0x2b6e <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    2af0:	6d 89       	ldd	r22, Y+21	; 0x15
    2af2:	7e 89       	ldd	r23, Y+22	; 0x16
    2af4:	8f 89       	ldd	r24, Y+23	; 0x17
    2af6:	98 8d       	ldd	r25, Y+24	; 0x18
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	3f ef       	ldi	r19, 0xFF	; 255
    2afc:	4f e7       	ldi	r20, 0x7F	; 127
    2afe:	57 e4       	ldi	r21, 0x47	; 71
    2b00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b04:	18 16       	cp	r1, r24
    2b06:	4c f5       	brge	.+82     	; 0x2b5a <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b08:	69 8d       	ldd	r22, Y+25	; 0x19
    2b0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	40 e2       	ldi	r20, 0x20	; 32
    2b16:	51 e4       	ldi	r21, 0x41	; 65
    2b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	bc 01       	movw	r22, r24
    2b22:	cd 01       	movw	r24, r26
    2b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	9c 8b       	std	Y+20, r25	; 0x14
    2b2e:	8b 8b       	std	Y+19, r24	; 0x13
    2b30:	0f c0       	rjmp	.+30     	; 0x2b50 <LCD_sendCommand+0x6fe>
    2b32:	80 e9       	ldi	r24, 0x90	; 144
    2b34:	91 e0       	ldi	r25, 0x01	; 1
    2b36:	9a 8b       	std	Y+18, r25	; 0x12
    2b38:	89 8b       	std	Y+17, r24	; 0x11
    2b3a:	89 89       	ldd	r24, Y+17	; 0x11
    2b3c:	9a 89       	ldd	r25, Y+18	; 0x12
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <LCD_sendCommand+0x6ec>
    2b42:	9a 8b       	std	Y+18, r25	; 0x12
    2b44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b46:	8b 89       	ldd	r24, Y+19	; 0x13
    2b48:	9c 89       	ldd	r25, Y+20	; 0x14
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	9c 8b       	std	Y+20, r25	; 0x14
    2b4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b50:	8b 89       	ldd	r24, Y+19	; 0x13
    2b52:	9c 89       	ldd	r25, Y+20	; 0x14
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	69 f7       	brne	.-38     	; 0x2b32 <LCD_sendCommand+0x6e0>
    2b58:	14 c0       	rjmp	.+40     	; 0x2b82 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b5c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b5e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b60:	98 8d       	ldd	r25, Y+24	; 0x18
    2b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	9c 8b       	std	Y+20, r25	; 0x14
    2b6c:	8b 8b       	std	Y+19, r24	; 0x13
    2b6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b70:	9c 89       	ldd	r25, Y+20	; 0x14
    2b72:	98 8b       	std	Y+16, r25	; 0x10
    2b74:	8f 87       	std	Y+15, r24	; 0x0f
    2b76:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b78:	98 89       	ldd	r25, Y+16	; 0x10
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	f1 f7       	brne	.-4      	; 0x2b7a <LCD_sendCommand+0x728>
    2b7e:	98 8b       	std	Y+16, r25	; 0x10
    2b80:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif
#endif
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT, E);
    2b82:	ab e3       	ldi	r26, 0x3B	; 59
    2b84:	b0 e0       	ldi	r27, 0x00	; 0
    2b86:	eb e3       	ldi	r30, 0x3B	; 59
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	80 81       	ld	r24, Z
    2b8c:	87 7f       	andi	r24, 0xF7	; 247
    2b8e:	8c 93       	st	X, r24
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	a0 e8       	ldi	r26, 0x80	; 128
    2b96:	bf e3       	ldi	r27, 0x3F	; 63
    2b98:	8b 87       	std	Y+11, r24	; 0x0b
    2b9a:	9c 87       	std	Y+12, r25	; 0x0c
    2b9c:	ad 87       	std	Y+13, r26	; 0x0d
    2b9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ba2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ba4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ba6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	4a e7       	ldi	r20, 0x7A	; 122
    2bae:	55 e4       	ldi	r21, 0x45	; 69
    2bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	8f 83       	std	Y+7, r24	; 0x07
    2bba:	98 87       	std	Y+8, r25	; 0x08
    2bbc:	a9 87       	std	Y+9, r26	; 0x09
    2bbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc2:	78 85       	ldd	r23, Y+8	; 0x08
    2bc4:	89 85       	ldd	r24, Y+9	; 0x09
    2bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	40 e8       	ldi	r20, 0x80	; 128
    2bce:	5f e3       	ldi	r21, 0x3F	; 63
    2bd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bd4:	88 23       	and	r24, r24
    2bd6:	2c f4       	brge	.+10     	; 0x2be2 <LCD_sendCommand+0x790>
		__ticks = 1;
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	9e 83       	std	Y+6, r25	; 0x06
    2bde:	8d 83       	std	Y+5, r24	; 0x05
    2be0:	3f c0       	rjmp	.+126    	; 0x2c60 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    2be2:	6f 81       	ldd	r22, Y+7	; 0x07
    2be4:	78 85       	ldd	r23, Y+8	; 0x08
    2be6:	89 85       	ldd	r24, Y+9	; 0x09
    2be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	3f ef       	ldi	r19, 0xFF	; 255
    2bee:	4f e7       	ldi	r20, 0x7F	; 127
    2bf0:	57 e4       	ldi	r21, 0x47	; 71
    2bf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bf6:	18 16       	cp	r1, r24
    2bf8:	4c f5       	brge	.+82     	; 0x2c4c <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	40 e2       	ldi	r20, 0x20	; 32
    2c08:	51 e4       	ldi	r21, 0x41	; 65
    2c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	bc 01       	movw	r22, r24
    2c14:	cd 01       	movw	r24, r26
    2c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	9e 83       	std	Y+6, r25	; 0x06
    2c20:	8d 83       	std	Y+5, r24	; 0x05
    2c22:	0f c0       	rjmp	.+30     	; 0x2c42 <LCD_sendCommand+0x7f0>
    2c24:	80 e9       	ldi	r24, 0x90	; 144
    2c26:	91 e0       	ldi	r25, 0x01	; 1
    2c28:	9c 83       	std	Y+4, r25	; 0x04
    2c2a:	8b 83       	std	Y+3, r24	; 0x03
    2c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	f1 f7       	brne	.-4      	; 0x2c30 <LCD_sendCommand+0x7de>
    2c34:	9c 83       	std	Y+4, r25	; 0x04
    2c36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c38:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3c:	01 97       	sbiw	r24, 0x01	; 1
    2c3e:	9e 83       	std	Y+6, r25	; 0x06
    2c40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c42:	8d 81       	ldd	r24, Y+5	; 0x05
    2c44:	9e 81       	ldd	r25, Y+6	; 0x06
    2c46:	00 97       	sbiw	r24, 0x00	; 0
    2c48:	69 f7       	brne	.-38     	; 0x2c24 <LCD_sendCommand+0x7d2>
    2c4a:	14 c0       	rjmp	.+40     	; 0x2c74 <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c4e:	78 85       	ldd	r23, Y+8	; 0x08
    2c50:	89 85       	ldd	r24, Y+9	; 0x09
    2c52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	9e 83       	std	Y+6, r25	; 0x06
    2c5e:	8d 83       	std	Y+5, r24	; 0x05
    2c60:	8d 81       	ldd	r24, Y+5	; 0x05
    2c62:	9e 81       	ldd	r25, Y+6	; 0x06
    2c64:	9a 83       	std	Y+2, r25	; 0x02
    2c66:	89 83       	std	Y+1, r24	; 0x01
    2c68:	89 81       	ldd	r24, Y+1	; 0x01
    2c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c6c:	01 97       	sbiw	r24, 0x01	; 1
    2c6e:	f1 f7       	brne	.-4      	; 0x2c6c <LCD_sendCommand+0x81a>
    2c70:	9a 83       	std	Y+2, r25	; 0x02
    2c72:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2c74:	cd 59       	subi	r28, 0x9D	; 157
    2c76:	df 4f       	sbci	r29, 0xFF	; 255
    2c78:	0f b6       	in	r0, 0x3f	; 63
    2c7a:	f8 94       	cli
    2c7c:	de bf       	out	0x3e, r29	; 62
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	cd bf       	out	0x3d, r28	; 61
    2c82:	cf 91       	pop	r28
    2c84:	df 91       	pop	r29
    2c86:	1f 91       	pop	r17
    2c88:	0f 91       	pop	r16
    2c8a:	08 95       	ret

00002c8c <LCD_displayCharacter>:

/*
 * Description : A Function to write data (display character).
 */
void LCD_displayCharacter(uint8_t data)
{
    2c8c:	0f 93       	push	r16
    2c8e:	1f 93       	push	r17
    2c90:	df 93       	push	r29
    2c92:	cf 93       	push	r28
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
    2c98:	c3 56       	subi	r28, 0x63	; 99
    2c9a:	d0 40       	sbci	r29, 0x00	; 0
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	f8 94       	cli
    2ca0:	de bf       	out	0x3e, r29	; 62
    2ca2:	0f be       	out	0x3f, r0	; 63
    2ca4:	cd bf       	out	0x3d, r28	; 61
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	ed 59       	subi	r30, 0x9D	; 157
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT, RS);
    2cae:	ab e3       	ldi	r26, 0x3B	; 59
    2cb0:	b0 e0       	ldi	r27, 0x00	; 0
    2cb2:	eb e3       	ldi	r30, 0x3B	; 59
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	80 81       	ld	r24, Z
    2cb8:	82 60       	ori	r24, 0x02	; 2
    2cba:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, RW);
    2cbc:	ab e3       	ldi	r26, 0x3B	; 59
    2cbe:	b0 e0       	ldi	r27, 0x00	; 0
    2cc0:	eb e3       	ldi	r30, 0x3B	; 59
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	80 81       	ld	r24, Z
    2cc6:	8b 7f       	andi	r24, 0xFB	; 251
    2cc8:	8c 93       	st	X, r24
    2cca:	fe 01       	movw	r30, r28
    2ccc:	e1 5a       	subi	r30, 0xA1	; 161
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	a0 e8       	ldi	r26, 0x80	; 128
    2cd6:	bf e3       	ldi	r27, 0x3F	; 63
    2cd8:	80 83       	st	Z, r24
    2cda:	91 83       	std	Z+1, r25	; 0x01
    2cdc:	a2 83       	std	Z+2, r26	; 0x02
    2cde:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce0:	8e 01       	movw	r16, r28
    2ce2:	05 5a       	subi	r16, 0xA5	; 165
    2ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce6:	fe 01       	movw	r30, r28
    2ce8:	e1 5a       	subi	r30, 0xA1	; 161
    2cea:	ff 4f       	sbci	r31, 0xFF	; 255
    2cec:	60 81       	ld	r22, Z
    2cee:	71 81       	ldd	r23, Z+1	; 0x01
    2cf0:	82 81       	ldd	r24, Z+2	; 0x02
    2cf2:	93 81       	ldd	r25, Z+3	; 0x03
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	4a e7       	ldi	r20, 0x7A	; 122
    2cfa:	55 e4       	ldi	r21, 0x45	; 69
    2cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	f8 01       	movw	r30, r16
    2d06:	80 83       	st	Z, r24
    2d08:	91 83       	std	Z+1, r25	; 0x01
    2d0a:	a2 83       	std	Z+2, r26	; 0x02
    2d0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d0e:	fe 01       	movw	r30, r28
    2d10:	e5 5a       	subi	r30, 0xA5	; 165
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	60 81       	ld	r22, Z
    2d16:	71 81       	ldd	r23, Z+1	; 0x01
    2d18:	82 81       	ldd	r24, Z+2	; 0x02
    2d1a:	93 81       	ldd	r25, Z+3	; 0x03
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	40 e8       	ldi	r20, 0x80	; 128
    2d22:	5f e3       	ldi	r21, 0x3F	; 63
    2d24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d28:	88 23       	and	r24, r24
    2d2a:	44 f4       	brge	.+16     	; 0x2d3c <LCD_displayCharacter+0xb0>
		__ticks = 1;
    2d2c:	fe 01       	movw	r30, r28
    2d2e:	e7 5a       	subi	r30, 0xA7	; 167
    2d30:	ff 4f       	sbci	r31, 0xFF	; 255
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	91 83       	std	Z+1, r25	; 0x01
    2d38:	80 83       	st	Z, r24
    2d3a:	64 c0       	rjmp	.+200    	; 0x2e04 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	e5 5a       	subi	r30, 0xA5	; 165
    2d40:	ff 4f       	sbci	r31, 0xFF	; 255
    2d42:	60 81       	ld	r22, Z
    2d44:	71 81       	ldd	r23, Z+1	; 0x01
    2d46:	82 81       	ldd	r24, Z+2	; 0x02
    2d48:	93 81       	ldd	r25, Z+3	; 0x03
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	3f ef       	ldi	r19, 0xFF	; 255
    2d4e:	4f e7       	ldi	r20, 0x7F	; 127
    2d50:	57 e4       	ldi	r21, 0x47	; 71
    2d52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d56:	18 16       	cp	r1, r24
    2d58:	0c f0       	brlt	.+2      	; 0x2d5c <LCD_displayCharacter+0xd0>
    2d5a:	43 c0       	rjmp	.+134    	; 0x2de2 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	e1 5a       	subi	r30, 0xA1	; 161
    2d60:	ff 4f       	sbci	r31, 0xFF	; 255
    2d62:	60 81       	ld	r22, Z
    2d64:	71 81       	ldd	r23, Z+1	; 0x01
    2d66:	82 81       	ldd	r24, Z+2	; 0x02
    2d68:	93 81       	ldd	r25, Z+3	; 0x03
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	40 e2       	ldi	r20, 0x20	; 32
    2d70:	51 e4       	ldi	r21, 0x41	; 65
    2d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	8e 01       	movw	r16, r28
    2d7c:	07 5a       	subi	r16, 0xA7	; 167
    2d7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d80:	bc 01       	movw	r22, r24
    2d82:	cd 01       	movw	r24, r26
    2d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	f8 01       	movw	r30, r16
    2d8e:	91 83       	std	Z+1, r25	; 0x01
    2d90:	80 83       	st	Z, r24
    2d92:	1f c0       	rjmp	.+62     	; 0x2dd2 <LCD_displayCharacter+0x146>
    2d94:	fe 01       	movw	r30, r28
    2d96:	e9 5a       	subi	r30, 0xA9	; 169
    2d98:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9a:	80 e9       	ldi	r24, 0x90	; 144
    2d9c:	91 e0       	ldi	r25, 0x01	; 1
    2d9e:	91 83       	std	Z+1, r25	; 0x01
    2da0:	80 83       	st	Z, r24
    2da2:	fe 01       	movw	r30, r28
    2da4:	e9 5a       	subi	r30, 0xA9	; 169
    2da6:	ff 4f       	sbci	r31, 0xFF	; 255
    2da8:	80 81       	ld	r24, Z
    2daa:	91 81       	ldd	r25, Z+1	; 0x01
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	f1 f7       	brne	.-4      	; 0x2dac <LCD_displayCharacter+0x120>
    2db0:	fe 01       	movw	r30, r28
    2db2:	e9 5a       	subi	r30, 0xA9	; 169
    2db4:	ff 4f       	sbci	r31, 0xFF	; 255
    2db6:	91 83       	std	Z+1, r25	; 0x01
    2db8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dba:	de 01       	movw	r26, r28
    2dbc:	a7 5a       	subi	r26, 0xA7	; 167
    2dbe:	bf 4f       	sbci	r27, 0xFF	; 255
    2dc0:	fe 01       	movw	r30, r28
    2dc2:	e7 5a       	subi	r30, 0xA7	; 167
    2dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc6:	80 81       	ld	r24, Z
    2dc8:	91 81       	ldd	r25, Z+1	; 0x01
    2dca:	01 97       	sbiw	r24, 0x01	; 1
    2dcc:	11 96       	adiw	r26, 0x01	; 1
    2dce:	9c 93       	st	X, r25
    2dd0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd2:	fe 01       	movw	r30, r28
    2dd4:	e7 5a       	subi	r30, 0xA7	; 167
    2dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd8:	80 81       	ld	r24, Z
    2dda:	91 81       	ldd	r25, Z+1	; 0x01
    2ddc:	00 97       	sbiw	r24, 0x00	; 0
    2dde:	d1 f6       	brne	.-76     	; 0x2d94 <LCD_displayCharacter+0x108>
    2de0:	27 c0       	rjmp	.+78     	; 0x2e30 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de2:	8e 01       	movw	r16, r28
    2de4:	07 5a       	subi	r16, 0xA7	; 167
    2de6:	1f 4f       	sbci	r17, 0xFF	; 255
    2de8:	fe 01       	movw	r30, r28
    2dea:	e5 5a       	subi	r30, 0xA5	; 165
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	60 81       	ld	r22, Z
    2df0:	71 81       	ldd	r23, Z+1	; 0x01
    2df2:	82 81       	ldd	r24, Z+2	; 0x02
    2df4:	93 81       	ldd	r25, Z+3	; 0x03
    2df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	f8 01       	movw	r30, r16
    2e00:	91 83       	std	Z+1, r25	; 0x01
    2e02:	80 83       	st	Z, r24
    2e04:	de 01       	movw	r26, r28
    2e06:	ab 5a       	subi	r26, 0xAB	; 171
    2e08:	bf 4f       	sbci	r27, 0xFF	; 255
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	e7 5a       	subi	r30, 0xA7	; 167
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	80 81       	ld	r24, Z
    2e12:	91 81       	ldd	r25, Z+1	; 0x01
    2e14:	8d 93       	st	X+, r24
    2e16:	9c 93       	st	X, r25
    2e18:	fe 01       	movw	r30, r28
    2e1a:	eb 5a       	subi	r30, 0xAB	; 171
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	80 81       	ld	r24, Z
    2e20:	91 81       	ldd	r25, Z+1	; 0x01
    2e22:	01 97       	sbiw	r24, 0x01	; 1
    2e24:	f1 f7       	brne	.-4      	; 0x2e22 <LCD_displayCharacter+0x196>
    2e26:	fe 01       	movw	r30, r28
    2e28:	eb 5a       	subi	r30, 0xAB	; 171
    2e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2c:	91 83       	std	Z+1, r25	; 0x01
    2e2e:	80 83       	st	Z, r24
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, E);
    2e30:	ab e3       	ldi	r26, 0x3B	; 59
    2e32:	b0 e0       	ldi	r27, 0x00	; 0
    2e34:	eb e3       	ldi	r30, 0x3B	; 59
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	80 81       	ld	r24, Z
    2e3a:	88 60       	ori	r24, 0x08	; 8
    2e3c:	8c 93       	st	X, r24
    2e3e:	fe 01       	movw	r30, r28
    2e40:	ef 5a       	subi	r30, 0xAF	; 175
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	a0 e8       	ldi	r26, 0x80	; 128
    2e4a:	bf e3       	ldi	r27, 0x3F	; 63
    2e4c:	80 83       	st	Z, r24
    2e4e:	91 83       	std	Z+1, r25	; 0x01
    2e50:	a2 83       	std	Z+2, r26	; 0x02
    2e52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e54:	8e 01       	movw	r16, r28
    2e56:	03 5b       	subi	r16, 0xB3	; 179
    2e58:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	ef 5a       	subi	r30, 0xAF	; 175
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	60 81       	ld	r22, Z
    2e62:	71 81       	ldd	r23, Z+1	; 0x01
    2e64:	82 81       	ldd	r24, Z+2	; 0x02
    2e66:	93 81       	ldd	r25, Z+3	; 0x03
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	4a e7       	ldi	r20, 0x7A	; 122
    2e6e:	55 e4       	ldi	r21, 0x45	; 69
    2e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	f8 01       	movw	r30, r16
    2e7a:	80 83       	st	Z, r24
    2e7c:	91 83       	std	Z+1, r25	; 0x01
    2e7e:	a2 83       	std	Z+2, r26	; 0x02
    2e80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e82:	fe 01       	movw	r30, r28
    2e84:	e3 5b       	subi	r30, 0xB3	; 179
    2e86:	ff 4f       	sbci	r31, 0xFF	; 255
    2e88:	60 81       	ld	r22, Z
    2e8a:	71 81       	ldd	r23, Z+1	; 0x01
    2e8c:	82 81       	ldd	r24, Z+2	; 0x02
    2e8e:	93 81       	ldd	r25, Z+3	; 0x03
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	40 e8       	ldi	r20, 0x80	; 128
    2e96:	5f e3       	ldi	r21, 0x3F	; 63
    2e98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e9c:	88 23       	and	r24, r24
    2e9e:	44 f4       	brge	.+16     	; 0x2eb0 <LCD_displayCharacter+0x224>
		__ticks = 1;
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	e5 5b       	subi	r30, 0xB5	; 181
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	91 83       	std	Z+1, r25	; 0x01
    2eac:	80 83       	st	Z, r24
    2eae:	64 c0       	rjmp	.+200    	; 0x2f78 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	e3 5b       	subi	r30, 0xB3	; 179
    2eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb6:	60 81       	ld	r22, Z
    2eb8:	71 81       	ldd	r23, Z+1	; 0x01
    2eba:	82 81       	ldd	r24, Z+2	; 0x02
    2ebc:	93 81       	ldd	r25, Z+3	; 0x03
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	3f ef       	ldi	r19, 0xFF	; 255
    2ec2:	4f e7       	ldi	r20, 0x7F	; 127
    2ec4:	57 e4       	ldi	r21, 0x47	; 71
    2ec6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eca:	18 16       	cp	r1, r24
    2ecc:	0c f0       	brlt	.+2      	; 0x2ed0 <LCD_displayCharacter+0x244>
    2ece:	43 c0       	rjmp	.+134    	; 0x2f56 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	ef 5a       	subi	r30, 0xAF	; 175
    2ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed6:	60 81       	ld	r22, Z
    2ed8:	71 81       	ldd	r23, Z+1	; 0x01
    2eda:	82 81       	ldd	r24, Z+2	; 0x02
    2edc:	93 81       	ldd	r25, Z+3	; 0x03
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	40 e2       	ldi	r20, 0x20	; 32
    2ee4:	51 e4       	ldi	r21, 0x41	; 65
    2ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	8e 01       	movw	r16, r28
    2ef0:	05 5b       	subi	r16, 0xB5	; 181
    2ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef4:	bc 01       	movw	r22, r24
    2ef6:	cd 01       	movw	r24, r26
    2ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	f8 01       	movw	r30, r16
    2f02:	91 83       	std	Z+1, r25	; 0x01
    2f04:	80 83       	st	Z, r24
    2f06:	1f c0       	rjmp	.+62     	; 0x2f46 <LCD_displayCharacter+0x2ba>
    2f08:	fe 01       	movw	r30, r28
    2f0a:	e7 5b       	subi	r30, 0xB7	; 183
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	80 e9       	ldi	r24, 0x90	; 144
    2f10:	91 e0       	ldi	r25, 0x01	; 1
    2f12:	91 83       	std	Z+1, r25	; 0x01
    2f14:	80 83       	st	Z, r24
    2f16:	fe 01       	movw	r30, r28
    2f18:	e7 5b       	subi	r30, 0xB7	; 183
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	80 81       	ld	r24, Z
    2f1e:	91 81       	ldd	r25, Z+1	; 0x01
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	f1 f7       	brne	.-4      	; 0x2f20 <LCD_displayCharacter+0x294>
    2f24:	fe 01       	movw	r30, r28
    2f26:	e7 5b       	subi	r30, 0xB7	; 183
    2f28:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2a:	91 83       	std	Z+1, r25	; 0x01
    2f2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f2e:	de 01       	movw	r26, r28
    2f30:	a5 5b       	subi	r26, 0xB5	; 181
    2f32:	bf 4f       	sbci	r27, 0xFF	; 255
    2f34:	fe 01       	movw	r30, r28
    2f36:	e5 5b       	subi	r30, 0xB5	; 181
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	80 81       	ld	r24, Z
    2f3c:	91 81       	ldd	r25, Z+1	; 0x01
    2f3e:	01 97       	sbiw	r24, 0x01	; 1
    2f40:	11 96       	adiw	r26, 0x01	; 1
    2f42:	9c 93       	st	X, r25
    2f44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f46:	fe 01       	movw	r30, r28
    2f48:	e5 5b       	subi	r30, 0xB5	; 181
    2f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4c:	80 81       	ld	r24, Z
    2f4e:	91 81       	ldd	r25, Z+1	; 0x01
    2f50:	00 97       	sbiw	r24, 0x00	; 0
    2f52:	d1 f6       	brne	.-76     	; 0x2f08 <LCD_displayCharacter+0x27c>
    2f54:	27 c0       	rjmp	.+78     	; 0x2fa4 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f56:	8e 01       	movw	r16, r28
    2f58:	05 5b       	subi	r16, 0xB5	; 181
    2f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	e3 5b       	subi	r30, 0xB3	; 179
    2f60:	ff 4f       	sbci	r31, 0xFF	; 255
    2f62:	60 81       	ld	r22, Z
    2f64:	71 81       	ldd	r23, Z+1	; 0x01
    2f66:	82 81       	ldd	r24, Z+2	; 0x02
    2f68:	93 81       	ldd	r25, Z+3	; 0x03
    2f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	f8 01       	movw	r30, r16
    2f74:	91 83       	std	Z+1, r25	; 0x01
    2f76:	80 83       	st	Z, r24
    2f78:	de 01       	movw	r26, r28
    2f7a:	a9 5b       	subi	r26, 0xB9	; 185
    2f7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f7e:	fe 01       	movw	r30, r28
    2f80:	e5 5b       	subi	r30, 0xB5	; 181
    2f82:	ff 4f       	sbci	r31, 0xFF	; 255
    2f84:	80 81       	ld	r24, Z
    2f86:	91 81       	ldd	r25, Z+1	; 0x01
    2f88:	8d 93       	st	X+, r24
    2f8a:	9c 93       	st	X, r25
    2f8c:	fe 01       	movw	r30, r28
    2f8e:	e9 5b       	subi	r30, 0xB9	; 185
    2f90:	ff 4f       	sbci	r31, 0xFF	; 255
    2f92:	80 81       	ld	r24, Z
    2f94:	91 81       	ldd	r25, Z+1	; 0x01
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	f1 f7       	brne	.-4      	; 0x2f96 <LCD_displayCharacter+0x30a>
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	e9 5b       	subi	r30, 0xB9	; 185
    2f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa0:	91 83       	std	Z+1, r25	; 0x01
    2fa2:	80 83       	st	Z, r24
	_delay_ms(1);
#if(DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data;
#elif(DATA_BITS_MODE == 4)
#ifdef UPPER_PORT_BITS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    2fa4:	ab e3       	ldi	r26, 0x3B	; 59
    2fa6:	b0 e0       	ldi	r27, 0x00	; 0
    2fa8:	eb e3       	ldi	r30, 0x3B	; 59
    2faa:	f0 e0       	ldi	r31, 0x00	; 0
    2fac:	80 81       	ld	r24, Z
    2fae:	98 2f       	mov	r25, r24
    2fb0:	9f 70       	andi	r25, 0x0F	; 15
    2fb2:	fe 01       	movw	r30, r28
    2fb4:	ed 59       	subi	r30, 0x9D	; 157
    2fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb8:	80 81       	ld	r24, Z
    2fba:	80 7f       	andi	r24, 0xF0	; 240
    2fbc:	89 2b       	or	r24, r25
    2fbe:	8c 93       	st	X, r24
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	ed 5b       	subi	r30, 0xBD	; 189
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	a0 e8       	ldi	r26, 0x80	; 128
    2fcc:	bf e3       	ldi	r27, 0x3F	; 63
    2fce:	80 83       	st	Z, r24
    2fd0:	91 83       	std	Z+1, r25	; 0x01
    2fd2:	a2 83       	std	Z+2, r26	; 0x02
    2fd4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fd6:	8e 01       	movw	r16, r28
    2fd8:	01 5c       	subi	r16, 0xC1	; 193
    2fda:	1f 4f       	sbci	r17, 0xFF	; 255
    2fdc:	fe 01       	movw	r30, r28
    2fde:	ed 5b       	subi	r30, 0xBD	; 189
    2fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe2:	60 81       	ld	r22, Z
    2fe4:	71 81       	ldd	r23, Z+1	; 0x01
    2fe6:	82 81       	ldd	r24, Z+2	; 0x02
    2fe8:	93 81       	ldd	r25, Z+3	; 0x03
    2fea:	20 e0       	ldi	r18, 0x00	; 0
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	4a e7       	ldi	r20, 0x7A	; 122
    2ff0:	55 e4       	ldi	r21, 0x45	; 69
    2ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	f8 01       	movw	r30, r16
    2ffc:	80 83       	st	Z, r24
    2ffe:	91 83       	std	Z+1, r25	; 0x01
    3000:	a2 83       	std	Z+2, r26	; 0x02
    3002:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3004:	fe 01       	movw	r30, r28
    3006:	ff 96       	adiw	r30, 0x3f	; 63
    3008:	60 81       	ld	r22, Z
    300a:	71 81       	ldd	r23, Z+1	; 0x01
    300c:	82 81       	ldd	r24, Z+2	; 0x02
    300e:	93 81       	ldd	r25, Z+3	; 0x03
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	40 e8       	ldi	r20, 0x80	; 128
    3016:	5f e3       	ldi	r21, 0x3F	; 63
    3018:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    301c:	88 23       	and	r24, r24
    301e:	2c f4       	brge	.+10     	; 0x302a <LCD_displayCharacter+0x39e>
		__ticks = 1;
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	9e af       	std	Y+62, r25	; 0x3e
    3026:	8d af       	std	Y+61, r24	; 0x3d
    3028:	46 c0       	rjmp	.+140    	; 0x30b6 <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    302a:	fe 01       	movw	r30, r28
    302c:	ff 96       	adiw	r30, 0x3f	; 63
    302e:	60 81       	ld	r22, Z
    3030:	71 81       	ldd	r23, Z+1	; 0x01
    3032:	82 81       	ldd	r24, Z+2	; 0x02
    3034:	93 81       	ldd	r25, Z+3	; 0x03
    3036:	20 e0       	ldi	r18, 0x00	; 0
    3038:	3f ef       	ldi	r19, 0xFF	; 255
    303a:	4f e7       	ldi	r20, 0x7F	; 127
    303c:	57 e4       	ldi	r21, 0x47	; 71
    303e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3042:	18 16       	cp	r1, r24
    3044:	64 f5       	brge	.+88     	; 0x309e <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3046:	fe 01       	movw	r30, r28
    3048:	ed 5b       	subi	r30, 0xBD	; 189
    304a:	ff 4f       	sbci	r31, 0xFF	; 255
    304c:	60 81       	ld	r22, Z
    304e:	71 81       	ldd	r23, Z+1	; 0x01
    3050:	82 81       	ldd	r24, Z+2	; 0x02
    3052:	93 81       	ldd	r25, Z+3	; 0x03
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	40 e2       	ldi	r20, 0x20	; 32
    305a:	51 e4       	ldi	r21, 0x41	; 65
    305c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	bc 01       	movw	r22, r24
    3066:	cd 01       	movw	r24, r26
    3068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	9e af       	std	Y+62, r25	; 0x3e
    3072:	8d af       	std	Y+61, r24	; 0x3d
    3074:	0f c0       	rjmp	.+30     	; 0x3094 <LCD_displayCharacter+0x408>
    3076:	80 e9       	ldi	r24, 0x90	; 144
    3078:	91 e0       	ldi	r25, 0x01	; 1
    307a:	9c af       	std	Y+60, r25	; 0x3c
    307c:	8b af       	std	Y+59, r24	; 0x3b
    307e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3080:	9c ad       	ldd	r25, Y+60	; 0x3c
    3082:	01 97       	sbiw	r24, 0x01	; 1
    3084:	f1 f7       	brne	.-4      	; 0x3082 <LCD_displayCharacter+0x3f6>
    3086:	9c af       	std	Y+60, r25	; 0x3c
    3088:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308a:	8d ad       	ldd	r24, Y+61	; 0x3d
    308c:	9e ad       	ldd	r25, Y+62	; 0x3e
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	9e af       	std	Y+62, r25	; 0x3e
    3092:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3094:	8d ad       	ldd	r24, Y+61	; 0x3d
    3096:	9e ad       	ldd	r25, Y+62	; 0x3e
    3098:	00 97       	sbiw	r24, 0x00	; 0
    309a:	69 f7       	brne	.-38     	; 0x3076 <LCD_displayCharacter+0x3ea>
    309c:	16 c0       	rjmp	.+44     	; 0x30ca <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    309e:	fe 01       	movw	r30, r28
    30a0:	ff 96       	adiw	r30, 0x3f	; 63
    30a2:	60 81       	ld	r22, Z
    30a4:	71 81       	ldd	r23, Z+1	; 0x01
    30a6:	82 81       	ldd	r24, Z+2	; 0x02
    30a8:	93 81       	ldd	r25, Z+3	; 0x03
    30aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ae:	dc 01       	movw	r26, r24
    30b0:	cb 01       	movw	r24, r22
    30b2:	9e af       	std	Y+62, r25	; 0x3e
    30b4:	8d af       	std	Y+61, r24	; 0x3d
    30b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    30b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    30ba:	9a af       	std	Y+58, r25	; 0x3a
    30bc:	89 af       	std	Y+57, r24	; 0x39
    30be:	89 ad       	ldd	r24, Y+57	; 0x39
    30c0:	9a ad       	ldd	r25, Y+58	; 0x3a
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	f1 f7       	brne	.-4      	; 0x30c2 <LCD_displayCharacter+0x436>
    30c6:	9a af       	std	Y+58, r25	; 0x3a
    30c8:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT, E);
    30ca:	ab e3       	ldi	r26, 0x3B	; 59
    30cc:	b0 e0       	ldi	r27, 0x00	; 0
    30ce:	eb e3       	ldi	r30, 0x3B	; 59
    30d0:	f0 e0       	ldi	r31, 0x00	; 0
    30d2:	80 81       	ld	r24, Z
    30d4:	87 7f       	andi	r24, 0xF7	; 247
    30d6:	8c 93       	st	X, r24
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	a0 e8       	ldi	r26, 0x80	; 128
    30de:	bf e3       	ldi	r27, 0x3F	; 63
    30e0:	8d ab       	std	Y+53, r24	; 0x35
    30e2:	9e ab       	std	Y+54, r25	; 0x36
    30e4:	af ab       	std	Y+55, r26	; 0x37
    30e6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e8:	6d a9       	ldd	r22, Y+53	; 0x35
    30ea:	7e a9       	ldd	r23, Y+54	; 0x36
    30ec:	8f a9       	ldd	r24, Y+55	; 0x37
    30ee:	98 ad       	ldd	r25, Y+56	; 0x38
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	4a e7       	ldi	r20, 0x7A	; 122
    30f6:	55 e4       	ldi	r21, 0x45	; 69
    30f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	89 ab       	std	Y+49, r24	; 0x31
    3102:	9a ab       	std	Y+50, r25	; 0x32
    3104:	ab ab       	std	Y+51, r26	; 0x33
    3106:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3108:	69 a9       	ldd	r22, Y+49	; 0x31
    310a:	7a a9       	ldd	r23, Y+50	; 0x32
    310c:	8b a9       	ldd	r24, Y+51	; 0x33
    310e:	9c a9       	ldd	r25, Y+52	; 0x34
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	40 e8       	ldi	r20, 0x80	; 128
    3116:	5f e3       	ldi	r21, 0x3F	; 63
    3118:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    311c:	88 23       	and	r24, r24
    311e:	2c f4       	brge	.+10     	; 0x312a <LCD_displayCharacter+0x49e>
		__ticks = 1;
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	98 ab       	std	Y+48, r25	; 0x30
    3126:	8f a7       	std	Y+47, r24	; 0x2f
    3128:	3f c0       	rjmp	.+126    	; 0x31a8 <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    312a:	69 a9       	ldd	r22, Y+49	; 0x31
    312c:	7a a9       	ldd	r23, Y+50	; 0x32
    312e:	8b a9       	ldd	r24, Y+51	; 0x33
    3130:	9c a9       	ldd	r25, Y+52	; 0x34
    3132:	20 e0       	ldi	r18, 0x00	; 0
    3134:	3f ef       	ldi	r19, 0xFF	; 255
    3136:	4f e7       	ldi	r20, 0x7F	; 127
    3138:	57 e4       	ldi	r21, 0x47	; 71
    313a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    313e:	18 16       	cp	r1, r24
    3140:	4c f5       	brge	.+82     	; 0x3194 <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3142:	6d a9       	ldd	r22, Y+53	; 0x35
    3144:	7e a9       	ldd	r23, Y+54	; 0x36
    3146:	8f a9       	ldd	r24, Y+55	; 0x37
    3148:	98 ad       	ldd	r25, Y+56	; 0x38
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	40 e2       	ldi	r20, 0x20	; 32
    3150:	51 e4       	ldi	r21, 0x41	; 65
    3152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	bc 01       	movw	r22, r24
    315c:	cd 01       	movw	r24, r26
    315e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	98 ab       	std	Y+48, r25	; 0x30
    3168:	8f a7       	std	Y+47, r24	; 0x2f
    316a:	0f c0       	rjmp	.+30     	; 0x318a <LCD_displayCharacter+0x4fe>
    316c:	80 e9       	ldi	r24, 0x90	; 144
    316e:	91 e0       	ldi	r25, 0x01	; 1
    3170:	9e a7       	std	Y+46, r25	; 0x2e
    3172:	8d a7       	std	Y+45, r24	; 0x2d
    3174:	8d a5       	ldd	r24, Y+45	; 0x2d
    3176:	9e a5       	ldd	r25, Y+46	; 0x2e
    3178:	01 97       	sbiw	r24, 0x01	; 1
    317a:	f1 f7       	brne	.-4      	; 0x3178 <LCD_displayCharacter+0x4ec>
    317c:	9e a7       	std	Y+46, r25	; 0x2e
    317e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3180:	8f a5       	ldd	r24, Y+47	; 0x2f
    3182:	98 a9       	ldd	r25, Y+48	; 0x30
    3184:	01 97       	sbiw	r24, 0x01	; 1
    3186:	98 ab       	std	Y+48, r25	; 0x30
    3188:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    318a:	8f a5       	ldd	r24, Y+47	; 0x2f
    318c:	98 a9       	ldd	r25, Y+48	; 0x30
    318e:	00 97       	sbiw	r24, 0x00	; 0
    3190:	69 f7       	brne	.-38     	; 0x316c <LCD_displayCharacter+0x4e0>
    3192:	14 c0       	rjmp	.+40     	; 0x31bc <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3194:	69 a9       	ldd	r22, Y+49	; 0x31
    3196:	7a a9       	ldd	r23, Y+50	; 0x32
    3198:	8b a9       	ldd	r24, Y+51	; 0x33
    319a:	9c a9       	ldd	r25, Y+52	; 0x34
    319c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	98 ab       	std	Y+48, r25	; 0x30
    31a6:	8f a7       	std	Y+47, r24	; 0x2f
    31a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    31aa:	98 a9       	ldd	r25, Y+48	; 0x30
    31ac:	9c a7       	std	Y+44, r25	; 0x2c
    31ae:	8b a7       	std	Y+43, r24	; 0x2b
    31b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    31b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    31b4:	01 97       	sbiw	r24, 0x01	; 1
    31b6:	f1 f7       	brne	.-4      	; 0x31b4 <LCD_displayCharacter+0x528>
    31b8:	9c a7       	std	Y+44, r25	; 0x2c
    31ba:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT, E);
    31bc:	ab e3       	ldi	r26, 0x3B	; 59
    31be:	b0 e0       	ldi	r27, 0x00	; 0
    31c0:	eb e3       	ldi	r30, 0x3B	; 59
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	80 81       	ld	r24, Z
    31c6:	88 60       	ori	r24, 0x08	; 8
    31c8:	8c 93       	st	X, r24
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	a0 e8       	ldi	r26, 0x80	; 128
    31d0:	bf e3       	ldi	r27, 0x3F	; 63
    31d2:	8f a3       	std	Y+39, r24	; 0x27
    31d4:	98 a7       	std	Y+40, r25	; 0x28
    31d6:	a9 a7       	std	Y+41, r26	; 0x29
    31d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31da:	6f a1       	ldd	r22, Y+39	; 0x27
    31dc:	78 a5       	ldd	r23, Y+40	; 0x28
    31de:	89 a5       	ldd	r24, Y+41	; 0x29
    31e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	4a e7       	ldi	r20, 0x7A	; 122
    31e8:	55 e4       	ldi	r21, 0x45	; 69
    31ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	8b a3       	std	Y+35, r24	; 0x23
    31f4:	9c a3       	std	Y+36, r25	; 0x24
    31f6:	ad a3       	std	Y+37, r26	; 0x25
    31f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    31fa:	6b a1       	ldd	r22, Y+35	; 0x23
    31fc:	7c a1       	ldd	r23, Y+36	; 0x24
    31fe:	8d a1       	ldd	r24, Y+37	; 0x25
    3200:	9e a1       	ldd	r25, Y+38	; 0x26
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	40 e8       	ldi	r20, 0x80	; 128
    3208:	5f e3       	ldi	r21, 0x3F	; 63
    320a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    320e:	88 23       	and	r24, r24
    3210:	2c f4       	brge	.+10     	; 0x321c <LCD_displayCharacter+0x590>
		__ticks = 1;
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	9a a3       	std	Y+34, r25	; 0x22
    3218:	89 a3       	std	Y+33, r24	; 0x21
    321a:	3f c0       	rjmp	.+126    	; 0x329a <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    321c:	6b a1       	ldd	r22, Y+35	; 0x23
    321e:	7c a1       	ldd	r23, Y+36	; 0x24
    3220:	8d a1       	ldd	r24, Y+37	; 0x25
    3222:	9e a1       	ldd	r25, Y+38	; 0x26
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	3f ef       	ldi	r19, 0xFF	; 255
    3228:	4f e7       	ldi	r20, 0x7F	; 127
    322a:	57 e4       	ldi	r21, 0x47	; 71
    322c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3230:	18 16       	cp	r1, r24
    3232:	4c f5       	brge	.+82     	; 0x3286 <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3234:	6f a1       	ldd	r22, Y+39	; 0x27
    3236:	78 a5       	ldd	r23, Y+40	; 0x28
    3238:	89 a5       	ldd	r24, Y+41	; 0x29
    323a:	9a a5       	ldd	r25, Y+42	; 0x2a
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	40 e2       	ldi	r20, 0x20	; 32
    3242:	51 e4       	ldi	r21, 0x41	; 65
    3244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	bc 01       	movw	r22, r24
    324e:	cd 01       	movw	r24, r26
    3250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	9a a3       	std	Y+34, r25	; 0x22
    325a:	89 a3       	std	Y+33, r24	; 0x21
    325c:	0f c0       	rjmp	.+30     	; 0x327c <LCD_displayCharacter+0x5f0>
    325e:	80 e9       	ldi	r24, 0x90	; 144
    3260:	91 e0       	ldi	r25, 0x01	; 1
    3262:	98 a3       	std	Y+32, r25	; 0x20
    3264:	8f 8f       	std	Y+31, r24	; 0x1f
    3266:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3268:	98 a1       	ldd	r25, Y+32	; 0x20
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	f1 f7       	brne	.-4      	; 0x326a <LCD_displayCharacter+0x5de>
    326e:	98 a3       	std	Y+32, r25	; 0x20
    3270:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3272:	89 a1       	ldd	r24, Y+33	; 0x21
    3274:	9a a1       	ldd	r25, Y+34	; 0x22
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	9a a3       	std	Y+34, r25	; 0x22
    327a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    327c:	89 a1       	ldd	r24, Y+33	; 0x21
    327e:	9a a1       	ldd	r25, Y+34	; 0x22
    3280:	00 97       	sbiw	r24, 0x00	; 0
    3282:	69 f7       	brne	.-38     	; 0x325e <LCD_displayCharacter+0x5d2>
    3284:	14 c0       	rjmp	.+40     	; 0x32ae <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3286:	6b a1       	ldd	r22, Y+35	; 0x23
    3288:	7c a1       	ldd	r23, Y+36	; 0x24
    328a:	8d a1       	ldd	r24, Y+37	; 0x25
    328c:	9e a1       	ldd	r25, Y+38	; 0x26
    328e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	9a a3       	std	Y+34, r25	; 0x22
    3298:	89 a3       	std	Y+33, r24	; 0x21
    329a:	89 a1       	ldd	r24, Y+33	; 0x21
    329c:	9a a1       	ldd	r25, Y+34	; 0x22
    329e:	9e 8f       	std	Y+30, r25	; 0x1e
    32a0:	8d 8f       	std	Y+29, r24	; 0x1d
    32a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32a6:	01 97       	sbiw	r24, 0x01	; 1
    32a8:	f1 f7       	brne	.-4      	; 0x32a6 <LCD_displayCharacter+0x61a>
    32aa:	9e 8f       	std	Y+30, r25	; 0x1e
    32ac:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#ifdef UPPER_PORT_BITS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    32ae:	ab e3       	ldi	r26, 0x3B	; 59
    32b0:	b0 e0       	ldi	r27, 0x00	; 0
    32b2:	eb e3       	ldi	r30, 0x3B	; 59
    32b4:	f0 e0       	ldi	r31, 0x00	; 0
    32b6:	80 81       	ld	r24, Z
    32b8:	28 2f       	mov	r18, r24
    32ba:	2f 70       	andi	r18, 0x0F	; 15
    32bc:	fe 01       	movw	r30, r28
    32be:	ed 59       	subi	r30, 0x9D	; 157
    32c0:	ff 4f       	sbci	r31, 0xFF	; 255
    32c2:	80 81       	ld	r24, Z
    32c4:	88 2f       	mov	r24, r24
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	82 95       	swap	r24
    32ca:	92 95       	swap	r25
    32cc:	90 7f       	andi	r25, 0xF0	; 240
    32ce:	98 27       	eor	r25, r24
    32d0:	80 7f       	andi	r24, 0xF0	; 240
    32d2:	98 27       	eor	r25, r24
    32d4:	82 2b       	or	r24, r18
    32d6:	8c 93       	st	X, r24
    32d8:	80 e0       	ldi	r24, 0x00	; 0
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	a0 e8       	ldi	r26, 0x80	; 128
    32de:	bf e3       	ldi	r27, 0x3F	; 63
    32e0:	89 8f       	std	Y+25, r24	; 0x19
    32e2:	9a 8f       	std	Y+26, r25	; 0x1a
    32e4:	ab 8f       	std	Y+27, r26	; 0x1b
    32e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e8:	69 8d       	ldd	r22, Y+25	; 0x19
    32ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	4a e7       	ldi	r20, 0x7A	; 122
    32f6:	55 e4       	ldi	r21, 0x45	; 69
    32f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	8d 8b       	std	Y+21, r24	; 0x15
    3302:	9e 8b       	std	Y+22, r25	; 0x16
    3304:	af 8b       	std	Y+23, r26	; 0x17
    3306:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3308:	6d 89       	ldd	r22, Y+21	; 0x15
    330a:	7e 89       	ldd	r23, Y+22	; 0x16
    330c:	8f 89       	ldd	r24, Y+23	; 0x17
    330e:	98 8d       	ldd	r25, Y+24	; 0x18
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	40 e8       	ldi	r20, 0x80	; 128
    3316:	5f e3       	ldi	r21, 0x3F	; 63
    3318:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    331c:	88 23       	and	r24, r24
    331e:	2c f4       	brge	.+10     	; 0x332a <LCD_displayCharacter+0x69e>
		__ticks = 1;
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	9c 8b       	std	Y+20, r25	; 0x14
    3326:	8b 8b       	std	Y+19, r24	; 0x13
    3328:	3f c0       	rjmp	.+126    	; 0x33a8 <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    332a:	6d 89       	ldd	r22, Y+21	; 0x15
    332c:	7e 89       	ldd	r23, Y+22	; 0x16
    332e:	8f 89       	ldd	r24, Y+23	; 0x17
    3330:	98 8d       	ldd	r25, Y+24	; 0x18
    3332:	20 e0       	ldi	r18, 0x00	; 0
    3334:	3f ef       	ldi	r19, 0xFF	; 255
    3336:	4f e7       	ldi	r20, 0x7F	; 127
    3338:	57 e4       	ldi	r21, 0x47	; 71
    333a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    333e:	18 16       	cp	r1, r24
    3340:	4c f5       	brge	.+82     	; 0x3394 <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3342:	69 8d       	ldd	r22, Y+25	; 0x19
    3344:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3346:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3348:	9c 8d       	ldd	r25, Y+28	; 0x1c
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	40 e2       	ldi	r20, 0x20	; 32
    3350:	51 e4       	ldi	r21, 0x41	; 65
    3352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	bc 01       	movw	r22, r24
    335c:	cd 01       	movw	r24, r26
    335e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3362:	dc 01       	movw	r26, r24
    3364:	cb 01       	movw	r24, r22
    3366:	9c 8b       	std	Y+20, r25	; 0x14
    3368:	8b 8b       	std	Y+19, r24	; 0x13
    336a:	0f c0       	rjmp	.+30     	; 0x338a <LCD_displayCharacter+0x6fe>
    336c:	80 e9       	ldi	r24, 0x90	; 144
    336e:	91 e0       	ldi	r25, 0x01	; 1
    3370:	9a 8b       	std	Y+18, r25	; 0x12
    3372:	89 8b       	std	Y+17, r24	; 0x11
    3374:	89 89       	ldd	r24, Y+17	; 0x11
    3376:	9a 89       	ldd	r25, Y+18	; 0x12
    3378:	01 97       	sbiw	r24, 0x01	; 1
    337a:	f1 f7       	brne	.-4      	; 0x3378 <LCD_displayCharacter+0x6ec>
    337c:	9a 8b       	std	Y+18, r25	; 0x12
    337e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3380:	8b 89       	ldd	r24, Y+19	; 0x13
    3382:	9c 89       	ldd	r25, Y+20	; 0x14
    3384:	01 97       	sbiw	r24, 0x01	; 1
    3386:	9c 8b       	std	Y+20, r25	; 0x14
    3388:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    338a:	8b 89       	ldd	r24, Y+19	; 0x13
    338c:	9c 89       	ldd	r25, Y+20	; 0x14
    338e:	00 97       	sbiw	r24, 0x00	; 0
    3390:	69 f7       	brne	.-38     	; 0x336c <LCD_displayCharacter+0x6e0>
    3392:	14 c0       	rjmp	.+40     	; 0x33bc <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3394:	6d 89       	ldd	r22, Y+21	; 0x15
    3396:	7e 89       	ldd	r23, Y+22	; 0x16
    3398:	8f 89       	ldd	r24, Y+23	; 0x17
    339a:	98 8d       	ldd	r25, Y+24	; 0x18
    339c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
    33a4:	9c 8b       	std	Y+20, r25	; 0x14
    33a6:	8b 8b       	std	Y+19, r24	; 0x13
    33a8:	8b 89       	ldd	r24, Y+19	; 0x13
    33aa:	9c 89       	ldd	r25, Y+20	; 0x14
    33ac:	98 8b       	std	Y+16, r25	; 0x10
    33ae:	8f 87       	std	Y+15, r24	; 0x0f
    33b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    33b2:	98 89       	ldd	r25, Y+16	; 0x10
    33b4:	01 97       	sbiw	r24, 0x01	; 1
    33b6:	f1 f7       	brne	.-4      	; 0x33b4 <LCD_displayCharacter+0x728>
    33b8:	98 8b       	std	Y+16, r25	; 0x10
    33ba:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif
#endif
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT, E);
    33bc:	ab e3       	ldi	r26, 0x3B	; 59
    33be:	b0 e0       	ldi	r27, 0x00	; 0
    33c0:	eb e3       	ldi	r30, 0x3B	; 59
    33c2:	f0 e0       	ldi	r31, 0x00	; 0
    33c4:	80 81       	ld	r24, Z
    33c6:	87 7f       	andi	r24, 0xF7	; 247
    33c8:	8c 93       	st	X, r24
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	a0 e8       	ldi	r26, 0x80	; 128
    33d0:	bf e3       	ldi	r27, 0x3F	; 63
    33d2:	8b 87       	std	Y+11, r24	; 0x0b
    33d4:	9c 87       	std	Y+12, r25	; 0x0c
    33d6:	ad 87       	std	Y+13, r26	; 0x0d
    33d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33da:	6b 85       	ldd	r22, Y+11	; 0x0b
    33dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    33de:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	4a e7       	ldi	r20, 0x7A	; 122
    33e8:	55 e4       	ldi	r21, 0x45	; 69
    33ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ee:	dc 01       	movw	r26, r24
    33f0:	cb 01       	movw	r24, r22
    33f2:	8f 83       	std	Y+7, r24	; 0x07
    33f4:	98 87       	std	Y+8, r25	; 0x08
    33f6:	a9 87       	std	Y+9, r26	; 0x09
    33f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33fa:	6f 81       	ldd	r22, Y+7	; 0x07
    33fc:	78 85       	ldd	r23, Y+8	; 0x08
    33fe:	89 85       	ldd	r24, Y+9	; 0x09
    3400:	9a 85       	ldd	r25, Y+10	; 0x0a
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	40 e8       	ldi	r20, 0x80	; 128
    3408:	5f e3       	ldi	r21, 0x3F	; 63
    340a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    340e:	88 23       	and	r24, r24
    3410:	2c f4       	brge	.+10     	; 0x341c <LCD_displayCharacter+0x790>
		__ticks = 1;
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	9e 83       	std	Y+6, r25	; 0x06
    3418:	8d 83       	std	Y+5, r24	; 0x05
    341a:	3f c0       	rjmp	.+126    	; 0x349a <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    341c:	6f 81       	ldd	r22, Y+7	; 0x07
    341e:	78 85       	ldd	r23, Y+8	; 0x08
    3420:	89 85       	ldd	r24, Y+9	; 0x09
    3422:	9a 85       	ldd	r25, Y+10	; 0x0a
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	3f ef       	ldi	r19, 0xFF	; 255
    3428:	4f e7       	ldi	r20, 0x7F	; 127
    342a:	57 e4       	ldi	r21, 0x47	; 71
    342c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3430:	18 16       	cp	r1, r24
    3432:	4c f5       	brge	.+82     	; 0x3486 <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3434:	6b 85       	ldd	r22, Y+11	; 0x0b
    3436:	7c 85       	ldd	r23, Y+12	; 0x0c
    3438:	8d 85       	ldd	r24, Y+13	; 0x0d
    343a:	9e 85       	ldd	r25, Y+14	; 0x0e
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	40 e2       	ldi	r20, 0x20	; 32
    3442:	51 e4       	ldi	r21, 0x41	; 65
    3444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3448:	dc 01       	movw	r26, r24
    344a:	cb 01       	movw	r24, r22
    344c:	bc 01       	movw	r22, r24
    344e:	cd 01       	movw	r24, r26
    3450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3454:	dc 01       	movw	r26, r24
    3456:	cb 01       	movw	r24, r22
    3458:	9e 83       	std	Y+6, r25	; 0x06
    345a:	8d 83       	std	Y+5, r24	; 0x05
    345c:	0f c0       	rjmp	.+30     	; 0x347c <LCD_displayCharacter+0x7f0>
    345e:	80 e9       	ldi	r24, 0x90	; 144
    3460:	91 e0       	ldi	r25, 0x01	; 1
    3462:	9c 83       	std	Y+4, r25	; 0x04
    3464:	8b 83       	std	Y+3, r24	; 0x03
    3466:	8b 81       	ldd	r24, Y+3	; 0x03
    3468:	9c 81       	ldd	r25, Y+4	; 0x04
    346a:	01 97       	sbiw	r24, 0x01	; 1
    346c:	f1 f7       	brne	.-4      	; 0x346a <LCD_displayCharacter+0x7de>
    346e:	9c 83       	std	Y+4, r25	; 0x04
    3470:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3472:	8d 81       	ldd	r24, Y+5	; 0x05
    3474:	9e 81       	ldd	r25, Y+6	; 0x06
    3476:	01 97       	sbiw	r24, 0x01	; 1
    3478:	9e 83       	std	Y+6, r25	; 0x06
    347a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    347c:	8d 81       	ldd	r24, Y+5	; 0x05
    347e:	9e 81       	ldd	r25, Y+6	; 0x06
    3480:	00 97       	sbiw	r24, 0x00	; 0
    3482:	69 f7       	brne	.-38     	; 0x345e <LCD_displayCharacter+0x7d2>
    3484:	14 c0       	rjmp	.+40     	; 0x34ae <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3486:	6f 81       	ldd	r22, Y+7	; 0x07
    3488:	78 85       	ldd	r23, Y+8	; 0x08
    348a:	89 85       	ldd	r24, Y+9	; 0x09
    348c:	9a 85       	ldd	r25, Y+10	; 0x0a
    348e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	9e 83       	std	Y+6, r25	; 0x06
    3498:	8d 83       	std	Y+5, r24	; 0x05
    349a:	8d 81       	ldd	r24, Y+5	; 0x05
    349c:	9e 81       	ldd	r25, Y+6	; 0x06
    349e:	9a 83       	std	Y+2, r25	; 0x02
    34a0:	89 83       	std	Y+1, r24	; 0x01
    34a2:	89 81       	ldd	r24, Y+1	; 0x01
    34a4:	9a 81       	ldd	r25, Y+2	; 0x02
    34a6:	01 97       	sbiw	r24, 0x01	; 1
    34a8:	f1 f7       	brne	.-4      	; 0x34a6 <LCD_displayCharacter+0x81a>
    34aa:	9a 83       	std	Y+2, r25	; 0x02
    34ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    34ae:	cd 59       	subi	r28, 0x9D	; 157
    34b0:	df 4f       	sbci	r29, 0xFF	; 255
    34b2:	0f b6       	in	r0, 0x3f	; 63
    34b4:	f8 94       	cli
    34b6:	de bf       	out	0x3e, r29	; 62
    34b8:	0f be       	out	0x3f, r0	; 63
    34ba:	cd bf       	out	0x3d, r28	; 61
    34bc:	cf 91       	pop	r28
    34be:	df 91       	pop	r29
    34c0:	1f 91       	pop	r17
    34c2:	0f 91       	pop	r16
    34c4:	08 95       	ret

000034c6 <LCD_displayString>:

/*
 * Description : A Function to display a string.
 */
void LCD_displayString(const sint8_t* str)
{
    34c6:	df 93       	push	r29
    34c8:	cf 93       	push	r28
    34ca:	00 d0       	rcall	.+0      	; 0x34cc <LCD_displayString+0x6>
    34cc:	cd b7       	in	r28, 0x3d	; 61
    34ce:	de b7       	in	r29, 0x3e	; 62
    34d0:	9a 83       	std	Y+2, r25	; 0x02
    34d2:	89 83       	std	Y+1, r24	; 0x01
    34d4:	0a c0       	rjmp	.+20     	; 0x34ea <LCD_displayString+0x24>
	while((*str) != '\0')
	{
		LCD_displayCharacter(*str);
    34d6:	e9 81       	ldd	r30, Y+1	; 0x01
    34d8:	fa 81       	ldd	r31, Y+2	; 0x02
    34da:	80 81       	ld	r24, Z
    34dc:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <LCD_displayCharacter>
		str++;
    34e0:	89 81       	ldd	r24, Y+1	; 0x01
    34e2:	9a 81       	ldd	r25, Y+2	; 0x02
    34e4:	01 96       	adiw	r24, 0x01	; 1
    34e6:	9a 83       	std	Y+2, r25	; 0x02
    34e8:	89 83       	std	Y+1, r24	; 0x01
/*
 * Description : A Function to display a string.
 */
void LCD_displayString(const sint8_t* str)
{
	while((*str) != '\0')
    34ea:	e9 81       	ldd	r30, Y+1	; 0x01
    34ec:	fa 81       	ldd	r31, Y+2	; 0x02
    34ee:	80 81       	ld	r24, Z
    34f0:	88 23       	and	r24, r24
    34f2:	89 f7       	brne	.-30     	; 0x34d6 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*str);
		str++;
	}
}
    34f4:	0f 90       	pop	r0
    34f6:	0f 90       	pop	r0
    34f8:	cf 91       	pop	r28
    34fa:	df 91       	pop	r29
    34fc:	08 95       	ret

000034fe <LCD_goToRowColumn>:

/*
 * Description : A Function to move the cursor to an exact spot.
 */
void LCD_goToRowColumn(uint8_t row, uint8_t col)
{
    34fe:	df 93       	push	r29
    3500:	cf 93       	push	r28
    3502:	00 d0       	rcall	.+0      	; 0x3504 <LCD_goToRowColumn+0x6>
    3504:	00 d0       	rcall	.+0      	; 0x3506 <LCD_goToRowColumn+0x8>
    3506:	0f 92       	push	r0
    3508:	cd b7       	in	r28, 0x3d	; 61
    350a:	de b7       	in	r29, 0x3e	; 62
    350c:	8a 83       	std	Y+2, r24	; 0x02
    350e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t address;
	switch(row)
    3510:	8a 81       	ldd	r24, Y+2	; 0x02
    3512:	28 2f       	mov	r18, r24
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	3d 83       	std	Y+5, r19	; 0x05
    3518:	2c 83       	std	Y+4, r18	; 0x04
    351a:	8c 81       	ldd	r24, Y+4	; 0x04
    351c:	9d 81       	ldd	r25, Y+5	; 0x05
    351e:	81 30       	cpi	r24, 0x01	; 1
    3520:	91 05       	cpc	r25, r1
    3522:	c1 f0       	breq	.+48     	; 0x3554 <LCD_goToRowColumn+0x56>
    3524:	2c 81       	ldd	r18, Y+4	; 0x04
    3526:	3d 81       	ldd	r19, Y+5	; 0x05
    3528:	22 30       	cpi	r18, 0x02	; 2
    352a:	31 05       	cpc	r19, r1
    352c:	2c f4       	brge	.+10     	; 0x3538 <LCD_goToRowColumn+0x3a>
    352e:	8c 81       	ldd	r24, Y+4	; 0x04
    3530:	9d 81       	ldd	r25, Y+5	; 0x05
    3532:	00 97       	sbiw	r24, 0x00	; 0
    3534:	61 f0       	breq	.+24     	; 0x354e <LCD_goToRowColumn+0x50>
    3536:	19 c0       	rjmp	.+50     	; 0x356a <LCD_goToRowColumn+0x6c>
    3538:	2c 81       	ldd	r18, Y+4	; 0x04
    353a:	3d 81       	ldd	r19, Y+5	; 0x05
    353c:	22 30       	cpi	r18, 0x02	; 2
    353e:	31 05       	cpc	r19, r1
    3540:	69 f0       	breq	.+26     	; 0x355c <LCD_goToRowColumn+0x5e>
    3542:	8c 81       	ldd	r24, Y+4	; 0x04
    3544:	9d 81       	ldd	r25, Y+5	; 0x05
    3546:	83 30       	cpi	r24, 0x03	; 3
    3548:	91 05       	cpc	r25, r1
    354a:	61 f0       	breq	.+24     	; 0x3564 <LCD_goToRowColumn+0x66>
    354c:	0e c0       	rjmp	.+28     	; 0x356a <LCD_goToRowColumn+0x6c>
	{
	case 0 :
		address = col;
    354e:	8b 81       	ldd	r24, Y+3	; 0x03
    3550:	89 83       	std	Y+1, r24	; 0x01
    3552:	0b c0       	rjmp	.+22     	; 0x356a <LCD_goToRowColumn+0x6c>
		break;
	case 1 :
		address = col + 0x40;
    3554:	8b 81       	ldd	r24, Y+3	; 0x03
    3556:	80 5c       	subi	r24, 0xC0	; 192
    3558:	89 83       	std	Y+1, r24	; 0x01
    355a:	07 c0       	rjmp	.+14     	; 0x356a <LCD_goToRowColumn+0x6c>
		break;
	case 2 :
		address = col + 0x10;
    355c:	8b 81       	ldd	r24, Y+3	; 0x03
    355e:	80 5f       	subi	r24, 0xF0	; 240
    3560:	89 83       	std	Y+1, r24	; 0x01
    3562:	03 c0       	rjmp	.+6      	; 0x356a <LCD_goToRowColumn+0x6c>
		break;
	case 3 :
		address = col + 0x50;
    3564:	8b 81       	ldd	r24, Y+3	; 0x03
    3566:	80 5b       	subi	r24, 0xB0	; 176
    3568:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(address | SET_CURSOR_LOCATION);
    356a:	89 81       	ldd	r24, Y+1	; 0x01
    356c:	80 68       	ori	r24, 0x80	; 128
    356e:	0e 94 29 12 	call	0x2452	; 0x2452 <LCD_sendCommand>
}
    3572:	0f 90       	pop	r0
    3574:	0f 90       	pop	r0
    3576:	0f 90       	pop	r0
    3578:	0f 90       	pop	r0
    357a:	0f 90       	pop	r0
    357c:	cf 91       	pop	r28
    357e:	df 91       	pop	r29
    3580:	08 95       	ret

00003582 <LCD_displayStringRowColumn>:

/*
 * Description : A Function to move the cursor to an exact spot and display a string at the spot.
 */
void LCD_displayStringRowColumn(uint8_t row, uint8_t col, const sint8_t* str)
{
    3582:	df 93       	push	r29
    3584:	cf 93       	push	r28
    3586:	00 d0       	rcall	.+0      	; 0x3588 <LCD_displayStringRowColumn+0x6>
    3588:	00 d0       	rcall	.+0      	; 0x358a <LCD_displayStringRowColumn+0x8>
    358a:	cd b7       	in	r28, 0x3d	; 61
    358c:	de b7       	in	r29, 0x3e	; 62
    358e:	89 83       	std	Y+1, r24	; 0x01
    3590:	6a 83       	std	Y+2, r22	; 0x02
    3592:	5c 83       	std	Y+4, r21	; 0x04
    3594:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row, col);
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	6a 81       	ldd	r22, Y+2	; 0x02
    359a:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <LCD_goToRowColumn>
	LCD_displayString(str);
    359e:	8b 81       	ldd	r24, Y+3	; 0x03
    35a0:	9c 81       	ldd	r25, Y+4	; 0x04
    35a2:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <LCD_displayString>
}
    35a6:	0f 90       	pop	r0
    35a8:	0f 90       	pop	r0
    35aa:	0f 90       	pop	r0
    35ac:	0f 90       	pop	r0
    35ae:	cf 91       	pop	r28
    35b0:	df 91       	pop	r29
    35b2:	08 95       	ret

000035b4 <LCD_displayInteger>:

/*
 * Description : A Function to display an integer number.
 */
void LCD_displayInteger(sint32_t num)
{
    35b4:	df 93       	push	r29
    35b6:	cf 93       	push	r28
    35b8:	cd b7       	in	r28, 0x3d	; 61
    35ba:	de b7       	in	r29, 0x3e	; 62
    35bc:	63 97       	sbiw	r28, 0x13	; 19
    35be:	0f b6       	in	r0, 0x3f	; 63
    35c0:	f8 94       	cli
    35c2:	de bf       	out	0x3e, r29	; 62
    35c4:	0f be       	out	0x3f, r0	; 63
    35c6:	cd bf       	out	0x3d, r28	; 61
    35c8:	68 8b       	std	Y+16, r22	; 0x10
    35ca:	79 8b       	std	Y+17, r23	; 0x11
    35cc:	8a 8b       	std	Y+18, r24	; 0x12
    35ce:	9b 8b       	std	Y+19, r25	; 0x13
	sint8_t buff[12];
	sint8_t* ptr = &buff[11]; 				// char *ptr = (buff + 11); [] is another way of describing the dereferencing operator
    35d0:	ce 01       	movw	r24, r28
    35d2:	04 96       	adiw	r24, 0x04	; 4
    35d4:	0b 96       	adiw	r24, 0x0b	; 11
    35d6:	9b 83       	std	Y+3, r25	; 0x03
    35d8:	8a 83       	std	Y+2, r24	; 0x02
	char N_flag = 0;
    35da:	19 82       	std	Y+1, r1	; 0x01
	if(num < 0)
    35dc:	88 89       	ldd	r24, Y+16	; 0x10
    35de:	99 89       	ldd	r25, Y+17	; 0x11
    35e0:	aa 89       	ldd	r26, Y+18	; 0x12
    35e2:	bb 89       	ldd	r27, Y+19	; 0x13
    35e4:	bb 23       	and	r27, r27
    35e6:	8c f4       	brge	.+34     	; 0x360a <LCD_displayInteger+0x56>
	{
		N_flag = 1;
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	89 83       	std	Y+1, r24	; 0x01
		num = -num;
    35ec:	88 89       	ldd	r24, Y+16	; 0x10
    35ee:	99 89       	ldd	r25, Y+17	; 0x11
    35f0:	aa 89       	ldd	r26, Y+18	; 0x12
    35f2:	bb 89       	ldd	r27, Y+19	; 0x13
    35f4:	b0 95       	com	r27
    35f6:	a0 95       	com	r26
    35f8:	90 95       	com	r25
    35fa:	81 95       	neg	r24
    35fc:	9f 4f       	sbci	r25, 0xFF	; 255
    35fe:	af 4f       	sbci	r26, 0xFF	; 255
    3600:	bf 4f       	sbci	r27, 0xFF	; 255
    3602:	88 8b       	std	Y+16, r24	; 0x10
    3604:	99 8b       	std	Y+17, r25	; 0x11
    3606:	aa 8b       	std	Y+18, r26	; 0x12
    3608:	bb 8b       	std	Y+19, r27	; 0x13
	}
	*ptr = '\0';
    360a:	ea 81       	ldd	r30, Y+2	; 0x02
    360c:	fb 81       	ldd	r31, Y+3	; 0x03
    360e:	10 82       	st	Z, r1
	do{
	    *--ptr = (num % 10) + 48;
    3610:	8a 81       	ldd	r24, Y+2	; 0x02
    3612:	9b 81       	ldd	r25, Y+3	; 0x03
    3614:	01 97       	sbiw	r24, 0x01	; 1
    3616:	9b 83       	std	Y+3, r25	; 0x03
    3618:	8a 83       	std	Y+2, r24	; 0x02
    361a:	88 89       	ldd	r24, Y+16	; 0x10
    361c:	99 89       	ldd	r25, Y+17	; 0x11
    361e:	aa 89       	ldd	r26, Y+18	; 0x12
    3620:	bb 89       	ldd	r27, Y+19	; 0x13
    3622:	2a e0       	ldi	r18, 0x0A	; 10
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	40 e0       	ldi	r20, 0x00	; 0
    3628:	50 e0       	ldi	r21, 0x00	; 0
    362a:	bc 01       	movw	r22, r24
    362c:	cd 01       	movw	r24, r26
    362e:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <__divmodsi4>
    3632:	dc 01       	movw	r26, r24
    3634:	cb 01       	movw	r24, r22
    3636:	80 5d       	subi	r24, 0xD0	; 208
    3638:	ea 81       	ldd	r30, Y+2	; 0x02
    363a:	fb 81       	ldd	r31, Y+3	; 0x03
    363c:	80 83       	st	Z, r24
	    num /= 10;
    363e:	88 89       	ldd	r24, Y+16	; 0x10
    3640:	99 89       	ldd	r25, Y+17	; 0x11
    3642:	aa 89       	ldd	r26, Y+18	; 0x12
    3644:	bb 89       	ldd	r27, Y+19	; 0x13
    3646:	2a e0       	ldi	r18, 0x0A	; 10
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	40 e0       	ldi	r20, 0x00	; 0
    364c:	50 e0       	ldi	r21, 0x00	; 0
    364e:	bc 01       	movw	r22, r24
    3650:	cd 01       	movw	r24, r26
    3652:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <__divmodsi4>
    3656:	da 01       	movw	r26, r20
    3658:	c9 01       	movw	r24, r18
    365a:	88 8b       	std	Y+16, r24	; 0x10
    365c:	99 8b       	std	Y+17, r25	; 0x11
    365e:	aa 8b       	std	Y+18, r26	; 0x12
    3660:	bb 8b       	std	Y+19, r27	; 0x13
	}while(num != 0);
    3662:	88 89       	ldd	r24, Y+16	; 0x10
    3664:	99 89       	ldd	r25, Y+17	; 0x11
    3666:	aa 89       	ldd	r26, Y+18	; 0x12
    3668:	bb 89       	ldd	r27, Y+19	; 0x13
    366a:	00 97       	sbiw	r24, 0x00	; 0
    366c:	a1 05       	cpc	r26, r1
    366e:	b1 05       	cpc	r27, r1
    3670:	79 f6       	brne	.-98     	; 0x3610 <LCD_displayInteger+0x5c>
	if(N_flag)
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	88 23       	and	r24, r24
    3676:	49 f0       	breq	.+18     	; 0x368a <LCD_displayInteger+0xd6>
		*--ptr = '-';
    3678:	8a 81       	ldd	r24, Y+2	; 0x02
    367a:	9b 81       	ldd	r25, Y+3	; 0x03
    367c:	01 97       	sbiw	r24, 0x01	; 1
    367e:	9b 83       	std	Y+3, r25	; 0x03
    3680:	8a 83       	std	Y+2, r24	; 0x02
    3682:	ea 81       	ldd	r30, Y+2	; 0x02
    3684:	fb 81       	ldd	r31, Y+3	; 0x03
    3686:	8d e2       	ldi	r24, 0x2D	; 45
    3688:	80 83       	st	Z, r24
	LCD_displayString(ptr);
    368a:	8a 81       	ldd	r24, Y+2	; 0x02
    368c:	9b 81       	ldd	r25, Y+3	; 0x03
    368e:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <LCD_displayString>
}
    3692:	63 96       	adiw	r28, 0x13	; 19
    3694:	0f b6       	in	r0, 0x3f	; 63
    3696:	f8 94       	cli
    3698:	de bf       	out	0x3e, r29	; 62
    369a:	0f be       	out	0x3f, r0	; 63
    369c:	cd bf       	out	0x3d, r28	; 61
    369e:	cf 91       	pop	r28
    36a0:	df 91       	pop	r29
    36a2:	08 95       	ret

000036a4 <LCD_clearScreen>:

/*
 * Description : A Function to Clear the LCD Screen.
 */
void LCD_clearScreen(void)
{
    36a4:	df 93       	push	r29
    36a6:	cf 93       	push	r28
    36a8:	cd b7       	in	r28, 0x3d	; 61
    36aa:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    36ac:	81 e0       	ldi	r24, 0x01	; 1
    36ae:	0e 94 29 12 	call	0x2452	; 0x2452 <LCD_sendCommand>
}
    36b2:	cf 91       	pop	r28
    36b4:	df 91       	pop	r29
    36b6:	08 95       	ret

000036b8 <Us_Init>:


/*- APIs IMPLEMENTATION ------------------------------------*/

ERROR_STATUS Us_Init(void)
{
    36b8:	df 93       	push	r29
    36ba:	cf 93       	push	r28
    36bc:	cd b7       	in	r28, 0x3d	; 61
    36be:	de b7       	in	r29, 0x3e	; 62
    36c0:	2b 97       	sbiw	r28, 0x0b	; 11
    36c2:	0f b6       	in	r0, 0x3f	; 63
    36c4:	f8 94       	cli
    36c6:	de bf       	out	0x3e, r29	; 62
    36c8:	0f be       	out	0x3f, r0	; 63
    36ca:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_Ret = E_OK;
    36cc:	19 82       	std	Y+1, r1	; 0x01

	/* A structure to initialize the DIO trigger bit as output */
	DIO_Cfg_s Dio_InitializationConfig = {US_TRIGGER_GPIO, US_TRIGGER_BIT, OUTPUT};
    36ce:	ce 01       	movw	r24, r28
    36d0:	02 96       	adiw	r24, 0x02	; 2
    36d2:	98 87       	std	Y+8, r25	; 0x08
    36d4:	8f 83       	std	Y+7, r24	; 0x07
    36d6:	e8 e6       	ldi	r30, 0x68	; 104
    36d8:	f1 e0       	ldi	r31, 0x01	; 1
    36da:	fa 87       	std	Y+10, r31	; 0x0a
    36dc:	e9 87       	std	Y+9, r30	; 0x09
    36de:	f3 e0       	ldi	r31, 0x03	; 3
    36e0:	fb 87       	std	Y+11, r31	; 0x0b
    36e2:	e9 85       	ldd	r30, Y+9	; 0x09
    36e4:	fa 85       	ldd	r31, Y+10	; 0x0a
    36e6:	00 80       	ld	r0, Z
    36e8:	89 85       	ldd	r24, Y+9	; 0x09
    36ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ec:	01 96       	adiw	r24, 0x01	; 1
    36ee:	9a 87       	std	Y+10, r25	; 0x0a
    36f0:	89 87       	std	Y+9, r24	; 0x09
    36f2:	ef 81       	ldd	r30, Y+7	; 0x07
    36f4:	f8 85       	ldd	r31, Y+8	; 0x08
    36f6:	00 82       	st	Z, r0
    36f8:	8f 81       	ldd	r24, Y+7	; 0x07
    36fa:	98 85       	ldd	r25, Y+8	; 0x08
    36fc:	01 96       	adiw	r24, 0x01	; 1
    36fe:	98 87       	std	Y+8, r25	; 0x08
    3700:	8f 83       	std	Y+7, r24	; 0x07
    3702:	9b 85       	ldd	r25, Y+11	; 0x0b
    3704:	91 50       	subi	r25, 0x01	; 1
    3706:	9b 87       	std	Y+11, r25	; 0x0b
    3708:	eb 85       	ldd	r30, Y+11	; 0x0b
    370a:	ee 23       	and	r30, r30
    370c:	51 f7       	brne	.-44     	; 0x36e2 <Us_Init+0x2a>
	/* A structure to initialize the ICU module */
	Icu_cfg_s Icu_InitializationConfig = {ICU_CH2, ICU_TIMER_CH2};
    370e:	82 e0       	ldi	r24, 0x02	; 2
    3710:	8d 83       	std	Y+5, r24	; 0x05
    3712:	82 e0       	ldi	r24, 0x02	; 2
    3714:	8e 83       	std	Y+6, r24	; 0x06

	/* Initialization */
	au8_Ret |= DIO_init(&Dio_InitializationConfig);
    3716:	ce 01       	movw	r24, r28
    3718:	02 96       	adiw	r24, 0x02	; 2
    371a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_init>
    371e:	98 2f       	mov	r25, r24
    3720:	89 81       	ldd	r24, Y+1	; 0x01
    3722:	89 2b       	or	r24, r25
    3724:	89 83       	std	Y+1, r24	; 0x01
	au8_Ret |= Icu_Init(&Icu_InitializationConfig);
    3726:	ce 01       	movw	r24, r28
    3728:	05 96       	adiw	r24, 0x05	; 5
    372a:	0e 94 10 08 	call	0x1020	; 0x1020 <Icu_Init>
    372e:	98 2f       	mov	r25, r24
    3730:	89 81       	ldd	r24, Y+1	; 0x01
    3732:	89 2b       	or	r24, r25
    3734:	89 83       	std	Y+1, r24	; 0x01

	return au8_Ret;
    3736:	89 81       	ldd	r24, Y+1	; 0x01
}
    3738:	2b 96       	adiw	r28, 0x0b	; 11
    373a:	0f b6       	in	r0, 0x3f	; 63
    373c:	f8 94       	cli
    373e:	de bf       	out	0x3e, r29	; 62
    3740:	0f be       	out	0x3f, r0	; 63
    3742:	cd bf       	out	0x3d, r28	; 61
    3744:	cf 91       	pop	r28
    3746:	df 91       	pop	r29
    3748:	08 95       	ret

0000374a <Us_Trigger>:

ERROR_STATUS Us_Trigger(void)
{
    374a:	df 93       	push	r29
    374c:	cf 93       	push	r28
    374e:	0f 92       	push	r0
    3750:	cd b7       	in	r28, 0x3d	; 61
    3752:	de b7       	in	r29, 0x3e	; 62
	uint8_t au8_Ret = E_OK;
    3754:	19 82       	std	Y+1, r1	; 0x01

	/* Sending trigger by putting the pin to high level then to low level after >1 msec delay */
	au8_Ret |= DIO_Write(US_TRIGGER_GPIO, US_TRIGGER_BIT, HIGH);
    3756:	83 e0       	ldi	r24, 0x03	; 3
    3758:	61 e0       	ldi	r22, 0x01	; 1
    375a:	4f ef       	ldi	r20, 0xFF	; 255
    375c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_Write>
    3760:	98 2f       	mov	r25, r24
    3762:	89 81       	ldd	r24, Y+1	; 0x01
    3764:	89 2b       	or	r24, r25
    3766:	89 83       	std	Y+1, r24	; 0x01
	softwareDelayMs(5);
    3768:	65 e0       	ldi	r22, 0x05	; 5
    376a:	70 e0       	ldi	r23, 0x00	; 0
    376c:	80 e0       	ldi	r24, 0x00	; 0
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <softwareDelayMs>
	au8_Ret |= DIO_Write(US_TRIGGER_GPIO, US_TRIGGER_BIT, LOW);
    3774:	83 e0       	ldi	r24, 0x03	; 3
    3776:	61 e0       	ldi	r22, 0x01	; 1
    3778:	40 e0       	ldi	r20, 0x00	; 0
    377a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_Write>
    377e:	98 2f       	mov	r25, r24
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	89 2b       	or	r24, r25
    3784:	89 83       	std	Y+1, r24	; 0x01

	return au8_Ret;
    3786:	89 81       	ldd	r24, Y+1	; 0x01
}
    3788:	0f 90       	pop	r0
    378a:	cf 91       	pop	r28
    378c:	df 91       	pop	r29
    378e:	08 95       	ret

00003790 <Us_GetDistance>:

ERROR_STATUS Us_GetDistance(uint16_t* Distance)
{
    3790:	df 93       	push	r29
    3792:	cf 93       	push	r28
    3794:	cd b7       	in	r28, 0x3d	; 61
    3796:	de b7       	in	r29, 0x3e	; 62
    3798:	27 97       	sbiw	r28, 0x07	; 7
    379a:	0f b6       	in	r0, 0x3f	; 63
    379c:	f8 94       	cli
    379e:	de bf       	out	0x3e, r29	; 62
    37a0:	0f be       	out	0x3f, r0	; 63
    37a2:	cd bf       	out	0x3d, r28	; 61
    37a4:	9f 83       	std	Y+7, r25	; 0x07
    37a6:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t au8_Ret = E_OK;
    37a8:	19 82       	std	Y+1, r1	; 0x01

	/* The value to be returned from the Icu_ReadTime function and contains the timer counter value */
	uint32_t au32_CounterValue = 0;
    37aa:	1a 82       	std	Y+2, r1	; 0x02
    37ac:	1b 82       	std	Y+3, r1	; 0x03
    37ae:	1c 82       	std	Y+4, r1	; 0x04
    37b0:	1d 82       	std	Y+5, r1	; 0x05

	/* Reading the timer counter value required to calculate the edge detection time */
	au8_Ret |= Icu_ReadTime(ICU_CH2, ICU_RISE_TO_FALL, &au32_CounterValue);
    37b2:	9e 01       	movw	r18, r28
    37b4:	2e 5f       	subi	r18, 0xFE	; 254
    37b6:	3f 4f       	sbci	r19, 0xFF	; 255
    37b8:	82 e0       	ldi	r24, 0x02	; 2
    37ba:	61 e0       	ldi	r22, 0x01	; 1
    37bc:	a9 01       	movw	r20, r18
    37be:	0e 94 55 08 	call	0x10aa	; 0x10aa <Icu_ReadTime>
    37c2:	98 2f       	mov	r25, r24
    37c4:	89 81       	ldd	r24, Y+1	; 0x01
    37c6:	89 2b       	or	r24, r25
    37c8:	89 83       	std	Y+1, r24	; 0x01

	*Distance = (uint16_t)((au32_CounterValue) * US_CONSTANT_PRESCALER_1024);
    37ca:	8a 81       	ldd	r24, Y+2	; 0x02
    37cc:	9b 81       	ldd	r25, Y+3	; 0x03
    37ce:	ac 81       	ldd	r26, Y+4	; 0x04
    37d0:	bd 81       	ldd	r27, Y+5	; 0x05
    37d2:	bc 01       	movw	r22, r24
    37d4:	cd 01       	movw	r24, r26
    37d6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    37da:	dc 01       	movw	r26, r24
    37dc:	cb 01       	movw	r24, r22
    37de:	bc 01       	movw	r22, r24
    37e0:	cd 01       	movw	r24, r26
    37e2:	26 e9       	ldi	r18, 0x96	; 150
    37e4:	33 e4       	ldi	r19, 0x43	; 67
    37e6:	4b e8       	ldi	r20, 0x8B	; 139
    37e8:	5f e3       	ldi	r21, 0x3F	; 63
    37ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ee:	dc 01       	movw	r26, r24
    37f0:	cb 01       	movw	r24, r22
    37f2:	bc 01       	movw	r22, r24
    37f4:	cd 01       	movw	r24, r26
    37f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37fa:	dc 01       	movw	r26, r24
    37fc:	cb 01       	movw	r24, r22
    37fe:	ee 81       	ldd	r30, Y+6	; 0x06
    3800:	ff 81       	ldd	r31, Y+7	; 0x07
    3802:	91 83       	std	Z+1, r25	; 0x01
    3804:	80 83       	st	Z, r24

	return au8_Ret;
    3806:	89 81       	ldd	r24, Y+1	; 0x01
}
    3808:	27 96       	adiw	r28, 0x07	; 7
    380a:	0f b6       	in	r0, 0x3f	; 63
    380c:	f8 94       	cli
    380e:	de bf       	out	0x3e, r29	; 62
    3810:	0f be       	out	0x3f, r0	; 63
    3812:	cd bf       	out	0x3d, r28	; 61
    3814:	cf 91       	pop	r28
    3816:	df 91       	pop	r29
    3818:	08 95       	ret

0000381a <Motor_Init>:


/*- APIs IMPLEMENTATION ------------------------------------*/

ERROR_STATUS Motor_Init(uint8_t Motor_Number)
{
    381a:	df 93       	push	r29
    381c:	cf 93       	push	r28
    381e:	cd b7       	in	r28, 0x3d	; 61
    3820:	de b7       	in	r29, 0x3e	; 62
    3822:	2e 97       	sbiw	r28, 0x0e	; 14
    3824:	0f b6       	in	r0, 0x3f	; 63
    3826:	f8 94       	cli
    3828:	de bf       	out	0x3e, r29	; 62
    382a:	0f be       	out	0x3f, r0	; 63
    382c:	cd bf       	out	0x3d, r28	; 61
    382e:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t au8_Ret = E_OK;
    3830:	19 82       	std	Y+1, r1	; 0x01

	/* A structure to initialize the motor driver */
	DIO_Cfg_s MotorPinsInitialization = {MOTORS_GPIO, 0, OUTPUT};
    3832:	9e 01       	movw	r18, r28
    3834:	2e 5f       	subi	r18, 0xFE	; 254
    3836:	3f 4f       	sbci	r19, 0xFF	; 255
    3838:	3b 87       	std	Y+11, r19	; 0x0b
    383a:	2a 87       	std	Y+10, r18	; 0x0a
    383c:	8b e6       	ldi	r24, 0x6B	; 107
    383e:	91 e0       	ldi	r25, 0x01	; 1
    3840:	9d 87       	std	Y+13, r25	; 0x0d
    3842:	8c 87       	std	Y+12, r24	; 0x0c
    3844:	93 e0       	ldi	r25, 0x03	; 3
    3846:	9e 87       	std	Y+14, r25	; 0x0e
    3848:	ec 85       	ldd	r30, Y+12	; 0x0c
    384a:	fd 85       	ldd	r31, Y+13	; 0x0d
    384c:	00 80       	ld	r0, Z
    384e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3850:	3d 85       	ldd	r19, Y+13	; 0x0d
    3852:	2f 5f       	subi	r18, 0xFF	; 255
    3854:	3f 4f       	sbci	r19, 0xFF	; 255
    3856:	3d 87       	std	Y+13, r19	; 0x0d
    3858:	2c 87       	std	Y+12, r18	; 0x0c
    385a:	ea 85       	ldd	r30, Y+10	; 0x0a
    385c:	fb 85       	ldd	r31, Y+11	; 0x0b
    385e:	00 82       	st	Z, r0
    3860:	2a 85       	ldd	r18, Y+10	; 0x0a
    3862:	3b 85       	ldd	r19, Y+11	; 0x0b
    3864:	2f 5f       	subi	r18, 0xFF	; 255
    3866:	3f 4f       	sbci	r19, 0xFF	; 255
    3868:	3b 87       	std	Y+11, r19	; 0x0b
    386a:	2a 87       	std	Y+10, r18	; 0x0a
    386c:	3e 85       	ldd	r19, Y+14	; 0x0e
    386e:	31 50       	subi	r19, 0x01	; 1
    3870:	3e 87       	std	Y+14, r19	; 0x0e
    3872:	8e 85       	ldd	r24, Y+14	; 0x0e
    3874:	88 23       	and	r24, r24
    3876:	41 f7       	brne	.-48     	; 0x3848 <Motor_Init+0x2e>

	/* A structure to initialize the PWM module */
	Pwm_Cfg_s PwmInitialization = {0, 0};
    3878:	1d 82       	std	Y+5, r1	; 0x05
    387a:	1e 82       	std	Y+6, r1	; 0x06

	switch(Motor_Number)
    387c:	8f 81       	ldd	r24, Y+7	; 0x07
    387e:	e8 2f       	mov	r30, r24
    3880:	f0 e0       	ldi	r31, 0x00	; 0
    3882:	f9 87       	std	Y+9, r31	; 0x09
    3884:	e8 87       	std	Y+8, r30	; 0x08
    3886:	28 85       	ldd	r18, Y+8	; 0x08
    3888:	39 85       	ldd	r19, Y+9	; 0x09
    388a:	22 30       	cpi	r18, 0x02	; 2
    388c:	31 05       	cpc	r19, r1
    388e:	91 f0       	breq	.+36     	; 0x38b4 <Motor_Init+0x9a>
    3890:	88 85       	ldd	r24, Y+8	; 0x08
    3892:	99 85       	ldd	r25, Y+9	; 0x09
    3894:	83 30       	cpi	r24, 0x03	; 3
    3896:	91 05       	cpc	r25, r1
    3898:	a9 f0       	breq	.+42     	; 0x38c4 <Motor_Init+0xaa>
    389a:	e8 85       	ldd	r30, Y+8	; 0x08
    389c:	f9 85       	ldd	r31, Y+9	; 0x09
    389e:	e1 30       	cpi	r30, 0x01	; 1
    38a0:	f1 05       	cpc	r31, r1
    38a2:	d9 f4       	brne	.+54     	; 0x38da <Motor_Init+0xc0>
	{
	case MOTOR_1:
		/* Initialize DIO pins for motor1 */
		MotorPinsInitialization.pins = MOTOR_OUT_1A_BIT | MOTOR_OUT_1B_BIT;
    38a4:	8c e0       	ldi	r24, 0x0C	; 12
    38a6:	8b 83       	std	Y+3, r24	; 0x03
		PwmInitialization.Channel = PWM_CH1A;
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	8d 83       	std	Y+5, r24	; 0x05
		gu8_Motor1_InitFlag = 1;
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	80 93 80 01 	sts	0x0180, r24
    38b2:	15 c0       	rjmp	.+42     	; 0x38de <Motor_Init+0xc4>
		break;
	case MOTOR_2:
		/* Initialize DIO pins for motor2 */
		MotorPinsInitialization.pins = MOTOR_OUT_2A_BIT | MOTOR_OUT_2B_BIT;
    38b4:	80 ec       	ldi	r24, 0xC0	; 192
    38b6:	8b 83       	std	Y+3, r24	; 0x03
		PwmInitialization.Channel = PWM_CH1B;
    38b8:	82 e0       	ldi	r24, 0x02	; 2
    38ba:	8d 83       	std	Y+5, r24	; 0x05
		gu8_Motor2_InitFlag = 1;
    38bc:	81 e0       	ldi	r24, 0x01	; 1
    38be:	80 93 81 01 	sts	0x0181, r24
    38c2:	0d c0       	rjmp	.+26     	; 0x38de <Motor_Init+0xc4>
		break;
	case (MOTOR_1 | MOTOR_2):
		/* Initialize DIO pins for motor1 & motor2 */
		MotorPinsInitialization.pins = MOTOR_OUT_1A_BIT | MOTOR_OUT_1B_BIT | MOTOR_OUT_2A_BIT | MOTOR_OUT_2B_BIT;
    38c4:	8c ec       	ldi	r24, 0xCC	; 204
    38c6:	8b 83       	std	Y+3, r24	; 0x03
		PwmInitialization.Channel = PWM_CH1A | PWM_CH1B;
    38c8:	83 e0       	ldi	r24, 0x03	; 3
    38ca:	8d 83       	std	Y+5, r24	; 0x05
		gu8_Motor1_InitFlag = 1;
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	80 93 80 01 	sts	0x0180, r24
		gu8_Motor2_InitFlag = 1;
    38d2:	81 e0       	ldi	r24, 0x01	; 1
    38d4:	80 93 81 01 	sts	0x0181, r24
    38d8:	02 c0       	rjmp	.+4      	; 0x38de <Motor_Init+0xc4>
		break;
	default:
		au8_Ret = E_NOK;
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	au8_Ret |= DIO_init(&MotorPinsInitialization);
    38de:	ce 01       	movw	r24, r28
    38e0:	02 96       	adiw	r24, 0x02	; 2
    38e2:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_init>
    38e6:	98 2f       	mov	r25, r24
    38e8:	89 81       	ldd	r24, Y+1	; 0x01
    38ea:	89 2b       	or	r24, r25
    38ec:	89 83       	std	Y+1, r24	; 0x01
	au8_Ret |= Pwm_Init(&PwmInitialization);
    38ee:	ce 01       	movw	r24, r28
    38f0:	05 96       	adiw	r24, 0x05	; 5
    38f2:	0e 94 12 09 	call	0x1224	; 0x1224 <Pwm_Init>
    38f6:	98 2f       	mov	r25, r24
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
    38fa:	89 2b       	or	r24, r25
    38fc:	89 83       	std	Y+1, r24	; 0x01

	return au8_Ret;
    38fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3900:	2e 96       	adiw	r28, 0x0e	; 14
    3902:	0f b6       	in	r0, 0x3f	; 63
    3904:	f8 94       	cli
    3906:	de bf       	out	0x3e, r29	; 62
    3908:	0f be       	out	0x3f, r0	; 63
    390a:	cd bf       	out	0x3d, r28	; 61
    390c:	cf 91       	pop	r28
    390e:	df 91       	pop	r29
    3910:	08 95       	ret

00003912 <Motor_Direction>:

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{
    3912:	df 93       	push	r29
    3914:	cf 93       	push	r28
    3916:	cd b7       	in	r28, 0x3d	; 61
    3918:	de b7       	in	r29, 0x3e	; 62
    391a:	29 97       	sbiw	r28, 0x09	; 9
    391c:	0f b6       	in	r0, 0x3f	; 63
    391e:	f8 94       	cli
    3920:	de bf       	out	0x3e, r29	; 62
    3922:	0f be       	out	0x3f, r0	; 63
    3924:	cd bf       	out	0x3d, r28	; 61
    3926:	8c 83       	std	Y+4, r24	; 0x04
    3928:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t au8_Ret = E_OK;
    392a:	1b 82       	std	Y+3, r1	; 0x03

	uint8_t au8_motorBitA = 0;
    392c:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t au8_motorBitB = 0;
    392e:	19 82       	std	Y+1, r1	; 0x01

	/* A switch case to determine whether to set the direction of motor1, motor2, or motor1 and motor2 */
	switch(Motor_Number)
    3930:	8c 81       	ldd	r24, Y+4	; 0x04
    3932:	28 2f       	mov	r18, r24
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	39 87       	std	Y+9, r19	; 0x09
    3938:	28 87       	std	Y+8, r18	; 0x08
    393a:	88 85       	ldd	r24, Y+8	; 0x08
    393c:	99 85       	ldd	r25, Y+9	; 0x09
    393e:	82 30       	cpi	r24, 0x02	; 2
    3940:	91 05       	cpc	r25, r1
    3942:	79 f0       	breq	.+30     	; 0x3962 <Motor_Direction+0x50>
    3944:	28 85       	ldd	r18, Y+8	; 0x08
    3946:	39 85       	ldd	r19, Y+9	; 0x09
    3948:	23 30       	cpi	r18, 0x03	; 3
    394a:	31 05       	cpc	r19, r1
    394c:	79 f0       	breq	.+30     	; 0x396c <Motor_Direction+0x5a>
    394e:	88 85       	ldd	r24, Y+8	; 0x08
    3950:	99 85       	ldd	r25, Y+9	; 0x09
    3952:	81 30       	cpi	r24, 0x01	; 1
    3954:	91 05       	cpc	r25, r1
    3956:	79 f4       	brne	.+30     	; 0x3976 <Motor_Direction+0x64>
	{
	case MOTOR_1:
		au8_motorBitA = MOTOR_OUT_1A_BIT;
    3958:	84 e0       	ldi	r24, 0x04	; 4
    395a:	8a 83       	std	Y+2, r24	; 0x02
		au8_motorBitB = MOTOR_OUT_1B_BIT;
    395c:	88 e0       	ldi	r24, 0x08	; 8
    395e:	89 83       	std	Y+1, r24	; 0x01
    3960:	0c c0       	rjmp	.+24     	; 0x397a <Motor_Direction+0x68>
		break;
	case MOTOR_2:
		au8_motorBitA = MOTOR_OUT_2A_BIT;
    3962:	80 e4       	ldi	r24, 0x40	; 64
    3964:	8a 83       	std	Y+2, r24	; 0x02
		au8_motorBitB = MOTOR_OUT_2B_BIT;
    3966:	80 e8       	ldi	r24, 0x80	; 128
    3968:	89 83       	std	Y+1, r24	; 0x01
    396a:	07 c0       	rjmp	.+14     	; 0x397a <Motor_Direction+0x68>
		break;
	case (MOTOR_1 | MOTOR_2):
		{
		au8_motorBitA = MOTOR_OUT_1A_BIT | MOTOR_OUT_2A_BIT;
    396c:	84 e4       	ldi	r24, 0x44	; 68
    396e:	8a 83       	std	Y+2, r24	; 0x02
		au8_motorBitB = MOTOR_OUT_1B_BIT | MOTOR_OUT_2B_BIT;
    3970:	88 e8       	ldi	r24, 0x88	; 136
    3972:	89 83       	std	Y+1, r24	; 0x01
    3974:	02 c0       	rjmp	.+4      	; 0x397a <Motor_Direction+0x68>
		}
		break;
	default:
		au8_Ret = E_NOK;
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}

	/* A switch case to determine the selected motor's direction */
	switch(Motor_Direction)
    397a:	8d 81       	ldd	r24, Y+5	; 0x05
    397c:	28 2f       	mov	r18, r24
    397e:	30 e0       	ldi	r19, 0x00	; 0
    3980:	3f 83       	std	Y+7, r19	; 0x07
    3982:	2e 83       	std	Y+6, r18	; 0x06
    3984:	8e 81       	ldd	r24, Y+6	; 0x06
    3986:	9f 81       	ldd	r25, Y+7	; 0x07
    3988:	81 30       	cpi	r24, 0x01	; 1
    398a:	91 05       	cpc	r25, r1
    398c:	31 f0       	breq	.+12     	; 0x399a <Motor_Direction+0x88>
    398e:	2e 81       	ldd	r18, Y+6	; 0x06
    3990:	3f 81       	ldd	r19, Y+7	; 0x07
    3992:	22 30       	cpi	r18, 0x02	; 2
    3994:	31 05       	cpc	r19, r1
    3996:	a1 f0       	breq	.+40     	; 0x39c0 <Motor_Direction+0xae>
    3998:	26 c0       	rjmp	.+76     	; 0x39e6 <Motor_Direction+0xd4>
	{
	case MOTOR_FORWARD:
		au8_Ret |= DIO_Write(MOTORS_GPIO, au8_motorBitA, HIGH);
    399a:	83 e0       	ldi	r24, 0x03	; 3
    399c:	6a 81       	ldd	r22, Y+2	; 0x02
    399e:	4f ef       	ldi	r20, 0xFF	; 255
    39a0:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_Write>
    39a4:	98 2f       	mov	r25, r24
    39a6:	8b 81       	ldd	r24, Y+3	; 0x03
    39a8:	89 2b       	or	r24, r25
    39aa:	8b 83       	std	Y+3, r24	; 0x03
		au8_Ret |= DIO_Write(MOTORS_GPIO, au8_motorBitB, LOW);
    39ac:	83 e0       	ldi	r24, 0x03	; 3
    39ae:	69 81       	ldd	r22, Y+1	; 0x01
    39b0:	40 e0       	ldi	r20, 0x00	; 0
    39b2:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_Write>
    39b6:	98 2f       	mov	r25, r24
    39b8:	8b 81       	ldd	r24, Y+3	; 0x03
    39ba:	89 2b       	or	r24, r25
    39bc:	8b 83       	std	Y+3, r24	; 0x03
    39be:	15 c0       	rjmp	.+42     	; 0x39ea <Motor_Direction+0xd8>
		break;

	case MOTOR_BACKWARD:
		au8_Ret |= DIO_Write(MOTORS_GPIO, au8_motorBitA, LOW);
    39c0:	83 e0       	ldi	r24, 0x03	; 3
    39c2:	6a 81       	ldd	r22, Y+2	; 0x02
    39c4:	40 e0       	ldi	r20, 0x00	; 0
    39c6:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_Write>
    39ca:	98 2f       	mov	r25, r24
    39cc:	8b 81       	ldd	r24, Y+3	; 0x03
    39ce:	89 2b       	or	r24, r25
    39d0:	8b 83       	std	Y+3, r24	; 0x03
		au8_Ret |= DIO_Write(MOTORS_GPIO, au8_motorBitB, HIGH);
    39d2:	83 e0       	ldi	r24, 0x03	; 3
    39d4:	69 81       	ldd	r22, Y+1	; 0x01
    39d6:	4f ef       	ldi	r20, 0xFF	; 255
    39d8:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_Write>
    39dc:	98 2f       	mov	r25, r24
    39de:	8b 81       	ldd	r24, Y+3	; 0x03
    39e0:	89 2b       	or	r24, r25
    39e2:	8b 83       	std	Y+3, r24	; 0x03
    39e4:	02 c0       	rjmp	.+4      	; 0x39ea <Motor_Direction+0xd8>
		break;
	default:
		au8_Ret = E_NOK;
    39e6:	81 e0       	ldi	r24, 0x01	; 1
    39e8:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}

	return au8_Ret;
    39ea:	8b 81       	ldd	r24, Y+3	; 0x03
}
    39ec:	29 96       	adiw	r28, 0x09	; 9
    39ee:	0f b6       	in	r0, 0x3f	; 63
    39f0:	f8 94       	cli
    39f2:	de bf       	out	0x3e, r29	; 62
    39f4:	0f be       	out	0x3f, r0	; 63
    39f6:	cd bf       	out	0x3d, r28	; 61
    39f8:	cf 91       	pop	r28
    39fa:	df 91       	pop	r29
    39fc:	08 95       	ret

000039fe <Motor_Start>:

ERROR_STATUS Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed)
{
    39fe:	df 93       	push	r29
    3a00:	cf 93       	push	r28
    3a02:	00 d0       	rcall	.+0      	; 0x3a04 <Motor_Start+0x6>
    3a04:	00 d0       	rcall	.+0      	; 0x3a06 <Motor_Start+0x8>
    3a06:	0f 92       	push	r0
    3a08:	cd b7       	in	r28, 0x3d	; 61
    3a0a:	de b7       	in	r29, 0x3e	; 62
    3a0c:	8a 83       	std	Y+2, r24	; 0x02
    3a0e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_Ret = E_OK;
    3a10:	19 82       	std	Y+1, r1	; 0x01

	/* A switch case to determine which motor to start */
	switch(Motor_Number)
    3a12:	8a 81       	ldd	r24, Y+2	; 0x02
    3a14:	28 2f       	mov	r18, r24
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	3d 83       	std	Y+5, r19	; 0x05
    3a1a:	2c 83       	std	Y+4, r18	; 0x04
    3a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a1e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a20:	82 30       	cpi	r24, 0x02	; 2
    3a22:	91 05       	cpc	r25, r1
    3a24:	b1 f0       	breq	.+44     	; 0x3a52 <Motor_Start+0x54>
    3a26:	2c 81       	ldd	r18, Y+4	; 0x04
    3a28:	3d 81       	ldd	r19, Y+5	; 0x05
    3a2a:	23 30       	cpi	r18, 0x03	; 3
    3a2c:	31 05       	cpc	r19, r1
    3a2e:	e9 f0       	breq	.+58     	; 0x3a6a <Motor_Start+0x6c>
    3a30:	8c 81       	ldd	r24, Y+4	; 0x04
    3a32:	9d 81       	ldd	r25, Y+5	; 0x05
    3a34:	81 30       	cpi	r24, 0x01	; 1
    3a36:	91 05       	cpc	r25, r1
    3a38:	21 f5       	brne	.+72     	; 0x3a82 <Motor_Start+0x84>
	{
	case MOTOR_1:
		au8_Ret |= Pwm_Start(PWM_CH1A, Mot_Speed, MOTOR_FREQUENCY);
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	6b 81       	ldd	r22, Y+3	; 0x03
    3a3e:	24 e6       	ldi	r18, 0x64	; 100
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	40 e0       	ldi	r20, 0x00	; 0
    3a44:	50 e0       	ldi	r21, 0x00	; 0
    3a46:	0e 94 bc 09 	call	0x1378	; 0x1378 <Pwm_Start>
    3a4a:	99 81       	ldd	r25, Y+1	; 0x01
    3a4c:	89 2b       	or	r24, r25
    3a4e:	89 83       	std	Y+1, r24	; 0x01
    3a50:	1a c0       	rjmp	.+52     	; 0x3a86 <Motor_Start+0x88>
		break;
	case MOTOR_2:
		au8_Ret |= Pwm_Start(PWM_CH1B, Mot_Speed, MOTOR_FREQUENCY);
    3a52:	82 e0       	ldi	r24, 0x02	; 2
    3a54:	6b 81       	ldd	r22, Y+3	; 0x03
    3a56:	24 e6       	ldi	r18, 0x64	; 100
    3a58:	30 e0       	ldi	r19, 0x00	; 0
    3a5a:	40 e0       	ldi	r20, 0x00	; 0
    3a5c:	50 e0       	ldi	r21, 0x00	; 0
    3a5e:	0e 94 bc 09 	call	0x1378	; 0x1378 <Pwm_Start>
    3a62:	99 81       	ldd	r25, Y+1	; 0x01
    3a64:	89 2b       	or	r24, r25
    3a66:	89 83       	std	Y+1, r24	; 0x01
    3a68:	0e c0       	rjmp	.+28     	; 0x3a86 <Motor_Start+0x88>
		break;
	case (MOTOR_1 | MOTOR_2):
		{
		au8_Ret |= Pwm_Start(PWM_CH1A | PWM_CH1B, Mot_Speed, MOTOR_FREQUENCY);
    3a6a:	83 e0       	ldi	r24, 0x03	; 3
    3a6c:	6b 81       	ldd	r22, Y+3	; 0x03
    3a6e:	24 e6       	ldi	r18, 0x64	; 100
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	40 e0       	ldi	r20, 0x00	; 0
    3a74:	50 e0       	ldi	r21, 0x00	; 0
    3a76:	0e 94 bc 09 	call	0x1378	; 0x1378 <Pwm_Start>
    3a7a:	99 81       	ldd	r25, Y+1	; 0x01
    3a7c:	89 2b       	or	r24, r25
    3a7e:	89 83       	std	Y+1, r24	; 0x01
    3a80:	02 c0       	rjmp	.+4      	; 0x3a86 <Motor_Start+0x88>
		break;
		}
	default:
		au8_Ret = E_NOK;
    3a82:	81 e0       	ldi	r24, 0x01	; 1
    3a84:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_Ret;
    3a86:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a88:	0f 90       	pop	r0
    3a8a:	0f 90       	pop	r0
    3a8c:	0f 90       	pop	r0
    3a8e:	0f 90       	pop	r0
    3a90:	0f 90       	pop	r0
    3a92:	cf 91       	pop	r28
    3a94:	df 91       	pop	r29
    3a96:	08 95       	ret

00003a98 <Motor_SpeedUpdate>:

ERROR_STATUS Motor_SpeedUpdate(uint8_t Motor_Number, uint8_t Speed)
{
    3a98:	df 93       	push	r29
    3a9a:	cf 93       	push	r28
    3a9c:	00 d0       	rcall	.+0      	; 0x3a9e <Motor_SpeedUpdate+0x6>
    3a9e:	00 d0       	rcall	.+0      	; 0x3aa0 <Motor_SpeedUpdate+0x8>
    3aa0:	0f 92       	push	r0
    3aa2:	cd b7       	in	r28, 0x3d	; 61
    3aa4:	de b7       	in	r29, 0x3e	; 62
    3aa6:	8a 83       	std	Y+2, r24	; 0x02
    3aa8:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_Ret = E_OK;
    3aaa:	19 82       	std	Y+1, r1	; 0x01

	/* A switch case to determine which motor to update its speed */
	switch(Motor_Number)
    3aac:	8a 81       	ldd	r24, Y+2	; 0x02
    3aae:	28 2f       	mov	r18, r24
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	3d 83       	std	Y+5, r19	; 0x05
    3ab4:	2c 83       	std	Y+4, r18	; 0x04
    3ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ab8:	9d 81       	ldd	r25, Y+5	; 0x05
    3aba:	82 30       	cpi	r24, 0x02	; 2
    3abc:	91 05       	cpc	r25, r1
    3abe:	b1 f0       	breq	.+44     	; 0x3aec <Motor_SpeedUpdate+0x54>
    3ac0:	2c 81       	ldd	r18, Y+4	; 0x04
    3ac2:	3d 81       	ldd	r19, Y+5	; 0x05
    3ac4:	23 30       	cpi	r18, 0x03	; 3
    3ac6:	31 05       	cpc	r19, r1
    3ac8:	e9 f0       	breq	.+58     	; 0x3b04 <Motor_SpeedUpdate+0x6c>
    3aca:	8c 81       	ldd	r24, Y+4	; 0x04
    3acc:	9d 81       	ldd	r25, Y+5	; 0x05
    3ace:	81 30       	cpi	r24, 0x01	; 1
    3ad0:	91 05       	cpc	r25, r1
    3ad2:	21 f5       	brne	.+72     	; 0x3b1c <Motor_SpeedUpdate+0x84>
	{
	case MOTOR_1:
		au8_Ret |= Pwm_Update(PWM_CH1A, Speed, MOTOR_FREQUENCY);
    3ad4:	81 e0       	ldi	r24, 0x01	; 1
    3ad6:	6b 81       	ldd	r22, Y+3	; 0x03
    3ad8:	24 e6       	ldi	r18, 0x64	; 100
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	40 e0       	ldi	r20, 0x00	; 0
    3ade:	50 e0       	ldi	r21, 0x00	; 0
    3ae0:	0e 94 45 0b 	call	0x168a	; 0x168a <Pwm_Update>
    3ae4:	99 81       	ldd	r25, Y+1	; 0x01
    3ae6:	89 2b       	or	r24, r25
    3ae8:	89 83       	std	Y+1, r24	; 0x01
    3aea:	1a c0       	rjmp	.+52     	; 0x3b20 <Motor_SpeedUpdate+0x88>
		break;
	case MOTOR_2:
		au8_Ret |= Pwm_Update(PWM_CH1B, Speed, MOTOR_FREQUENCY);
    3aec:	82 e0       	ldi	r24, 0x02	; 2
    3aee:	6b 81       	ldd	r22, Y+3	; 0x03
    3af0:	24 e6       	ldi	r18, 0x64	; 100
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	40 e0       	ldi	r20, 0x00	; 0
    3af6:	50 e0       	ldi	r21, 0x00	; 0
    3af8:	0e 94 45 0b 	call	0x168a	; 0x168a <Pwm_Update>
    3afc:	99 81       	ldd	r25, Y+1	; 0x01
    3afe:	89 2b       	or	r24, r25
    3b00:	89 83       	std	Y+1, r24	; 0x01
    3b02:	0e c0       	rjmp	.+28     	; 0x3b20 <Motor_SpeedUpdate+0x88>
		break;
	case (MOTOR_1 | MOTOR_2):
		{
		au8_Ret |= Pwm_Update(PWM_CH1A | PWM_CH1B, Speed, MOTOR_FREQUENCY);
    3b04:	83 e0       	ldi	r24, 0x03	; 3
    3b06:	6b 81       	ldd	r22, Y+3	; 0x03
    3b08:	24 e6       	ldi	r18, 0x64	; 100
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	40 e0       	ldi	r20, 0x00	; 0
    3b0e:	50 e0       	ldi	r21, 0x00	; 0
    3b10:	0e 94 45 0b 	call	0x168a	; 0x168a <Pwm_Update>
    3b14:	99 81       	ldd	r25, Y+1	; 0x01
    3b16:	89 2b       	or	r24, r25
    3b18:	89 83       	std	Y+1, r24	; 0x01
    3b1a:	02 c0       	rjmp	.+4      	; 0x3b20 <Motor_SpeedUpdate+0x88>
		break;
		}
	default:
		au8_Ret = E_NOK;
    3b1c:	81 e0       	ldi	r24, 0x01	; 1
    3b1e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_Ret;
    3b20:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b22:	0f 90       	pop	r0
    3b24:	0f 90       	pop	r0
    3b26:	0f 90       	pop	r0
    3b28:	0f 90       	pop	r0
    3b2a:	0f 90       	pop	r0
    3b2c:	cf 91       	pop	r28
    3b2e:	df 91       	pop	r29
    3b30:	08 95       	ret

00003b32 <Motor_Stop>:

ERROR_STATUS Motor_Stop(uint8_t Motor_Number)
{
    3b32:	df 93       	push	r29
    3b34:	cf 93       	push	r28
    3b36:	00 d0       	rcall	.+0      	; 0x3b38 <Motor_Stop+0x6>
    3b38:	00 d0       	rcall	.+0      	; 0x3b3a <Motor_Stop+0x8>
    3b3a:	cd b7       	in	r28, 0x3d	; 61
    3b3c:	de b7       	in	r29, 0x3e	; 62
    3b3e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t au8_Ret = E_OK;
    3b40:	19 82       	std	Y+1, r1	; 0x01

	/* A switch case to determine which motor to stop */
	switch(Motor_Number)
    3b42:	8a 81       	ldd	r24, Y+2	; 0x02
    3b44:	28 2f       	mov	r18, r24
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	3c 83       	std	Y+4, r19	; 0x04
    3b4a:	2b 83       	std	Y+3, r18	; 0x03
    3b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b50:	82 30       	cpi	r24, 0x02	; 2
    3b52:	91 05       	cpc	r25, r1
    3b54:	89 f0       	breq	.+34     	; 0x3b78 <Motor_Stop+0x46>
    3b56:	2b 81       	ldd	r18, Y+3	; 0x03
    3b58:	3c 81       	ldd	r19, Y+4	; 0x04
    3b5a:	23 30       	cpi	r18, 0x03	; 3
    3b5c:	31 05       	cpc	r19, r1
    3b5e:	99 f0       	breq	.+38     	; 0x3b86 <Motor_Stop+0x54>
    3b60:	8b 81       	ldd	r24, Y+3	; 0x03
    3b62:	9c 81       	ldd	r25, Y+4	; 0x04
    3b64:	81 30       	cpi	r24, 0x01	; 1
    3b66:	91 05       	cpc	r25, r1
    3b68:	a9 f4       	brne	.+42     	; 0x3b94 <Motor_Stop+0x62>
	{
	case MOTOR_1:
		au8_Ret |= Pwm_Stop(PWM_CH1A);
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	0e 94 96 0c 	call	0x192c	; 0x192c <Pwm_Stop>
    3b70:	99 81       	ldd	r25, Y+1	; 0x01
    3b72:	89 2b       	or	r24, r25
    3b74:	89 83       	std	Y+1, r24	; 0x01
    3b76:	10 c0       	rjmp	.+32     	; 0x3b98 <Motor_Stop+0x66>
		break;
	case MOTOR_2:
		au8_Ret |= Pwm_Stop(PWM_CH1B);
    3b78:	82 e0       	ldi	r24, 0x02	; 2
    3b7a:	0e 94 96 0c 	call	0x192c	; 0x192c <Pwm_Stop>
    3b7e:	99 81       	ldd	r25, Y+1	; 0x01
    3b80:	89 2b       	or	r24, r25
    3b82:	89 83       	std	Y+1, r24	; 0x01
    3b84:	09 c0       	rjmp	.+18     	; 0x3b98 <Motor_Stop+0x66>
		break;
	case (MOTOR_1 | MOTOR_2):
		{
		au8_Ret |= Pwm_Stop(PWM_CH1A | PWM_CH1B);
    3b86:	83 e0       	ldi	r24, 0x03	; 3
    3b88:	0e 94 96 0c 	call	0x192c	; 0x192c <Pwm_Stop>
    3b8c:	99 81       	ldd	r25, Y+1	; 0x01
    3b8e:	89 2b       	or	r24, r25
    3b90:	89 83       	std	Y+1, r24	; 0x01
    3b92:	02 c0       	rjmp	.+4      	; 0x3b98 <Motor_Stop+0x66>
		break;
		}
	default:
		au8_Ret = E_NOK;
    3b94:	81 e0       	ldi	r24, 0x01	; 1
    3b96:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_Ret;
    3b98:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b9a:	0f 90       	pop	r0
    3b9c:	0f 90       	pop	r0
    3b9e:	0f 90       	pop	r0
    3ba0:	0f 90       	pop	r0
    3ba2:	cf 91       	pop	r28
    3ba4:	df 91       	pop	r29
    3ba6:	08 95       	ret

00003ba8 <Motor_GetStatus>:

ERROR_STATUS Motor_GetStatus(uint8_t Motor_Number, uint8_t* Mot_status)
{
    3ba8:	df 93       	push	r29
    3baa:	cf 93       	push	r28
    3bac:	00 d0       	rcall	.+0      	; 0x3bae <Motor_GetStatus+0x6>
    3bae:	00 d0       	rcall	.+0      	; 0x3bb0 <Motor_GetStatus+0x8>
    3bb0:	00 d0       	rcall	.+0      	; 0x3bb2 <Motor_GetStatus+0xa>
    3bb2:	cd b7       	in	r28, 0x3d	; 61
    3bb4:	de b7       	in	r29, 0x3e	; 62
    3bb6:	8a 83       	std	Y+2, r24	; 0x02
    3bb8:	7c 83       	std	Y+4, r23	; 0x04
    3bba:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_Ret;

	/* A switch case to determine which motor to get its status */
	switch(Motor_Number)
    3bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bbe:	28 2f       	mov	r18, r24
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	3e 83       	std	Y+6, r19	; 0x06
    3bc4:	2d 83       	std	Y+5, r18	; 0x05
    3bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bca:	81 30       	cpi	r24, 0x01	; 1
    3bcc:	91 05       	cpc	r25, r1
    3bce:	31 f0       	breq	.+12     	; 0x3bdc <Motor_GetStatus+0x34>
    3bd0:	2d 81       	ldd	r18, Y+5	; 0x05
    3bd2:	3e 81       	ldd	r19, Y+6	; 0x06
    3bd4:	22 30       	cpi	r18, 0x02	; 2
    3bd6:	31 05       	cpc	r19, r1
    3bd8:	39 f0       	breq	.+14     	; 0x3be8 <Motor_GetStatus+0x40>
    3bda:	0c c0       	rjmp	.+24     	; 0x3bf4 <Motor_GetStatus+0x4c>
	{
	case MOTOR_1:
		*Mot_status = gu8_Motor1_InitFlag;
    3bdc:	80 91 80 01 	lds	r24, 0x0180
    3be0:	eb 81       	ldd	r30, Y+3	; 0x03
    3be2:	fc 81       	ldd	r31, Y+4	; 0x04
    3be4:	80 83       	st	Z, r24
    3be6:	08 c0       	rjmp	.+16     	; 0x3bf8 <Motor_GetStatus+0x50>
		break;
	case MOTOR_2:
		*Mot_status = gu8_Motor2_InitFlag;
    3be8:	80 91 81 01 	lds	r24, 0x0181
    3bec:	eb 81       	ldd	r30, Y+3	; 0x03
    3bee:	fc 81       	ldd	r31, Y+4	; 0x04
    3bf0:	80 83       	st	Z, r24
    3bf2:	02 c0       	rjmp	.+4      	; 0x3bf8 <Motor_GetStatus+0x50>
		break;
	default:
		au8_Ret = E_NOK;
    3bf4:	81 e0       	ldi	r24, 0x01	; 1
    3bf6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_Ret;
    3bf8:	89 81       	ldd	r24, Y+1	; 0x01
}
    3bfa:	26 96       	adiw	r28, 0x06	; 6
    3bfc:	0f b6       	in	r0, 0x3f	; 63
    3bfe:	f8 94       	cli
    3c00:	de bf       	out	0x3e, r29	; 62
    3c02:	0f be       	out	0x3f, r0	; 63
    3c04:	cd bf       	out	0x3d, r28	; 61
    3c06:	cf 91       	pop	r28
    3c08:	df 91       	pop	r29
    3c0a:	08 95       	ret

00003c0c <Steering_Init>:


/*- APIs IMPLEMENTATION ------------------------------------*/

ERROR_STATUS Steering_Init(void)
{
    3c0c:	df 93       	push	r29
    3c0e:	cf 93       	push	r28
    3c10:	cd b7       	in	r28, 0x3d	; 61
    3c12:	de b7       	in	r29, 0x3e	; 62
	/* Initialization of the required motors */
	Motor_Init(MOTOR_1 | MOTOR_2);
    3c14:	83 e0       	ldi	r24, 0x03	; 3
    3c16:	0e 94 0d 1c 	call	0x381a	; 0x381a <Motor_Init>

	return E_OK;
    3c1a:	80 e0       	ldi	r24, 0x00	; 0
}
    3c1c:	cf 91       	pop	r28
    3c1e:	df 91       	pop	r29
    3c20:	08 95       	ret

00003c22 <Steering_SteerCar>:

ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed)
{
    3c22:	df 93       	push	r29
    3c24:	cf 93       	push	r28
    3c26:	00 d0       	rcall	.+0      	; 0x3c28 <Steering_SteerCar+0x6>
    3c28:	00 d0       	rcall	.+0      	; 0x3c2a <Steering_SteerCar+0x8>
    3c2a:	0f 92       	push	r0
    3c2c:	cd b7       	in	r28, 0x3d	; 61
    3c2e:	de b7       	in	r29, 0x3e	; 62
    3c30:	8a 83       	std	Y+2, r24	; 0x02
    3c32:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_Ret = E_OK;
    3c34:	19 82       	std	Y+1, r1	; 0x01

	/* A switch case to determine the required state of the car motors */
	switch(Steering_CarCmd)
    3c36:	8a 81       	ldd	r24, Y+2	; 0x02
    3c38:	28 2f       	mov	r18, r24
    3c3a:	30 e0       	ldi	r19, 0x00	; 0
    3c3c:	3d 83       	std	Y+5, r19	; 0x05
    3c3e:	2c 83       	std	Y+4, r18	; 0x04
    3c40:	8c 81       	ldd	r24, Y+4	; 0x04
    3c42:	9d 81       	ldd	r25, Y+5	; 0x05
    3c44:	82 30       	cpi	r24, 0x02	; 2
    3c46:	91 05       	cpc	r25, r1
    3c48:	99 f1       	breq	.+102    	; 0x3cb0 <Steering_SteerCar+0x8e>
    3c4a:	2c 81       	ldd	r18, Y+4	; 0x04
    3c4c:	3d 81       	ldd	r19, Y+5	; 0x05
    3c4e:	23 30       	cpi	r18, 0x03	; 3
    3c50:	31 05       	cpc	r19, r1
    3c52:	54 f4       	brge	.+20     	; 0x3c68 <Steering_SteerCar+0x46>
    3c54:	8c 81       	ldd	r24, Y+4	; 0x04
    3c56:	9d 81       	ldd	r25, Y+5	; 0x05
    3c58:	00 97       	sbiw	r24, 0x00	; 0
    3c5a:	91 f0       	breq	.+36     	; 0x3c80 <Steering_SteerCar+0x5e>
    3c5c:	2c 81       	ldd	r18, Y+4	; 0x04
    3c5e:	3d 81       	ldd	r19, Y+5	; 0x05
    3c60:	21 30       	cpi	r18, 0x01	; 1
    3c62:	31 05       	cpc	r19, r1
    3c64:	a1 f0       	breq	.+40     	; 0x3c8e <Steering_SteerCar+0x6c>
    3c66:	77 c0       	rjmp	.+238    	; 0x3d56 <Steering_SteerCar+0x134>
    3c68:	8c 81       	ldd	r24, Y+4	; 0x04
    3c6a:	9d 81       	ldd	r25, Y+5	; 0x05
    3c6c:	83 30       	cpi	r24, 0x03	; 3
    3c6e:	91 05       	cpc	r25, r1
    3c70:	81 f1       	breq	.+96     	; 0x3cd2 <Steering_SteerCar+0xb0>
    3c72:	2c 81       	ldd	r18, Y+4	; 0x04
    3c74:	3d 81       	ldd	r19, Y+5	; 0x05
    3c76:	24 30       	cpi	r18, 0x04	; 4
    3c78:	31 05       	cpc	r19, r1
    3c7a:	09 f4       	brne	.+2      	; 0x3c7e <Steering_SteerCar+0x5c>
    3c7c:	4b c0       	rjmp	.+150    	; 0x3d14 <Steering_SteerCar+0xf2>
    3c7e:	6b c0       	rjmp	.+214    	; 0x3d56 <Steering_SteerCar+0x134>
	{
	case CAR_STOP:
		/* Stop the car in the case of stop */
		au8_Ret |= Motor_Stop(MOTOR_1 | MOTOR_2);
    3c80:	83 e0       	ldi	r24, 0x03	; 3
    3c82:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <Motor_Stop>
    3c86:	99 81       	ldd	r25, Y+1	; 0x01
    3c88:	89 2b       	or	r24, r25
    3c8a:	89 83       	std	Y+1, r24	; 0x01
    3c8c:	66 c0       	rjmp	.+204    	; 0x3d5a <Steering_SteerCar+0x138>
		break;
	case CAR_FORWARD:
		/* The two motors are driven in the same direction (forward) */
		au8_Ret |= Motor_Direction((MOTOR_1 | MOTOR_2), MOTOR_FORWARD);
    3c8e:	83 e0       	ldi	r24, 0x03	; 3
    3c90:	61 e0       	ldi	r22, 0x01	; 1
    3c92:	0e 94 89 1c 	call	0x3912	; 0x3912 <Motor_Direction>
    3c96:	98 2f       	mov	r25, r24
    3c98:	89 81       	ldd	r24, Y+1	; 0x01
    3c9a:	89 2b       	or	r24, r25
    3c9c:	89 83       	std	Y+1, r24	; 0x01
		au8_Ret |= Motor_Start((MOTOR_1 | MOTOR_2), speed);
    3c9e:	83 e0       	ldi	r24, 0x03	; 3
    3ca0:	6b 81       	ldd	r22, Y+3	; 0x03
    3ca2:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <Motor_Start>
    3ca6:	98 2f       	mov	r25, r24
    3ca8:	89 81       	ldd	r24, Y+1	; 0x01
    3caa:	89 2b       	or	r24, r25
    3cac:	89 83       	std	Y+1, r24	; 0x01
    3cae:	55 c0       	rjmp	.+170    	; 0x3d5a <Steering_SteerCar+0x138>
		break;
	case CAR_BACKWARD:
		/* The two motors are driven in the other direction (backward) */
		au8_Ret |= Motor_Direction((MOTOR_1 | MOTOR_2), MOTOR_BACKWARD);
    3cb0:	83 e0       	ldi	r24, 0x03	; 3
    3cb2:	62 e0       	ldi	r22, 0x02	; 2
    3cb4:	0e 94 89 1c 	call	0x3912	; 0x3912 <Motor_Direction>
    3cb8:	98 2f       	mov	r25, r24
    3cba:	89 81       	ldd	r24, Y+1	; 0x01
    3cbc:	89 2b       	or	r24, r25
    3cbe:	89 83       	std	Y+1, r24	; 0x01
		au8_Ret |= Motor_Start((MOTOR_1 | MOTOR_2), speed);
    3cc0:	83 e0       	ldi	r24, 0x03	; 3
    3cc2:	6b 81       	ldd	r22, Y+3	; 0x03
    3cc4:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <Motor_Start>
    3cc8:	98 2f       	mov	r25, r24
    3cca:	89 81       	ldd	r24, Y+1	; 0x01
    3ccc:	89 2b       	or	r24, r25
    3cce:	89 83       	std	Y+1, r24	; 0x01
    3cd0:	44 c0       	rjmp	.+136    	; 0x3d5a <Steering_SteerCar+0x138>
		break;
	case CAR_RIGHT:
		/* The two motors are driven in different directions (right) */
		au8_Ret |= Motor_Direction(MOTOR_1, MOTOR_BACKWARD);
    3cd2:	81 e0       	ldi	r24, 0x01	; 1
    3cd4:	62 e0       	ldi	r22, 0x02	; 2
    3cd6:	0e 94 89 1c 	call	0x3912	; 0x3912 <Motor_Direction>
    3cda:	98 2f       	mov	r25, r24
    3cdc:	89 81       	ldd	r24, Y+1	; 0x01
    3cde:	89 2b       	or	r24, r25
    3ce0:	89 83       	std	Y+1, r24	; 0x01
		au8_Ret |= Motor_Start(MOTOR_1, speed);
    3ce2:	81 e0       	ldi	r24, 0x01	; 1
    3ce4:	6b 81       	ldd	r22, Y+3	; 0x03
    3ce6:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <Motor_Start>
    3cea:	98 2f       	mov	r25, r24
    3cec:	89 81       	ldd	r24, Y+1	; 0x01
    3cee:	89 2b       	or	r24, r25
    3cf0:	89 83       	std	Y+1, r24	; 0x01
		au8_Ret |= Motor_Direction(MOTOR_2, MOTOR_FORWARD);
    3cf2:	82 e0       	ldi	r24, 0x02	; 2
    3cf4:	61 e0       	ldi	r22, 0x01	; 1
    3cf6:	0e 94 89 1c 	call	0x3912	; 0x3912 <Motor_Direction>
    3cfa:	98 2f       	mov	r25, r24
    3cfc:	89 81       	ldd	r24, Y+1	; 0x01
    3cfe:	89 2b       	or	r24, r25
    3d00:	89 83       	std	Y+1, r24	; 0x01
		au8_Ret |= Motor_Start(MOTOR_2, speed);
    3d02:	82 e0       	ldi	r24, 0x02	; 2
    3d04:	6b 81       	ldd	r22, Y+3	; 0x03
    3d06:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <Motor_Start>
    3d0a:	98 2f       	mov	r25, r24
    3d0c:	89 81       	ldd	r24, Y+1	; 0x01
    3d0e:	89 2b       	or	r24, r25
    3d10:	89 83       	std	Y+1, r24	; 0x01
    3d12:	23 c0       	rjmp	.+70     	; 0x3d5a <Steering_SteerCar+0x138>
		break;
	case CAR_LEFT:
		/* the two motors are driven in different directions (left) */
		au8_Ret |= Motor_Direction(MOTOR_1, MOTOR_FORWARD);
    3d14:	81 e0       	ldi	r24, 0x01	; 1
    3d16:	61 e0       	ldi	r22, 0x01	; 1
    3d18:	0e 94 89 1c 	call	0x3912	; 0x3912 <Motor_Direction>
    3d1c:	98 2f       	mov	r25, r24
    3d1e:	89 81       	ldd	r24, Y+1	; 0x01
    3d20:	89 2b       	or	r24, r25
    3d22:	89 83       	std	Y+1, r24	; 0x01
		au8_Ret |= Motor_Start(MOTOR_1, speed);
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	6b 81       	ldd	r22, Y+3	; 0x03
    3d28:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <Motor_Start>
    3d2c:	98 2f       	mov	r25, r24
    3d2e:	89 81       	ldd	r24, Y+1	; 0x01
    3d30:	89 2b       	or	r24, r25
    3d32:	89 83       	std	Y+1, r24	; 0x01
		au8_Ret |= Motor_Direction(MOTOR_2, MOTOR_BACKWARD);
    3d34:	82 e0       	ldi	r24, 0x02	; 2
    3d36:	62 e0       	ldi	r22, 0x02	; 2
    3d38:	0e 94 89 1c 	call	0x3912	; 0x3912 <Motor_Direction>
    3d3c:	98 2f       	mov	r25, r24
    3d3e:	89 81       	ldd	r24, Y+1	; 0x01
    3d40:	89 2b       	or	r24, r25
    3d42:	89 83       	std	Y+1, r24	; 0x01
		au8_Ret |= Motor_Start(MOTOR_2, speed);
    3d44:	82 e0       	ldi	r24, 0x02	; 2
    3d46:	6b 81       	ldd	r22, Y+3	; 0x03
    3d48:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <Motor_Start>
    3d4c:	98 2f       	mov	r25, r24
    3d4e:	89 81       	ldd	r24, Y+1	; 0x01
    3d50:	89 2b       	or	r24, r25
    3d52:	89 83       	std	Y+1, r24	; 0x01
    3d54:	02 c0       	rjmp	.+4      	; 0x3d5a <Steering_SteerCar+0x138>
		break;
	default:
		au8_Ret = E_NOK;
    3d56:	81 e0       	ldi	r24, 0x01	; 1
    3d58:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return au8_Ret;
    3d5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d5c:	0f 90       	pop	r0
    3d5e:	0f 90       	pop	r0
    3d60:	0f 90       	pop	r0
    3d62:	0f 90       	pop	r0
    3d64:	0f 90       	pop	r0
    3d66:	cf 91       	pop	r28
    3d68:	df 91       	pop	r29
    3d6a:	08 95       	ret

00003d6c <Car_SM_Init>:


/*- APIs IMPLEMENTATION ------------------------------------*/

ERROR_STATUS Car_SM_Init(void)
{
    3d6c:	df 93       	push	r29
    3d6e:	cf 93       	push	r28
    3d70:	0f 92       	push	r0
    3d72:	cd b7       	in	r28, 0x3d	; 61
    3d74:	de b7       	in	r29, 0x3e	; 62
	uint8_t au8_Ret = E_OK;
    3d76:	19 82       	std	Y+1, r1	; 0x01

	/* Initialization of steering (motors initialization) */
	au8_Ret = Steering_Init();
    3d78:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <Steering_Init>
    3d7c:	89 83       	std	Y+1, r24	; 0x01
	/* Initialization of ultrasonic sensor driver */
	au8_Ret = Us_Init();
    3d7e:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <Us_Init>
    3d82:	89 83       	std	Y+1, r24	; 0x01

	return au8_Ret;
    3d84:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d86:	0f 90       	pop	r0
    3d88:	cf 91       	pop	r28
    3d8a:	df 91       	pop	r29
    3d8c:	08 95       	ret

00003d8e <Car_SM_Update>:

ERROR_STATUS Car_SM_Update(void)
{
    3d8e:	df 93       	push	r29
    3d90:	cf 93       	push	r28
    3d92:	cd b7       	in	r28, 0x3d	; 61
    3d94:	de b7       	in	r29, 0x3e	; 62
    3d96:	27 97       	sbiw	r28, 0x07	; 7
    3d98:	0f b6       	in	r0, 0x3f	; 63
    3d9a:	f8 94       	cli
    3d9c:	de bf       	out	0x3e, r29	; 62
    3d9e:	0f be       	out	0x3f, r0	; 63
    3da0:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8_Ret = E_OK;
    3da2:	1b 82       	std	Y+3, r1	; 0x03
	/* A variable used to apply state machine cases */
	uint8_t au8_SM_value = 0;
    3da4:	1a 82       	std	Y+2, r1	; 0x02
	/* A variable to store distance in it */
	uint16_t au16_Distance = 0;
    3da6:	1d 82       	std	Y+5, r1	; 0x05
    3da8:	1c 82       	std	Y+4, r1	; 0x04
	/* A variable used as a flag */
	uint8_t au8_rotationflag = 0;
    3daa:	19 82       	std	Y+1, r1	; 0x01

	/* Sending trigger signal */
	au8_Ret |= Us_Trigger();
    3dac:	0e 94 a5 1b 	call	0x374a	; 0x374a <Us_Trigger>
    3db0:	98 2f       	mov	r25, r24
    3db2:	8b 81       	ldd	r24, Y+3	; 0x03
    3db4:	89 2b       	or	r24, r25
    3db6:	8b 83       	std	Y+3, r24	; 0x03
	/* Reading the distance from ultrasonic driver */
	au8_Ret |= Us_GetDistance(&au16_Distance);
    3db8:	ce 01       	movw	r24, r28
    3dba:	04 96       	adiw	r24, 0x04	; 4
    3dbc:	0e 94 c8 1b 	call	0x3790	; 0x3790 <Us_GetDistance>
    3dc0:	98 2f       	mov	r25, r24
    3dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc4:	89 2b       	or	r24, r25
    3dc6:	8b 83       	std	Y+3, r24	; 0x03

	/* In case the car is too close to the obstacle */
	if(au16_Distance <= MOT_MIN_DISTANCE)
    3dc8:	8c 81       	ldd	r24, Y+4	; 0x04
    3dca:	9d 81       	ldd	r25, Y+5	; 0x05
    3dcc:	8a 31       	cpi	r24, 0x1A	; 26
    3dce:	91 05       	cpc	r25, r1
    3dd0:	18 f4       	brcc	.+6      	; 0x3dd8 <Car_SM_Update+0x4a>
	{
		au8_SM_value = MOT_BCK_DIR;
    3dd2:	81 e0       	ldi	r24, 0x01	; 1
    3dd4:	8a 83       	std	Y+2, r24	; 0x02
    3dd6:	1a c0       	rjmp	.+52     	; 0x3e0c <Car_SM_Update+0x7e>
	}
	/* In case the car is in the range to rotate */
	else if((au16_Distance >=MOT_MIN_DISTANCE && au16_Distance <= MOT_MAX_DISTANCE) || au8_rotationflag == 1)
    3dd8:	8c 81       	ldd	r24, Y+4	; 0x04
    3dda:	9d 81       	ldd	r25, Y+5	; 0x05
    3ddc:	89 31       	cpi	r24, 0x19	; 25
    3dde:	91 05       	cpc	r25, r1
    3de0:	28 f0       	brcs	.+10     	; 0x3dec <Car_SM_Update+0x5e>
    3de2:	8c 81       	ldd	r24, Y+4	; 0x04
    3de4:	9d 81       	ldd	r25, Y+5	; 0x05
    3de6:	8e 32       	cpi	r24, 0x2E	; 46
    3de8:	91 05       	cpc	r25, r1
    3dea:	18 f0       	brcs	.+6      	; 0x3df2 <Car_SM_Update+0x64>
    3dec:	89 81       	ldd	r24, Y+1	; 0x01
    3dee:	81 30       	cpi	r24, 0x01	; 1
    3df0:	19 f4       	brne	.+6      	; 0x3df8 <Car_SM_Update+0x6a>
	{
		au8_SM_value = MOT_RGT_DIR;
    3df2:	82 e0       	ldi	r24, 0x02	; 2
    3df4:	8a 83       	std	Y+2, r24	; 0x02
    3df6:	0a c0       	rjmp	.+20     	; 0x3e0c <Car_SM_Update+0x7e>
	}
	/* In case the car is far from the obstacle */
	else if(au16_Distance >= MOT_MAX_DISTANCE && au8_rotationflag == 0)
    3df8:	8c 81       	ldd	r24, Y+4	; 0x04
    3dfa:	9d 81       	ldd	r25, Y+5	; 0x05
    3dfc:	8d 32       	cpi	r24, 0x2D	; 45
    3dfe:	91 05       	cpc	r25, r1
    3e00:	28 f0       	brcs	.+10     	; 0x3e0c <Car_SM_Update+0x7e>
    3e02:	89 81       	ldd	r24, Y+1	; 0x01
    3e04:	88 23       	and	r24, r24
    3e06:	11 f4       	brne	.+4      	; 0x3e0c <Car_SM_Update+0x7e>
	{
		au8_SM_value = MOT_FOR_DIR;
    3e08:	83 e0       	ldi	r24, 0x03	; 3
    3e0a:	8a 83       	std	Y+2, r24	; 0x02
	}

	/* A switch case on machine states */
	switch(au8_SM_value)
    3e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e0e:	28 2f       	mov	r18, r24
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	3f 83       	std	Y+7, r19	; 0x07
    3e14:	2e 83       	std	Y+6, r18	; 0x06
    3e16:	8e 81       	ldd	r24, Y+6	; 0x06
    3e18:	9f 81       	ldd	r25, Y+7	; 0x07
    3e1a:	82 30       	cpi	r24, 0x02	; 2
    3e1c:	91 05       	cpc	r25, r1
    3e1e:	a9 f0       	breq	.+42     	; 0x3e4a <Car_SM_Update+0xbc>
    3e20:	2e 81       	ldd	r18, Y+6	; 0x06
    3e22:	3f 81       	ldd	r19, Y+7	; 0x07
    3e24:	23 30       	cpi	r18, 0x03	; 3
    3e26:	31 05       	cpc	r19, r1
    3e28:	f9 f0       	breq	.+62     	; 0x3e68 <Car_SM_Update+0xda>
    3e2a:	8e 81       	ldd	r24, Y+6	; 0x06
    3e2c:	9f 81       	ldd	r25, Y+7	; 0x07
    3e2e:	81 30       	cpi	r24, 0x01	; 1
    3e30:	91 05       	cpc	r25, r1
    3e32:	11 f5       	brne	.+68     	; 0x3e78 <Car_SM_Update+0xea>
	{
	/* In case the motors are to be driven backwards */
	case MOT_BCK_DIR:
		au8_Ret |= Steering_SteerCar(CAR_BACKWARD, MOT_SPEED_PERCENTAGE);
    3e34:	82 e0       	ldi	r24, 0x02	; 2
    3e36:	6e e1       	ldi	r22, 0x1E	; 30
    3e38:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <Steering_SteerCar>
    3e3c:	98 2f       	mov	r25, r24
    3e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e40:	89 2b       	or	r24, r25
    3e42:	8b 83       	std	Y+3, r24	; 0x03
		au8_rotationflag = 1;
    3e44:	81 e0       	ldi	r24, 0x01	; 1
    3e46:	89 83       	std	Y+1, r24	; 0x01
    3e48:	19 c0       	rjmp	.+50     	; 0x3e7c <Car_SM_Update+0xee>
		break;
	case MOT_RGT_DIR:
		/* In case the motors are to be driven rotationally */
		au8_Ret |= Steering_SteerCar(CAR_RIGHT, MOT_SPEED_PERCENTAGE);
    3e4a:	83 e0       	ldi	r24, 0x03	; 3
    3e4c:	6e e1       	ldi	r22, 0x1E	; 30
    3e4e:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <Steering_SteerCar>
    3e52:	9b 81       	ldd	r25, Y+3	; 0x03
    3e54:	89 2b       	or	r24, r25
    3e56:	8b 83       	std	Y+3, r24	; 0x03
		softwareDelayMs(MOT_TURN_DELAY);
    3e58:	6d e7       	ldi	r22, 0x7D	; 125
    3e5a:	70 e0       	ldi	r23, 0x00	; 0
    3e5c:	80 e0       	ldi	r24, 0x00	; 0
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <softwareDelayMs>
		au8_rotationflag = 0;
    3e64:	19 82       	std	Y+1, r1	; 0x01
    3e66:	0a c0       	rjmp	.+20     	; 0x3e7c <Car_SM_Update+0xee>
		break;
	case MOT_FOR_DIR:
		/* In case the motors are to be driven forwards */
		au8_Ret |= Steering_SteerCar(CAR_FORWARD, MOT_SPEED_PERCENTAGE);
    3e68:	81 e0       	ldi	r24, 0x01	; 1
    3e6a:	6e e1       	ldi	r22, 0x1E	; 30
    3e6c:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <Steering_SteerCar>
    3e70:	9b 81       	ldd	r25, Y+3	; 0x03
    3e72:	89 2b       	or	r24, r25
    3e74:	8b 83       	std	Y+3, r24	; 0x03
    3e76:	02 c0       	rjmp	.+4      	; 0x3e7c <Car_SM_Update+0xee>
		break;
	default:
		au8_Ret = E_NOK;
    3e78:	81 e0       	ldi	r24, 0x01	; 1
    3e7a:	8b 83       	std	Y+3, r24	; 0x03
		break;
	}

	softwareDelayMs(MOT_DELAY);
    3e7c:	6d e7       	ldi	r22, 0x7D	; 125
    3e7e:	70 e0       	ldi	r23, 0x00	; 0
    3e80:	80 e0       	ldi	r24, 0x00	; 0
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <softwareDelayMs>

	return au8_Ret;
    3e88:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3e8a:	27 96       	adiw	r28, 0x07	; 7
    3e8c:	0f b6       	in	r0, 0x3f	; 63
    3e8e:	f8 94       	cli
    3e90:	de bf       	out	0x3e, r29	; 62
    3e92:	0f be       	out	0x3f, r0	; 63
    3e94:	cd bf       	out	0x3d, r28	; 61
    3e96:	cf 91       	pop	r28
    3e98:	df 91       	pop	r29
    3e9a:	08 95       	ret

00003e9c <main>:

#include "car_sm.h"
#include "../softwareDelay.h"

int main(void)
{
    3e9c:	df 93       	push	r29
    3e9e:	cf 93       	push	r28
    3ea0:	cd b7       	in	r28, 0x3d	; 61
    3ea2:	de b7       	in	r29, 0x3e	; 62
	softwareDelayMs(500);
    3ea4:	64 ef       	ldi	r22, 0xF4	; 244
    3ea6:	71 e0       	ldi	r23, 0x01	; 1
    3ea8:	80 e0       	ldi	r24, 0x00	; 0
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <softwareDelayMs>

	Car_SM_Init();
    3eb0:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <Car_SM_Init>

	while(1)
	{
		Car_SM_Update();
    3eb4:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <Car_SM_Update>
    3eb8:	fd cf       	rjmp	.-6      	; 0x3eb4 <main+0x18>

00003eba <softwareDelayMs>:
#include "softwareDelay.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
    3eba:	df 93       	push	r29
    3ebc:	cf 93       	push	r28
    3ebe:	cd b7       	in	r28, 0x3d	; 61
    3ec0:	de b7       	in	r29, 0x3e	; 62
    3ec2:	60 97       	sbiw	r28, 0x10	; 16
    3ec4:	0f b6       	in	r0, 0x3f	; 63
    3ec6:	f8 94       	cli
    3ec8:	de bf       	out	0x3e, r29	; 62
    3eca:	0f be       	out	0x3f, r0	; 63
    3ecc:	cd bf       	out	0x3d, r28	; 61
    3ece:	6d 87       	std	Y+13, r22	; 0x0d
    3ed0:	7e 87       	std	Y+14, r23	; 0x0e
    3ed2:	8f 87       	std	Y+15, r24	; 0x0f
    3ed4:	98 8b       	std	Y+16, r25	; 0x10
	/* 16 MHz */
	uint32_t ticks=378, i, j;
    3ed6:	8a e7       	ldi	r24, 0x7A	; 122
    3ed8:	91 e0       	ldi	r25, 0x01	; 1
    3eda:	a0 e0       	ldi	r26, 0x00	; 0
    3edc:	b0 e0       	ldi	r27, 0x00	; 0
    3ede:	89 87       	std	Y+9, r24	; 0x09
    3ee0:	9a 87       	std	Y+10, r25	; 0x0a
    3ee2:	ab 87       	std	Y+11, r26	; 0x0b
    3ee4:	bc 87       	std	Y+12, r27	; 0x0c
	for(i=0 ; i<u32_delay_in_ms ; i++)
    3ee6:	1d 82       	std	Y+5, r1	; 0x05
    3ee8:	1e 82       	std	Y+6, r1	; 0x06
    3eea:	1f 82       	std	Y+7, r1	; 0x07
    3eec:	18 86       	std	Y+8, r1	; 0x08
    3eee:	28 c0       	rjmp	.+80     	; 0x3f40 <softwareDelayMs+0x86>
	{
		for(j=0 ; j<ticks ; j++);
    3ef0:	19 82       	std	Y+1, r1	; 0x01
    3ef2:	1a 82       	std	Y+2, r1	; 0x02
    3ef4:	1b 82       	std	Y+3, r1	; 0x03
    3ef6:	1c 82       	std	Y+4, r1	; 0x04
    3ef8:	0b c0       	rjmp	.+22     	; 0x3f10 <softwareDelayMs+0x56>
    3efa:	89 81       	ldd	r24, Y+1	; 0x01
    3efc:	9a 81       	ldd	r25, Y+2	; 0x02
    3efe:	ab 81       	ldd	r26, Y+3	; 0x03
    3f00:	bc 81       	ldd	r27, Y+4	; 0x04
    3f02:	01 96       	adiw	r24, 0x01	; 1
    3f04:	a1 1d       	adc	r26, r1
    3f06:	b1 1d       	adc	r27, r1
    3f08:	89 83       	std	Y+1, r24	; 0x01
    3f0a:	9a 83       	std	Y+2, r25	; 0x02
    3f0c:	ab 83       	std	Y+3, r26	; 0x03
    3f0e:	bc 83       	std	Y+4, r27	; 0x04
    3f10:	29 81       	ldd	r18, Y+1	; 0x01
    3f12:	3a 81       	ldd	r19, Y+2	; 0x02
    3f14:	4b 81       	ldd	r20, Y+3	; 0x03
    3f16:	5c 81       	ldd	r21, Y+4	; 0x04
    3f18:	89 85       	ldd	r24, Y+9	; 0x09
    3f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f1c:	ab 85       	ldd	r26, Y+11	; 0x0b
    3f1e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3f20:	28 17       	cp	r18, r24
    3f22:	39 07       	cpc	r19, r25
    3f24:	4a 07       	cpc	r20, r26
    3f26:	5b 07       	cpc	r21, r27
    3f28:	40 f3       	brcs	.-48     	; 0x3efa <softwareDelayMs+0x40>

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
	/* 16 MHz */
	uint32_t ticks=378, i, j;
	for(i=0 ; i<u32_delay_in_ms ; i++)
    3f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f2e:	af 81       	ldd	r26, Y+7	; 0x07
    3f30:	b8 85       	ldd	r27, Y+8	; 0x08
    3f32:	01 96       	adiw	r24, 0x01	; 1
    3f34:	a1 1d       	adc	r26, r1
    3f36:	b1 1d       	adc	r27, r1
    3f38:	8d 83       	std	Y+5, r24	; 0x05
    3f3a:	9e 83       	std	Y+6, r25	; 0x06
    3f3c:	af 83       	std	Y+7, r26	; 0x07
    3f3e:	b8 87       	std	Y+8, r27	; 0x08
    3f40:	2d 81       	ldd	r18, Y+5	; 0x05
    3f42:	3e 81       	ldd	r19, Y+6	; 0x06
    3f44:	4f 81       	ldd	r20, Y+7	; 0x07
    3f46:	58 85       	ldd	r21, Y+8	; 0x08
    3f48:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f4c:	af 85       	ldd	r26, Y+15	; 0x0f
    3f4e:	b8 89       	ldd	r27, Y+16	; 0x10
    3f50:	28 17       	cp	r18, r24
    3f52:	39 07       	cpc	r19, r25
    3f54:	4a 07       	cpc	r20, r26
    3f56:	5b 07       	cpc	r21, r27
    3f58:	58 f2       	brcs	.-106    	; 0x3ef0 <softwareDelayMs+0x36>
	{
		for(j=0 ; j<ticks ; j++);
	}
}
    3f5a:	60 96       	adiw	r28, 0x10	; 16
    3f5c:	0f b6       	in	r0, 0x3f	; 63
    3f5e:	f8 94       	cli
    3f60:	de bf       	out	0x3e, r29	; 62
    3f62:	0f be       	out	0x3f, r0	; 63
    3f64:	cd bf       	out	0x3d, r28	; 61
    3f66:	cf 91       	pop	r28
    3f68:	df 91       	pop	r29
    3f6a:	08 95       	ret

00003f6c <__udivmodhi4>:
    3f6c:	aa 1b       	sub	r26, r26
    3f6e:	bb 1b       	sub	r27, r27
    3f70:	51 e1       	ldi	r21, 0x11	; 17
    3f72:	07 c0       	rjmp	.+14     	; 0x3f82 <__udivmodhi4_ep>

00003f74 <__udivmodhi4_loop>:
    3f74:	aa 1f       	adc	r26, r26
    3f76:	bb 1f       	adc	r27, r27
    3f78:	a6 17       	cp	r26, r22
    3f7a:	b7 07       	cpc	r27, r23
    3f7c:	10 f0       	brcs	.+4      	; 0x3f82 <__udivmodhi4_ep>
    3f7e:	a6 1b       	sub	r26, r22
    3f80:	b7 0b       	sbc	r27, r23

00003f82 <__udivmodhi4_ep>:
    3f82:	88 1f       	adc	r24, r24
    3f84:	99 1f       	adc	r25, r25
    3f86:	5a 95       	dec	r21
    3f88:	a9 f7       	brne	.-22     	; 0x3f74 <__udivmodhi4_loop>
    3f8a:	80 95       	com	r24
    3f8c:	90 95       	com	r25
    3f8e:	bc 01       	movw	r22, r24
    3f90:	cd 01       	movw	r24, r26
    3f92:	08 95       	ret

00003f94 <__udivmodsi4>:
    3f94:	a1 e2       	ldi	r26, 0x21	; 33
    3f96:	1a 2e       	mov	r1, r26
    3f98:	aa 1b       	sub	r26, r26
    3f9a:	bb 1b       	sub	r27, r27
    3f9c:	fd 01       	movw	r30, r26
    3f9e:	0d c0       	rjmp	.+26     	; 0x3fba <__udivmodsi4_ep>

00003fa0 <__udivmodsi4_loop>:
    3fa0:	aa 1f       	adc	r26, r26
    3fa2:	bb 1f       	adc	r27, r27
    3fa4:	ee 1f       	adc	r30, r30
    3fa6:	ff 1f       	adc	r31, r31
    3fa8:	a2 17       	cp	r26, r18
    3faa:	b3 07       	cpc	r27, r19
    3fac:	e4 07       	cpc	r30, r20
    3fae:	f5 07       	cpc	r31, r21
    3fb0:	20 f0       	brcs	.+8      	; 0x3fba <__udivmodsi4_ep>
    3fb2:	a2 1b       	sub	r26, r18
    3fb4:	b3 0b       	sbc	r27, r19
    3fb6:	e4 0b       	sbc	r30, r20
    3fb8:	f5 0b       	sbc	r31, r21

00003fba <__udivmodsi4_ep>:
    3fba:	66 1f       	adc	r22, r22
    3fbc:	77 1f       	adc	r23, r23
    3fbe:	88 1f       	adc	r24, r24
    3fc0:	99 1f       	adc	r25, r25
    3fc2:	1a 94       	dec	r1
    3fc4:	69 f7       	brne	.-38     	; 0x3fa0 <__udivmodsi4_loop>
    3fc6:	60 95       	com	r22
    3fc8:	70 95       	com	r23
    3fca:	80 95       	com	r24
    3fcc:	90 95       	com	r25
    3fce:	9b 01       	movw	r18, r22
    3fd0:	ac 01       	movw	r20, r24
    3fd2:	bd 01       	movw	r22, r26
    3fd4:	cf 01       	movw	r24, r30
    3fd6:	08 95       	ret

00003fd8 <__divmodsi4>:
    3fd8:	97 fb       	bst	r25, 7
    3fda:	09 2e       	mov	r0, r25
    3fdc:	05 26       	eor	r0, r21
    3fde:	0e d0       	rcall	.+28     	; 0x3ffc <__divmodsi4_neg1>
    3fe0:	57 fd       	sbrc	r21, 7
    3fe2:	04 d0       	rcall	.+8      	; 0x3fec <__divmodsi4_neg2>
    3fe4:	d7 df       	rcall	.-82     	; 0x3f94 <__udivmodsi4>
    3fe6:	0a d0       	rcall	.+20     	; 0x3ffc <__divmodsi4_neg1>
    3fe8:	00 1c       	adc	r0, r0
    3fea:	38 f4       	brcc	.+14     	; 0x3ffa <__divmodsi4_exit>

00003fec <__divmodsi4_neg2>:
    3fec:	50 95       	com	r21
    3fee:	40 95       	com	r20
    3ff0:	30 95       	com	r19
    3ff2:	21 95       	neg	r18
    3ff4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ff6:	4f 4f       	sbci	r20, 0xFF	; 255
    3ff8:	5f 4f       	sbci	r21, 0xFF	; 255

00003ffa <__divmodsi4_exit>:
    3ffa:	08 95       	ret

00003ffc <__divmodsi4_neg1>:
    3ffc:	f6 f7       	brtc	.-4      	; 0x3ffa <__divmodsi4_exit>
    3ffe:	90 95       	com	r25
    4000:	80 95       	com	r24
    4002:	70 95       	com	r23
    4004:	61 95       	neg	r22
    4006:	7f 4f       	sbci	r23, 0xFF	; 255
    4008:	8f 4f       	sbci	r24, 0xFF	; 255
    400a:	9f 4f       	sbci	r25, 0xFF	; 255
    400c:	08 95       	ret

0000400e <__prologue_saves__>:
    400e:	2f 92       	push	r2
    4010:	3f 92       	push	r3
    4012:	4f 92       	push	r4
    4014:	5f 92       	push	r5
    4016:	6f 92       	push	r6
    4018:	7f 92       	push	r7
    401a:	8f 92       	push	r8
    401c:	9f 92       	push	r9
    401e:	af 92       	push	r10
    4020:	bf 92       	push	r11
    4022:	cf 92       	push	r12
    4024:	df 92       	push	r13
    4026:	ef 92       	push	r14
    4028:	ff 92       	push	r15
    402a:	0f 93       	push	r16
    402c:	1f 93       	push	r17
    402e:	cf 93       	push	r28
    4030:	df 93       	push	r29
    4032:	cd b7       	in	r28, 0x3d	; 61
    4034:	de b7       	in	r29, 0x3e	; 62
    4036:	ca 1b       	sub	r28, r26
    4038:	db 0b       	sbc	r29, r27
    403a:	0f b6       	in	r0, 0x3f	; 63
    403c:	f8 94       	cli
    403e:	de bf       	out	0x3e, r29	; 62
    4040:	0f be       	out	0x3f, r0	; 63
    4042:	cd bf       	out	0x3d, r28	; 61
    4044:	09 94       	ijmp

00004046 <__epilogue_restores__>:
    4046:	2a 88       	ldd	r2, Y+18	; 0x12
    4048:	39 88       	ldd	r3, Y+17	; 0x11
    404a:	48 88       	ldd	r4, Y+16	; 0x10
    404c:	5f 84       	ldd	r5, Y+15	; 0x0f
    404e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4050:	7d 84       	ldd	r7, Y+13	; 0x0d
    4052:	8c 84       	ldd	r8, Y+12	; 0x0c
    4054:	9b 84       	ldd	r9, Y+11	; 0x0b
    4056:	aa 84       	ldd	r10, Y+10	; 0x0a
    4058:	b9 84       	ldd	r11, Y+9	; 0x09
    405a:	c8 84       	ldd	r12, Y+8	; 0x08
    405c:	df 80       	ldd	r13, Y+7	; 0x07
    405e:	ee 80       	ldd	r14, Y+6	; 0x06
    4060:	fd 80       	ldd	r15, Y+5	; 0x05
    4062:	0c 81       	ldd	r16, Y+4	; 0x04
    4064:	1b 81       	ldd	r17, Y+3	; 0x03
    4066:	aa 81       	ldd	r26, Y+2	; 0x02
    4068:	b9 81       	ldd	r27, Y+1	; 0x01
    406a:	ce 0f       	add	r28, r30
    406c:	d1 1d       	adc	r29, r1
    406e:	0f b6       	in	r0, 0x3f	; 63
    4070:	f8 94       	cli
    4072:	de bf       	out	0x3e, r29	; 62
    4074:	0f be       	out	0x3f, r0	; 63
    4076:	cd bf       	out	0x3d, r28	; 61
    4078:	ed 01       	movw	r28, r26
    407a:	08 95       	ret

0000407c <_exit>:
    407c:	f8 94       	cli

0000407e <__stop_program>:
    407e:	ff cf       	rjmp	.-2      	; 0x407e <__stop_program>
